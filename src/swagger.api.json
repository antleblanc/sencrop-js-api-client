{
  "host": "api.sencrop.com",
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Sencrop API",
    "description": "API to consume Sencrop data"
  },
  "basePath": "/v1",
  "schemes": [
    "https"
  ],
  "paths": {
    "/ping": {
      "get": {
        "operationId": "getPing",
        "summary": "Checks API's availability.",
        "tags": [
          "system"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Pong",
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "pong"
              ],
              "properties": {
                "pong": {
                  "type": "string",
                  "enum": [
                    "pong"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/crops": {
      "get": {
        "operationId": "getCrops",
        "summary": "Get the crops",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of the crops",
            "schema": {
              "$ref": "#/definitions/CropsCollection"
            }
          }
        },
        "tags": []
      }
    },
    "/modules": {
      "get": {
        "operationId": "getModules",
        "summary": "Get the modules",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of the modules",
            "schema": {
              "$ref": "#/definitions/ModulesCollection"
            }
          }
        },
        "tags": []
      }
    },
    "/utils/checkSignup": {
      "post": {
        "operationId": "postSignupCheck",
        "summary": "Hit the server to check the email can be used to signup.",
        "tags": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string"
          },
          {
            "in": "body",
            "description": "The email to check",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email can be used."
          }
        }
      }
    },
    "/password/lost": {
      "post": {
        "operationId": "postLostPassword",
        "summary": "Request a password change e-mail.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "description": "The infos to send the mail",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email"
                },
                "callbackPath": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password change email sent"
          }
        },
        "tags": []
      }
    },
    "/password": {
      "put": {
        "operationId": "putPassword",
        "summary": "Change a user password",
        "tags": [],
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "in": "body",
            "description": "The infos to change the password",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "lostToken",
                "newPassword"
              ],
              "additionalProperties": false,
              "properties": {
                "lostToken": {
                  "type": "string"
                },
                "newPassword": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Password changed"
          }
        }
      }
    },
    "/users/sign_in": {
      "post": {
        "operationId": "postLogin",
        "summary": "Log a user in",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "description": "The infos to log in",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "email",
                "password"
              ],
              "properties": {
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User logged in",
            "schema": {
              "$ref": "#/definitions/Session"
            }
          }
        },
        "tags": []
      }
    },
    "/users/verify": {
      "post": {
        "operationId": "postVerify",
        "summary": "Verify a user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "description": "Verify the user",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "email",
                "verify"
              ],
              "properties": {
                "email": {
                  "type": "string"
                },
                "verify": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User verified",
            "schema": {
              "$ref": "#/definitions/Session"
            }
          }
        },
        "tags": []
      }
    },
    "/partners/{partnerId}/tokenRequests": {
      "post": {
        "operationId": "postPartnerTokenRequest",
        "summary": "Request a user token",
        "tags": [
          "partners"
        ],
        "security": {
          "basicAuth": [
            "ROLE_PARTNER"
          ]
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "description": "Basic auth with API Client id and API Client Secret",
            "required": true,
            "name": "Authorization"
          },
          {
            "name": "partnerId",
            "in": "path",
            "type": "number",
            "description": "The partner organisation id",
            "pattern": "^[0-9]+$",
            "required": true
          },
          {
            "in": "body",
            "description": "Request a user token",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User token requested"
          }
        }
      }
    },
    "/partners/{partnerId}/tokens": {
      "post": {
        "operationId": "postPartnerToken",
        "summary": "Create a user token",
        "tags": [
          "partners"
        ],
        "security": {
          "basicAuth": [
            "ROLE_PARTNER"
          ]
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "description": "Basic auth with API Client id and API Client Secret",
            "required": true,
            "name": "Authorization"
          },
          {
            "name": "partnerId",
            "in": "path",
            "type": "number",
            "description": "The partner organisation id",
            "pattern": "^[0-9]+$",
            "required": true
          },
          {
            "in": "body",
            "description": "Create a user token",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "email",
                "code"
              ],
              "properties": {
                "email": {
                  "type": "string"
                },
                "code": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User token created",
            "schema": {
              "$ref": "#/definitions/Session"
            }
          }
        }
      }
    },
    "/partners/{partnerId}/devices": {
      "get": {
        "operationId": "getPartnerDevices",
        "summary": "Retrieves the devices a partner has access to.",
        "security": {
          "token": [
            "ROLE_PARTNER"
          ]
        },
        "tags": [
          "partners"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          },
          {
            "name": "partnerId",
            "in": "path",
            "type": "number",
            "description": "The partner organisation id",
            "pattern": "^[0-9]+$",
            "required": true
          },
          {
            "name": "limit",
            "in": "query",
            "type": "number",
            "description": "The number of items to retrieve",
            "pattern": "^[0-9]+$",
            "enum": [
              10,
              50,
              100
            ],
            "required": true
          },
          {
            "name": "start",
            "in": "query",
            "type": "number",
            "description": "The index in results",
            "pattern": "^[0-9]+$",
            "min": 0,
            "multipleOf": 10,
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The devices collection",
            "schema": {
              "$ref": "#/definitions/PartnerDevicesCollection"
            }
          }
        }
      }
    },
    "/partners/{partnerId}/users/{userId}/devices/{deviceId}/modules/{moduleId}/parameters": {
      "put": {
        "operationId": "putPartnerModuleParameters",
        "summary": "Update an partner module parameters",
        "security": {
          "token": [
            "ROLE_PARTNER"
          ]
        },
        "tags": [
          "partners"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "type": "number",
            "description": "The partner organisation id",
            "pattern": "^[0-9]+$",
            "name": "partnerId",
            "required": true
          },
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "pattern": "^[0-9]+$",
            "name": "userId",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The device id",
            "pattern": "^[0-9]+$",
            "name": "deviceId",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The module id",
            "pattern": "^[0-9]+$",
            "name": "moduleId",
            "type": "number"
          },
          {
            "in": "body",
            "description": "The module parameters",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "enabled": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Module sucessfully updated on the user device"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "operationId": "getUser",
        "summary": "Get a user's profile.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "name": "userId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user",
            "schema": {
              "$ref": "#/definitions/UserItem"
            }
          },
          "404": {
            "description": "User does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": []
      },
      "put": {
        "operationId": "putUser",
        "summary": "Update a user's profile.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "pattern": "^[0-9]+$",
            "name": "userId",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "description": "The new user",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The user were created/updated",
            "schema": {
              "$ref": "#/definitions/UserItem"
            }
          }
        },
        "tags": []
      }
    },
    "/users/{userId}/guests": {
      "get": {
        "operationId": "getUserGuests",
        "summary": "Get a user's guests.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "name": "userId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user's guests",
            "schema": {
              "$ref": "#/definitions/GuestsCollection"
            }
          },
          "404": {
            "description": "User does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": []
      },
      "post": {
        "operationId": "postUserGuest",
        "summary": "Create a user's guest.",
        "tags": [],
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "name": "userId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "description": "The user's guest",
            "name": "body",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/definitions/GuestItem"
                },
                {
                  "$ref": "#/definitions/GuestInvite"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The created user's guest",
            "schema": {
              "$ref": "#/definitions/GuestItem"
            }
          },
          "404": {
            "description": "User does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{userId}/guests/{guestId}": {
      "put": {
        "operationId": "putUserGuest",
        "summary": "Update a user's guest.",
        "tags": [],
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "pattern": "^[0-9]+$",
            "name": "userId",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The guest id",
            "pattern": "^[0-9]+$",
            "name": "guestId",
            "type": "string"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "description": "The user's guest",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GuestItem"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The user's guest updated",
            "schema": {
              "$ref": "#/definitions/GuestEntry"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteUserGuest",
        "summary": "Delete a user's guest.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "name": "userId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The guest id",
            "name": "guestId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "404": {
            "description": "The user's guest were successfully deleted."
          }
        },
        "tags": []
      }
    },
    "/users/{userId}/collaborators": {
      "get": {
        "operationId": "getUserCollaborators",
        "summary": "Get a user's collaborators.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "tags": [],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "name": "userId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user's collaborators",
            "schema": {
              "$ref": "#/definitions/CollaboratorsCollection"
            }
          },
          "404": {
            "description": "User does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "postUserCollaborator",
        "summary": "Create a user's collaborator.",
        "tags": [],
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "name": "userId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "description": "The user's collaborator",
            "name": "body",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/definitions/CollaboratorItem"
                },
                {
                  "$ref": "#/definitions/CollaboratorInvite"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The created user's collaborator",
            "schema": {
              "$ref": "#/definitions/CollaboratorEntry"
            }
          },
          "404": {
            "description": "User does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{userId}/collaborators/{collaboratorId}": {
      "put": {
        "operationId": "putUserCollaborator",
        "summary": "Update a user's collaborator.",
        "tags": [],
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "pattern": "^[0-9]+$",
            "name": "userId",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The collaborator id",
            "pattern": "^[0-9]+$",
            "name": "collaboratorId",
            "type": "string"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "description": "The user's collaborator",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CollaboratorItem"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The user's collaborator updated",
            "schema": {
              "$ref": "#/definitions/CollaboratorEntry"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteUserCollaborator",
        "summary": "Delete a user's collaborator.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "name": "userId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The collaborator id",
            "name": "collaboratorId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "404": {
            "description": "The user's collaborator were successfully deleted."
          }
        },
        "tags": []
      }
    },
    "/users/{userId}/aggregations": {
      "get": {
        "operationId": "getUserAggregations",
        "summary": "Get a user's aggregations.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "name": "userId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "query",
            "description": "Wether the aggregations should be computed",
            "name": "compute",
            "pattern": "^true|false$",
            "default": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "Wether you want to get only original data or eventually patched ones to avoid holes.",
            "name": "patched",
            "type": "boolean"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user's aggregations",
            "schema": {
              "$ref": "#/definitions/AggregationsCollection"
            }
          },
          "404": {
            "description": "User does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": []
      },
      "post": {
        "operationId": "postUserAggregation",
        "summary": "Create a user's aggregation.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "name": "userId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "description": "The user's aggregation",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AggregationItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The created user's aggregation",
            "schema": {
              "$ref": "#/definitions/AggregationEntry"
            }
          },
          "404": {
            "description": "User does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": []
      }
    },
    "/users/{userId}/aggregations/{aggregationId}": {
      "get": {
        "operationId": "getUserAggregation",
        "summary": "Get a single user aggregation with statistics for graphs",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "pattern": "^[0-9]+$",
            "name": "userId",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The aggregation id",
            "pattern": "^[0-9]+$",
            "name": "aggregationId",
            "type": "string"
          },
          {
            "in": "query",
            "description": "The interval of data",
            "name": "interval",
            "type": "string",
            "enum": [
              "auto",
              "hour",
              "6h",
              "day",
              "week",
              "month",
              "year"
            ],
            "default": "auto"
          },
          {
            "in": "query",
            "description": "Wether you want to get only original data or eventually patched ones to avoid holes.",
            "name": "patched",
            "type": "boolean"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "The user's aggregation updated",
            "schema": {
              "$ref": "#/definitions/AggregationEntry"
            }
          }
        },
        "tags": []
      },
      "put": {
        "operationId": "putUserAggregation",
        "summary": "Update a user's aggregation.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "pattern": "^[0-9]+$",
            "name": "userId",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The aggregation id",
            "pattern": "^[0-9]+$",
            "name": "aggregationId",
            "type": "string"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "description": "The user's aggregation",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AggregationItem"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The user's aggregation updated",
            "schema": {
              "$ref": "#/definitions/AggregationEntry"
            }
          }
        },
        "tags": []
      },
      "delete": {
        "operationId": "deleteUserAggregation",
        "summary": "Delete a user's aggregation.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "name": "userId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The aggregation id",
            "name": "aggregationId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "404": {
            "description": "The user's aggregation were successfully deleted."
          }
        },
        "tags": []
      }
    },
    "/users/{userId}/deviceGroups": {
      "get": {
        "operationId": "getUserDeviceGroups",
        "summary": "Get a user's devices groups.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "name": "userId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user's device group",
            "schema": {
              "$ref": "#/definitions/DeviceGroupsCollection"
            }
          },
          "404": {
            "description": "User does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": []
      },
      "post": {
        "operationId": "postUserDeviceGroup",
        "summary": "Create a user's device group.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "name": "userId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "description": "The user's device group",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceGroupInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The created user's device group",
            "schema": {
              "$ref": "#/definitions/DeviceGroupEntry"
            }
          },
          "404": {
            "description": "User does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": []
      }
    },
    "/users/{userId}/deviceGroups/{deviceGroupId}": {
      "get": {
        "operationId": "getUserDeviceGroup",
        "summary": "Get a user's devices group.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "name": "userId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The device group id",
            "name": "deviceGroupId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user's device group",
            "schema": {
              "$ref": "#/definitions/DeviceGroupEntry"
            }
          },
          "404": {
            "description": "User does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": []
      },
      "put": {
        "operationId": "putUserDeviceGroup",
        "summary": "Update a user's device group.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "pattern": "^[0-9]+$",
            "name": "userId",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The deviceGroup id",
            "pattern": "^[0-9]+$",
            "name": "deviceGroupId",
            "type": "string"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "description": "The user's device group",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceGroupInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The user's device group updated",
            "schema": {
              "$ref": "#/definitions/DeviceGroupEntry"
            }
          }
        },
        "tags": []
      },
      "delete": {
        "operationId": "deleteUserDeviceGroup",
        "summary": "Delete a user's device group.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "name": "userId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The device group id",
            "name": "deviceGroupId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "404": {
            "description": "The user's device group were successfully deleted."
          }
        },
        "tags": []
      }
    },
    "/users/{userId}/devices": {
      "get": {
        "operationId": "getUserDevices",
        "summary": "Get a user's devices.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "name": "userId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "query",
            "description": "The status date",
            "name": "date",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "description": "The measures to read",
            "name": "measures",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "RH_AIR_H1",
                "TEMP_AIR_H1",
                "WIND_MEAN",
                "WIND_MAX",
                "WIND_DIRECTION",
                "RAIN_TIC",
                "MOVE",
                "WET_TEMPERATURE"
              ]
            }
          },
          {
            "in": "query",
            "description": "Wether you want to get only original data or eventually patched ones to avoid holes.",
            "name": "patched",
            "type": "boolean"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "number",
            "description": "The number of items to retrieve",
            "pattern": "^[0-9]+$",
            "enum": [
              10,
              50,
              100
            ]
          },
          {
            "name": "start",
            "in": "query",
            "type": "number",
            "description": "The index in results",
            "pattern": "^[0-9]+$",
            "min": 0,
            "multipleOf": 10
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user's devices",
            "schema": {
              "$ref": "#/definitions/DevicesCollection"
            }
          },
          "404": {
            "description": "User does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": []
      },
      "post": {
        "operationId": "postUserDevice",
        "summary": "Setup a user's device.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "pattern": "^[0-9]+$",
            "name": "userId",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "description": "The user device activation couple",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "identification": {
                  "type": "string",
                  "pattern": "^(WCP?|RC|SC|UMO)[0-9]{6}$"
                },
                "activationCode": {
                  "type": "string",
                  "pattern": "^[A-F0-9]{4}$"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The user's device created",
            "schema": {
              "$ref": "#/definitions/DeviceItem"
            }
          }
        },
        "tags": []
      }
    },
    "/users/{userId}/devices/{deviceId}/positions": {
      "get": {
        "operationId": "getUserDevicePositions",
        "summary": "Get a user's device geographic positions historic.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "name": "userId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The device id",
            "name": "deviceId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user's device positions history",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "locationDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "latitude": {
                    "type": "number"
                  },
                  "longitude": {
                    "type": "number"
                  },
                  "altitude": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": []
      }
    },
    "/users/{userId}/devices/{deviceId}": {
      "get": {
        "operationId": "getUserDevice",
        "summary": "Get a user's device.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "name": "userId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The device id",
            "name": "deviceId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user's device",
            "schema": {
              "$ref": "#/definitions/DeviceEntry"
            }
          },
          "404": {
            "description": "User does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": []
      },
      "put": {
        "operationId": "putUserDevice",
        "summary": "Update a user's device.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "pattern": "^[0-9]+$",
            "name": "userId",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The device id",
            "pattern": "^[0-9]+$",
            "name": "deviceId",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "description": "The user device",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceItem"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The user's device updated",
            "schema": {
              "$ref": "#/definitions/DeviceItem"
            }
          }
        },
        "tags": []
      }
    },
    "/users/{userId}/devices/{deviceId}/modules": {
      "get": {
        "operationId": "getUserDeviceModules",
        "summary": "Get the modules a user activated on its device",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "pattern": "^[0-9]+$",
            "name": "userId",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The device id",
            "pattern": "^[0-9]+$",
            "name": "deviceId",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List of the modules activated on the given user device",
            "schema": {
              "$ref": "#/definitions/ModulesCollection"
            }
          }
        },
        "tags": []
      }
    },
    "/users/{userId}/devices/{deviceId}/modules/{moduleId}": {
      "put": {
        "operationId": "putUserDeviceModule",
        "summary": "Add a module to a user's device",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "pattern": "^[0-9]+$",
            "name": "userId",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The device id",
            "pattern": "^[0-9]+$",
            "name": "deviceId",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The module id",
            "pattern": "^[0-9]+$",
            "name": "moduleId",
            "type": "number"
          },
          {
            "in": "body",
            "description": "The module settings",
            "name": "body",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "description": "Arvalis Mileos parameters",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "mileos"
                      ]
                    },
                    "id": {
                      "type": "number"
                    }
                  }
                },
                {
                  "description": "Syngenta Avisio parameters",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "avisio"
                      ]
                    },
                    "siret": {
                      "type": "string"
                    },
                    "organisationName": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Bayer Movida parameters",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "movida"
                      ]
                    },
                    "administrator": {
                      "type": "string"
                    },
                    "organisationName": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "BASF Atlas parameters",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "atlas"
                      ]
                    },
                    "siret": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "ScanBean parameters",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "scanbean"
                      ]
                    },
                    "siret": {
                      "type": "string"
                    },
                    "organisationName": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Module sucessfully activated on the user device"
          }
        },
        "tags": []
      },
      "delete": {
        "operationId": "deleteUserDeviceModule",
        "summary": "Disable a module for a user's device",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "pattern": "^[0-9]+$",
            "name": "userId",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The device id",
            "pattern": "^[0-9]+$",
            "name": "deviceId",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The module id",
            "pattern": "^[0-9]+$",
            "name": "moduleId",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Module sucessfully disabled for the user device"
          }
        },
        "tags": []
      }
    },
    "/users/{userId}/devices/{deviceId}/shares/{sharesType}": {
      "put": {
        "operationId": "putUserDeviceShares",
        "summary": "Update a user's device shares.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "pattern": "^[0-9]+$",
            "name": "userId",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The device id",
            "name": "deviceId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The shares type",
            "name": "sharesType",
            "pattern": "^(guests|collaborators)$",
            "type": "string"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "description": "The users concerned by the user's device share",
            "name": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User's device shares updated",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        },
        "tags": []
      }
    },
    "/users/{userId}/devices/{deviceId}/statistics": {
      "get": {
        "operationId": "getUserDeviceStatistics",
        "summary": "Get a user's device's device's statistics.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "name": "userId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The device id",
            "name": "deviceId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "required": true,
            "description": "The statistics start date",
            "name": "startDate",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "required": true,
            "description": "The statistics end date",
            "name": "endDate",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "required": true,
            "description": "The measures to read",
            "name": "measures",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "RH_AIR_H1",
                "RH_AIR_H1_MIN",
                "RH_AIR_H1_MAX",
                "TEMP_AIR_H1",
                "TEMP_AIR_H1_MIN",
                "TEMP_AIR_H1_MAX",
                "WIND_MEAN",
                "WIND_MAX",
                "WIND_DIRECTION",
                "RAIN_TIC",
                "MOVE",
                "WET_TEMPERATURE"
              ]
            }
          },
          {
            "in": "query",
            "description": "Wether you want to get only original data or eventually patched ones to avoid holes.",
            "name": "patched",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's statistics",
            "schema": {
              "$ref": "#/definitions/DeviceStatistics"
            }
          },
          "404": {
            "description": "User/device does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": []
      }
    },
    "/users/{userId}/devices/{deviceId}/data/raw": {
      "get": {
        "operationId": "getUserDeviceRawData",
        "summary": "Get a user's device's raw data.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "name": "userId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The device id",
            "name": "deviceId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "query",
            "required": true,
            "description": "The date before which the data starts being retrieved",
            "name": "beforeDate",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "required": true,
            "description": "The number of measures to retrieve",
            "name": "size",
            "type": "number",
            "enum": [
              10,
              50,
              100,
              500,
              1000
            ]
          },
          {
            "in": "query",
            "required": true,
            "description": "The measures to read",
            "name": "measures",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "WIND_MAX",
                "WIND_MEAN",
                "WIND_DIRECTION",
                "RH_AIR_H1",
                "RAIN_TIC",
                "TEMP_AIR_H1",
                "MOVE",
                "LAT",
                "LNG",
                "ALT"
              ]
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's data",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "WIND_MAX",
                      "WIND_MEAN",
                      "WIND_DIRECTION",
                      "RH_AIR_H1",
                      "RH_AIR_H1_MIN",
                      "RH_AIR_H1_MAX",
                      "RAIN_TIC",
                      "TEMP_AIR_H1",
                      "TEMP_AIR_H1_MIN",
                      "TEMP_AIR_H1_MAX"
                    ]
                  },
                  "value": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User/device does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": []
      }
    },
    "/users/{userId}/devices/{deviceId}/data/hourly": {
      "get": {
        "operationId": "getUserDeviceHourlyData",
        "summary": "Get a user's device's hourly data.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "name": "userId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The device id",
            "name": "deviceId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "query",
            "required": true,
            "description": "The date before which the data starts being retrieved",
            "name": "beforeDate",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "required": true,
            "description": "The number of days to retrieve",
            "name": "days",
            "type": "number",
            "enum": [
              1,
              2,
              7,
              20,
              31
            ]
          },
          {
            "in": "query",
            "required": true,
            "description": "The measures to read",
            "name": "measures",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "WIND_MAX",
                "WIND_MEAN",
                "WIND_DIRECTION",
                "RH_AIR_H1",
                "RH_AIR_H1_MIN",
                "RH_AIR_H1_MAX",
                "RAIN_TIC",
                "TEMP_AIR_H1",
                "TEMP_AIR_H1_MIN",
                "TEMP_AIR_H1_MAX",
                "WET_TEMPERATURE"
              ]
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's statistics",
            "schema": {
              "$ref": "#/definitions/DeviceStatistics"
            }
          },
          "404": {
            "description": "User/device does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": []
      }
    },
    "/users/{userId}/devices/{deviceId}/data/daily": {
      "get": {
        "operationId": "getUserDeviceDailyData",
        "summary": "Get a user's device's daily data.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "name": "userId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The device id",
            "name": "deviceId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "query",
            "required": true,
            "description": "The date before which the data starts being retrieved",
            "name": "beforeDate",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "required": true,
            "description": "The number of days to retrieve",
            "name": "days",
            "type": "number",
            "enum": [
              7,
              30,
              60,
              90
            ]
          },
          {
            "in": "query",
            "required": true,
            "description": "The measures to read",
            "name": "measures",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "WIND_MAX",
                "WIND_MEAN",
                "WIND_DIRECTION",
                "RH_AIR_H1",
                "RH_AIR_H1_MIN",
                "RH_AIR_H1_MAX",
                "RAIN_TIC",
                "TEMP_AIR_H1",
                "TEMP_AIR_H1_MIN",
                "TEMP_AIR_H1_MAX",
                "WET_TEMPERATURE"
              ]
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's data",
            "schema": {
              "$ref": "#/definitions/DeviceStatistics"
            }
          },
          "404": {
            "description": "User/device does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": []
      }
    },
    "/users/{userId}/devices/{deviceId}/countinuousStatistics": {
      "get": {
        "operationId": "getUserDeviceContinuousStatistics",
        "summary": "Get a user's device's continuous device's statistics.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "name": "userId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The device id",
            "name": "deviceId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "required": true,
            "description": "The statistics start date",
            "name": "startDate",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "required": true,
            "description": "The statistics end date",
            "name": "endDate",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "required": true,
            "description": "The measures to read",
            "name": "measures",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "RH_AIR_H1",
                "RH_AIR_H1_MIN",
                "RH_AIR_H1_MAX",
                "TEMP_AIR_H1",
                "TEMP_AIR_H1_MIN",
                "TEMP_AIR_H1_MAX",
                "WIND_MEAN",
                "WIND_MAX",
                "WIND_DIRECTION",
                "RAIN_TIC",
                "MOVE",
                "WET_TEMPERATURE"
              ]
            }
          },
          {
            "in": "query",
            "description": "Wether you want to get only original data or eventually patched ones to avoid holes.",
            "name": "patched",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's statistics",
            "schema": {
              "$ref": "#/definitions/DeviceStatistics"
            }
          },
          "404": {
            "description": "User/device does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": []
      }
    },
    "/users/{userId}/devices/{deviceId}/degreeDays": {
      "get": {
        "operationId": "getUserDeviceDegreeDays",
        "summary": "Get a user's device's degree days.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "name": "userId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The device id",
            "name": "deviceId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "query",
            "required": true,
            "description": "The statistics start date",
            "name": "startDate",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "required": true,
            "description": "The statistics end date",
            "name": "endDate",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's degree days",
            "schema": {
              "$ref": "#/definitions/DeviceDegreeDays"
            }
          },
          "404": {
            "description": "User/device does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": []
      }
    },
    "/users/{userId}/devices/{deviceId}/summaries/{date}": {
      "get": {
        "operationId": "getUserDeviceSummary",
        "summary": "Get a user's device's summary at a given date.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "name": "userId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The device id",
            "name": "deviceId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "required": true,
            "description": "The summary date",
            "name": "date",
            "type": "string",
            "format": "date-time",
            "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z"
          },
          {
            "in": "query",
            "required": true,
            "description": "The measures to read",
            "name": "measures",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "RH_AIR_H1",
                "TEMP_AIR_H1",
                "WIND_MEAN",
                "WIND_MAX",
                "WIND_DIRECTION",
                "RAIN_TIC",
                "MOVE"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's summary",
            "schema": {
              "$ref": "#/definitions/DeviceSummaryEntry"
            }
          },
          "404": {
            "description": "User/device does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": []
      }
    },
    "/users/{userId}/devices/{deviceId}/forecasts": {
      "get": {
        "operationId": "getUserDeviceForecasts",
        "summary": "Get a user's device's forecasts.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "name": "userId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The device id",
            "name": "deviceId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "query",
            "name": "date",
            "description": "Date of the forecasts",
            "type": "string",
            "format": "date-time",
            "required": true
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's forecasts",
            "schema": {
              "$ref": "#/definitions/DeviceForecasts"
            }
          },
          "404": {
            "description": "User/device does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": []
      }
    },
    "/users/{userId}/forecasts": {
      "get": {
        "operationId": "getUserForecasts",
        "summary": "Get a user's forecasts.",
        "tags": [],
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "name": "userId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "query",
            "required": true,
            "description": "The latitude of the forecasts",
            "name": "latitude",
            "pattern": "^\\-?[0-9]+(\\.[0-9]+)?$",
            "minimum": -90,
            "maximum": 90,
            "type": "number"
          },
          {
            "in": "query",
            "required": true,
            "description": "The longitude of the forecasts",
            "name": "longitude",
            "pattern": "^\\-?[0-9]+(\\.[0-9]+)?$",
            "minimum": -180,
            "maximum": 180,
            "type": "number"
          },
          {
            "in": "query",
            "name": "date",
            "description": "Date of the forecasts",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's forecasts",
            "schema": {
              "$ref": "#/definitions/DeviceForecasts"
            }
          },
          "404": {
            "description": "User/device does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{userId}/data/daily": {
      "get": {
        "operationId": "getUserDailyData",
        "summary": "Get a user's daily data for a given geo location.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "name": "userId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "query",
            "required": true,
            "description": "The latitude of the data",
            "name": "latitude",
            "pattern": "^\\-?[0-9]+(\\.[0-9]+)?$",
            "minimum": -90,
            "maximum": 90,
            "type": "number"
          },
          {
            "in": "query",
            "required": true,
            "description": "The longitude of the data",
            "name": "longitude",
            "pattern": "^\\-?[0-9]+(\\.[0-9]+)?$",
            "minimum": -180,
            "maximum": 180,
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "required": true,
            "description": "The date before which the data starts being retrieved",
            "name": "beforeDate",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "required": true,
            "description": "The number of days to retrieve",
            "name": "days",
            "type": "number",
            "enum": [
              7,
              30,
              60,
              90
            ]
          },
          {
            "in": "query",
            "required": true,
            "description": "The measures to read",
            "name": "measures",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "WIND_MAX",
                "WIND_MEAN",
                "WIND_DIRECTION",
                "RH_AIR_H1",
                "RH_AIR_H1_MIN",
                "RH_AIR_H1_MAX",
                "RAIN_TIC",
                "TEMP_AIR_H1",
                "TEMP_AIR_H1_MIN",
                "TEMP_AIR_H1_MAX",
                "WET_TEMPERATURE"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's statistics",
            "schema": {
              "$ref": "#/definitions/DeviceStatistics"
            }
          },
          "404": {
            "description": "User/device does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": []
      }
    },
    "/users/{userId}/data/hourly": {
      "get": {
        "operationId": "getUserHourlyData",
        "summary": "Get a user's hourly data for a given geo location.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "name": "userId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "query",
            "required": true,
            "description": "The latitude of the data",
            "name": "latitude",
            "pattern": "^\\-?[0-9]+(\\.[0-9]+)?$",
            "minimum": -90,
            "maximum": 90,
            "type": "number"
          },
          {
            "in": "query",
            "required": true,
            "description": "The longitude of the data",
            "name": "longitude",
            "pattern": "^\\-?[0-9]+(\\.[0-9]+)?$",
            "minimum": -180,
            "maximum": 180,
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "required": true,
            "description": "The date before which the data starts being retrieved",
            "name": "beforeDate",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "required": true,
            "description": "The number of days to retrieve",
            "name": "days",
            "type": "number",
            "enum": [
              1,
              2,
              7,
              20,
              31
            ]
          },
          {
            "in": "query",
            "required": true,
            "description": "The measures to read",
            "name": "measures",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "WIND_MAX",
                "WIND_MEAN",
                "WIND_DIRECTION",
                "RH_AIR_H1",
                "RH_AIR_H1_MIN",
                "RH_AIR_H1_MAX",
                "RAIN_TIC",
                "TEMP_AIR_H1",
                "TEMP_AIR_H1_MIN",
                "TEMP_AIR_H1_MAX",
                "WET_TEMPERATURE"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's statistics",
            "schema": {
              "$ref": "#/definitions/DeviceStatistics"
            }
          },
          "404": {
            "description": "User/device does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": []
      }
    },
    "/users/{userId}/preferences": {
      "get": {
        "operationId": "getUserPreferences",
        "summary": "Get a user's preferences.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "name": "userId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user preferences",
            "schema": {
              "$ref": "#/definitions/UserPreferences"
            }
          },
          "404": {
            "description": "User does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": []
      },
      "put": {
        "operationId": "putUserPreferences",
        "summary": "Update a user's preferences.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "pattern": "^[0-9]+$",
            "name": "userId",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "description": "The new user preferences",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserPreferences"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The user preferences were created/updated",
            "schema": {
              "$ref": "#/definitions/UserPreferences"
            }
          }
        },
        "tags": []
      }
    },
    "/organisations/{organisationId}/operations": {
      "get": {
        "operationId": "getOrganisationOperations",
        "summary": "Get a organisation's operations.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The organisation id",
            "name": "organisationId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested organisation's operations",
            "schema": {
              "$ref": "#/definitions/OperationsCollection"
            }
          },
          "404": {
            "description": "Organisation does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": []
      },
      "post": {
        "operationId": "postOrganisationOperation",
        "summary": "Create an organisation's operation.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The organisation id",
            "name": "organisationId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "The operation to add",
            "schema": {
              "$ref": "#/definitions/OperationItem"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The newly created organisation's operation",
            "schema": {
              "$ref": "#/definitions/OperationItem"
            }
          },
          "404": {
            "description": "Organisation does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": []
      }
    },
    "/organisations/{organisationId}/operations/{operationId}": {
      "get": {
        "operationId": "getOrganisationOperation",
        "summary": "Retrieve an organisation's operation.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The organisation id",
            "name": "organisationId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The operation id",
            "name": "operationId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The organisation's operation",
            "schema": {
              "$ref": "#/definitions/OperationEntry"
            }
          },
          "404": {
            "description": "Organisation or operation does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": []
      },
      "put": {
        "operationId": "putOrganisationOperation",
        "summary": "Update an organisation's operation.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The organisation id",
            "name": "organisationId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The operation id",
            "name": "operationId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "The operation to update",
            "schema": {
              "$ref": "#/definitions/OperationItem"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The modified organisation's operation",
            "schema": {
              "$ref": "#/definitions/OperationItem"
            }
          },
          "404": {
            "description": "Organisation does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": []
      },
      "delete": {
        "operationId": "deleteOrganisationOperation",
        "summary": "Delete an organisation's operation.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The organisation id",
            "name": "organisationId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The operation id",
            "name": "operationId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "The organisation's operation does not exist anymore"
          }
        },
        "tags": []
      }
    },
    "/users/{userId}/alerts": {
      "get": {
        "operationId": "getUserAlerts",
        "summary": "Get a user's alerts.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "name": "userId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user's alerts",
            "schema": {
              "$ref": "#/definitions/AlertsCollection"
            }
          },
          "404": {
            "description": "User does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": []
      },
      "post": {
        "operationId": "postUserAlert",
        "summary": "Create a user's alert.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "pattern": "^[0-9]+$",
            "name": "userId",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "description": "The user's alert",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AlertItem"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The user's alert created",
            "schema": {
              "$ref": "#/definitions/AlertEntry"
            }
          }
        },
        "tags": []
      }
    },
    "/users/{userId}/alerts/{alertId}": {
      "put": {
        "operationId": "putUserAlert",
        "summary": "Update a user's alert.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "pattern": "^[0-9]+$",
            "name": "userId",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The alert id",
            "pattern": "^[0-9]+$",
            "name": "alertId",
            "type": "string"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "description": "The user's alert",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AlertItem"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The user's alert updated",
            "schema": {
              "$ref": "#/definitions/AlertEntry"
            }
          }
        },
        "tags": []
      },
      "delete": {
        "operationId": "deleteUserAlert",
        "summary": "Delete a user's alert.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The user id",
            "name": "userId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "path",
            "required": true,
            "description": "The alert id",
            "name": "alertId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "404": {
            "description": "The user's alert were successfully deleted."
          }
        },
        "tags": []
      }
    },
    "/organisations": {
      "post": {
        "operationId": "postOrganisation",
        "summary": "Creates a new organisation.",
        "tags": [],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "description": "The necessary contents to create a new organisation",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "firstname",
                "lastname",
                "password",
                "email",
                "phone",
                "address",
                "zipcode",
                "city",
                "country",
                "company",
                "locale"
              ],
              "properties": {
                "firstname": {
                  "type": "string"
                },
                "lastname": {
                  "type": "string"
                },
                "birthDate": {
                  "type": "string",
                  "format": "date"
                },
                "password": {
                  "type": "string"
                },
                "email": {
                  "type": "string",
                  "format": "email"
                },
                "locale": {
                  "type": "string",
                  "pattern": "^[a-z]{2}-[A-Z]{2}$",
                  "maxLength": 5
                },
                "timeZone": {
                  "type": "string",
                  "maxLength": 50
                },
                "phone": {
                  "type": "string"
                },
                "address": {
                  "type": "string"
                },
                "zipcode": {
                  "type": "string"
                },
                "city": {
                  "type": "string"
                },
                "country": {
                  "type": "string"
                },
                "company": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "area": {
                      "type": "number"
                    },
                    "crops": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "irrigation": {
                      "type": "boolean"
                    }
                  }
                },
                "callbackPath": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The organisation were created",
            "schema": {
              "$ref": "#/definitions/OrganisationItem"
            }
          }
        }
      }
    },
    "/organisations/{organisationId}": {
      "put": {
        "operationId": "putOrganisation",
        "summary": "Update an organisation.",
        "security": {
          "token": [
            "ROLE_USER"
          ]
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "description": "The organisation id",
            "name": "organisationId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "body",
            "description": "The modified organisation",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrganisationItem"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "The organisation were sucessfully updated",
            "schema": {
              "$ref": "#/definitions/OrganisationItem"
            }
          }
        },
        "tags": []
      }
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "properties": {
        "transactionId": {
          "type": "string"
        },
        "code": {
          "type": "string",
          "pattern": "^E_[a-zA-Z0-9_]+$"
        }
      }
    },
    "UserItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "contents"
      ],
      "properties": {
        "id": {
          "type": "number"
        },
        "contents": {
          "$ref": "#/definitions/User"
        },
        "unreadNotifications": {
          "type": "number"
        }
      }
    },
    "UserInput": {
      "type": "object",
      "additionalProperties": true,
      "required": [
        "contents"
      ],
      "properties": {
        "contents": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "UsersItemsHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/UserItem"
        }
      }
    },
    "User": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "email",
        "firstname",
        "lastname",
        "address",
        "zipcode",
        "city",
        "country"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email"
        },
        "locale": {
          "type": "string",
          "pattern": "^[a-z]{2}-[A-Z]{2}$",
          "maxLength": 5
        },
        "timeZone": {
          "type": "string",
          "maxLength": 50
        },
        "phone": {
          "type": "string"
        },
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "zipcode": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "minItems": 1,
          "maxItems": 2,
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "ROLE_USER",
              "ROLE_ADMIN"
            ]
          }
        },
        "birthDate": {
          "type": "string",
          "format": "date"
        },
        "organisationId": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        }
      }
    },
    "MaybeIncompleteUser": {
      "description": "A user that may only have an email and a locale",
      "oneOf": [
        {
          "$ref": "#/definitions/User"
        },
        {
          "type": "object",
          "required": [
            "email"
          ],
          "properties": {
            "email": {
              "type": "string",
              "format": "email"
            },
            "locale": {
              "type": "string",
              "pattern": "^[a-z]{2}-[A-Z]{2}$",
              "maxLength": 5
            },
            "timeZone": {
              "type": "string",
              "maxLength": 50
            }
          }
        }
      ]
    },
    "OrganisationsItemsHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/OrganisationItem"
        }
      }
    },
    "OrganisationItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "contents"
      ],
      "properties": {
        "id": {
          "type": "number"
        },
        "types": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "customer",
              "partner",
              "admin"
            ]
          }
        },
        "contents": {
          "$ref": "#/definitions/Organisation"
        }
      }
    },
    "Organisation": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "name",
        "city",
        "country",
        "address",
        "zipcode",
        "locale",
        "timeZone"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "zipcode": {
          "type": "string"
        },
        "identification": {
          "type": "string"
        },
        "locale": {
          "type": "string",
          "pattern": "^[a-z]{2}-[A-Z]{2}$",
          "maxLength": 5
        },
        "timeZone": {
          "type": "string",
          "maxLength": 50
        }
      }
    },
    "UserPreferences": {
      "type": "object",
      "required": [
        "areasUnit",
        "locale",
        "precipitationsUnit",
        "smallVolumesUnit",
        "speedsUnit",
        "temperaturesUnit",
        "volumesUnit",
        "weightsUnit"
      ],
      "properties": {
        "areasUnit": {
          "type": "string",
          "enum": [
            "HA",
            "A"
          ]
        },
        "locale": {
          "type": "string",
          "pattern": "[a-z]{2,3}(-[A-Z]{2,3})?"
        },
        "precipitationsUnit": {
          "type": "string",
          "enum": [
            "MM",
            "INCH"
          ]
        },
        "smallVolumesUnit": {
          "type": "string",
          "enum": [
            "L",
            "GAL_US"
          ]
        },
        "speedsUnit": {
          "type": "string",
          "enum": [
            "KPH",
            "MPH"
          ]
        },
        "temperaturesUnit": {
          "type": "string",
          "enum": [
            "C",
            "F"
          ]
        },
        "volumesUnit": {
          "type": "string",
          "enum": [
            "M3",
            "CU_YD"
          ]
        },
        "weightsUnit": {
          "type": "string",
          "enum": [
            "T",
            "SH_TN"
          ]
        },
        "optionalMeasures": {
          "type": "array",
          "minItems": 0,
          "items": {
            "type": "string",
            "enum": [
              "WET_TEMPERATURE"
            ]
          }
        }
      }
    },
    "PartnerDevicesCollection": {
      "type": "object",
      "required": [
        "items",
        "models",
        "devices",
        "devicesStatuses",
        "organisations",
        "users"
      ],
      "properties": {
        "models": {
          "$ref": "#/definitions/ModelsItemsHash"
        },
        "devicesStatuses": {
          "$ref": "#/definitions/DeviceStatusesItemsHash"
        },
        "devices": {
          "$ref": "#/definitions/DevicesItemsHash"
        },
        "users": {
          "$ref": "#/definitions/UsersItemsHash"
        },
        "organisations": {
          "$ref": "#/definitions/OrganisationsItemsHash"
        },
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$"
          }
        },
        "total": {
          "type": "number",
          "min": 0
        }
      }
    },
    "DevicesCollection": {
      "type": "object",
      "required": [
        "items",
        "models",
        "devices",
        "devicesStatuses",
        "devicesSummaries"
      ],
      "properties": {
        "models": {
          "$ref": "#/definitions/ModelsItemsHash"
        },
        "devicesStatuses": {
          "$ref": "#/definitions/DeviceStatusesItemsHash"
        },
        "devicesSummaries": {
          "$ref": "#/definitions/SummariesItemsHash"
        },
        "devices": {
          "$ref": "#/definitions/DevicesItemsHash"
        },
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$"
          }
        },
        "total": {
          "type": "number",
          "min": 0
        }
      }
    },
    "DevicesItemsHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/DeviceItem"
        }
      }
    },
    "DeviceEntry": {
      "type": "object",
      "required": [
        "entry",
        "models",
        "devices",
        "devicesStatuses"
      ],
      "properties": {
        "models": {
          "$ref": "#/definitions/ModelsItemsHash"
        },
        "devicesStatuses": {
          "$ref": "#/definitions/DeviceStatusesItemsHash"
        },
        "devices": {
          "$ref": "#/definitions/DevicesItemsHash"
        },
        "entry": {
          "type": "number"
        }
      }
    },
    "DeviceItem": {
      "type": "object",
      "required": [
        "contents"
      ],
      "properties": {
        "id": {
          "type": "number"
        },
        "contents": {
          "$ref": "#/definitions/Device"
        },
        "accessPeriods": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "deviceId",
              "userId",
              "type",
              "startDate",
              "endDate"
            ],
            "properties": {
              "deviceId": {
                "type": "number"
              },
              "userId": {
                "type": "number"
              },
              "moduleId": {
                "type": "number"
              },
              "delegatorId": {
                "type": "number"
              },
              "parameters": {
                "type": "object",
                "additionalProperties": true
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "owner",
                  "user",
                  "guest",
                  "collaborator",
                  "partner"
                ]
              },
              "startDate": {
                "type": "string",
                "format": "date-time"
              },
              "endDate": {
                "type": "string",
                "format": "date-time"
              },
              "deletionDate": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        },
        "identification": {
          "type": "string",
          "pattern": "^(WCP?|RC|SC|UMO)[0-9]{6}$"
        },
        "serial": {
          "type": "string",
          "pattern": "^[A-Z0-9]+$"
        },
        "modelId": {
          "type": "number"
        },
        "userId": {
          "type": "number"
        },
        "organisationId": {
          "type": "number"
        }
      }
    },
    "Device": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "DevicesMovesHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/DeviceMoves"
        }
      }
    },
    "DeviceMoves": {
      "type": "object",
      "required": [
        "count",
        "dates"
      ],
      "properties": {
        "count": {
          "type": "number"
        },
        "dates": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    },
    "DeviceStatistics": {
      "type": "object",
      "required": [
        "entry",
        "models",
        "devices",
        "measures"
      ],
      "properties": {
        "models": {
          "$ref": "#/definitions/ModelsItemsHash"
        },
        "devices": {
          "$ref": "#/definitions/DevicesItemsHash"
        },
        "entry": {
          "type": "string",
          "pattern": "^[0-9]+$"
        },
        "measures": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": true,
            "properties": {
              "key": {
                "type": "number"
              },
              "docCount": {
                "type": "number"
              }
            }
          }
        }
      }
    },
    "DeviceDegreeDays": {
      "type": "object",
      "required": [
        "entry",
        "models",
        "devices",
        "degreeDays"
      ],
      "properties": {
        "models": {
          "$ref": "#/definitions/ModelsItemsHash"
        },
        "devices": {
          "$ref": "#/definitions/DevicesItemsHash"
        },
        "entry": {
          "type": "number",
          "pattern": "^[0-9]+$"
        },
        "degreeDays": {
          "$ref": "#/definitions/DeviceDegreeDayItemsHash"
        }
      }
    },
    "DeviceDegreeDayItemsHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/DeviceDegreeDay"
        }
      }
    },
    "DeviceDegreeDay": {
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "date",
          "count",
          "min",
          "max",
          "mean"
        ],
        "properties": {
          "date": {
            "type": "string",
            "format": "date"
          },
          "count": {
            "type": "number"
          },
          "min": {
            "type": "number"
          },
          "max": {
            "type": "number"
          },
          "mean": {
            "type": "number"
          }
        }
      }
    },
    "DeviceSummaryEntry": {
      "type": "object",
      "required": [
        "entry",
        "models",
        "devices",
        "devicesSummaries"
      ],
      "properties": {
        "models": {
          "$ref": "#/definitions/ModelsItemsHash"
        },
        "devices": {
          "$ref": "#/definitions/DevicesItemsHash"
        },
        "devicesSummaries": {
          "$ref": "#/definitions/SummariesItemsHash"
        },
        "entry": {
          "type": "string",
          "pattern": "^[0-9]+$"
        }
      }
    },
    "SummariesItemsHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/DeviceSummaryItem"
        }
      }
    },
    "DeviceSummaryItem": {
      "type": "object",
      "patternProperties": {
        "^(RH_AIR_H1|TEMP_AIR_H1|WIND_MEAN|WIND_MAX|RAIN_TIC|MOVE)$": {
          "type": "object",
          "required": [
            "lastMeasure"
          ],
          "properties": {
            "date": {
              "type": "string",
              "format": "date-time"
            },
            "lastMeasure": {
              "type": "number"
            },
            "lastHour": {
              "type": "number"
            },
            "last3Hours": {
              "type": "number"
            },
            "lastDay": {
              "type": "number"
            },
            "lastWeek": {
              "type": "number"
            }
          }
        }
      }
    },
    "DeviceForecasts": {
      "type": "object",
      "required": [
        "entry",
        "models",
        "devices",
        "forecasts"
      ],
      "properties": {
        "models": {
          "$ref": "#/definitions/ModelsItemsHash"
        },
        "devices": {
          "$ref": "#/definitions/DevicesItemsHash"
        },
        "entry": {
          "type": "string",
          "pattern": "^[0-9]+$"
        },
        "forecasts": {
          "type": "object",
          "additionalProperties": true
        }
      }
    },
    "DeviceStatusesItemsHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/DeviceStatusItem"
        }
      }
    },
    "DeviceStatusItem": {
      "type": "object",
      "required": [
        "contents"
      ],
      "properties": {
        "id": {
          "type": "number",
          "pattern": "^[0-9]+$"
        },
        "measuresCount": {
          "type": "number"
        },
        "contents": {
          "$ref": "#/definitions/DeviceStatus"
        }
      }
    },
    "DeviceStatus": {
      "type": "object",
      "required": [
        "firmware",
        "battery",
        "signal",
        "latitude",
        "longitude",
        "altitude",
        "locationSatellites",
        "locationPrecision",
        "lastLocationDate",
        "lastLocationFailureDate",
        "lastMoveDate",
        "lastRebootDate",
        "lastStatusUpdateDate"
      ],
      "properties": {
        "firmware": {
          "type": "string"
        },
        "battery": {
          "type": "number"
        },
        "signal": {
          "type": "number"
        },
        "latitude": {
          "type": "number"
        },
        "longitude": {
          "type": "number"
        },
        "altitude": {
          "type": "number"
        },
        "locationSatellites": {
          "type": "number"
        },
        "locationPrecision": {
          "type": "number"
        },
        "lastLocationDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastLocationFailureDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastRebootDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastMoveDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastStatusUpdateDate": {
          "type": "string",
          "format": "date-time"
        },
        "activeDate": {
          "type": "string",
          "format": "date-time"
        },
        "manufacturedDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ModelsItemsHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/ModelItem"
        }
      }
    },
    "ModelItem": {
      "type": "object",
      "required": [
        "contents"
      ],
      "properties": {
        "id": {
          "type": "number",
          "pattern": "^[0-9]+$"
        },
        "contents": {
          "$ref": "#/definitions/Model"
        }
      }
    },
    "Model": {
      "type": "object",
      "required": [
        "name",
        "conception",
        "manufacturing",
        "calibration",
        "weight"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "externalDiameter": {
          "type": "number"
        },
        "conception": {
          "type": "string"
        },
        "manufacturing": {
          "type": "string"
        },
        "calibration": {
          "type": "string"
        },
        "height": {
          "type": "number"
        },
        "weight": {
          "type": "number"
        }
      }
    },
    "DeviceGroupsCollection": {
      "type": "object",
      "required": [
        "items",
        "deviceGroups"
      ],
      "properties": {
        "deviceGroups": {
          "$ref": "#/definitions/DeviceGroupsItemsHash"
        },
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$"
          }
        }
      }
    },
    "DeviceGroupEntry": {
      "type": "object",
      "required": [
        "entry",
        "deviceGroups"
      ],
      "properties": {
        "deviceGroups": {
          "$ref": "#/definitions/DeviceGroupsItemsHash"
        },
        "entry": {
          "type": "number",
          "pattern": "^[0-9]+$"
        }
      }
    },
    "DeviceGroupsItemsHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/DeviceGroupItem"
        }
      }
    },
    "DeviceGroupItem": {
      "type": "object",
      "required": [
        "contents"
      ],
      "properties": {
        "id": {
          "type": "number",
          "pattern": "^[0-9]+$"
        },
        "contents": {
          "$ref": "#/definitions/DeviceGroup"
        }
      }
    },
    "DeviceGroupInput": {
      "type": "object",
      "required": [
        "contents"
      ],
      "properties": {
        "contents": {
          "$ref": "#/definitions/DeviceGroup"
        }
      }
    },
    "DeviceGroup": {
      "type": "object",
      "required": [
        "name",
        "devicesIds"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "devicesIds": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$"
          }
        }
      }
    },
    "CollaboratorsCollection": {
      "type": "object",
      "required": [
        "items",
        "collaborators",
        "users",
        "devices"
      ],
      "properties": {
        "users": {
          "$ref": "#/definitions/UsersItemsHash"
        },
        "devices": {
          "$ref": "#/definitions/DevicesItemsHash"
        },
        "collaborators": {
          "$ref": "#/definitions/CollaboratorsItemsHash"
        },
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$"
          }
        }
      }
    },
    "CollaboratorEntry": {
      "type": "object",
      "required": [
        "entry",
        "collaborators",
        "users",
        "devices"
      ],
      "properties": {
        "users": {
          "$ref": "#/definitions/UsersItemsHash"
        },
        "devices": {
          "$ref": "#/definitions/DevicesItemsHash"
        },
        "collaborators": {
          "$ref": "#/definitions/CollaboratorsItemsHash"
        },
        "entry": {
          "type": "number",
          "pattern": "^[0-9]+$"
        }
      }
    },
    "CollaboratorsItemsHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/CollaboratorItem"
        }
      }
    },
    "CollaboratorItem": {
      "type": "object",
      "required": [
        "contents"
      ],
      "properties": {
        "id": {
          "type": "number",
          "pattern": "^[0-9]+$"
        },
        "contents": {
          "$ref": "#/definitions/Collaborator"
        }
      }
    },
    "CollaboratorInvite": {
      "type": "object",
      "required": [
        "sharedDevicesIds",
        "user"
      ],
      "properties": {
        "user": {
          "$ref": "#/definitions/MaybeIncompleteUser"
        },
        "sharedDevicesIds": {
          "type": "array",
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$"
          }
        },
        "callbackPath": {
          "type": "string"
        }
      }
    },
    "Collaborator": {
      "type": "object",
      "required": [
        "collaboratorUserId",
        "sharedDevicesIds"
      ],
      "properties": {
        "collaboratorUserId": {
          "type": "number"
        },
        "sharedDevicesIds": {
          "type": "array",
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$"
          }
        }
      }
    },
    "GuestsCollection": {
      "type": "object",
      "required": [
        "items",
        "guests",
        "users",
        "devices"
      ],
      "properties": {
        "users": {
          "$ref": "#/definitions/UsersItemsHash"
        },
        "devices": {
          "$ref": "#/definitions/DevicesItemsHash"
        },
        "guests": {
          "$ref": "#/definitions/GuestsItemsHash"
        },
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$"
          }
        }
      }
    },
    "GuestEntry": {
      "type": "object",
      "required": [
        "entry",
        "guests",
        "users",
        "devices"
      ],
      "properties": {
        "users": {
          "$ref": "#/definitions/UsersItemsHash"
        },
        "devices": {
          "$ref": "#/definitions/DevicesItemsHash"
        },
        "guests": {
          "$ref": "#/definitions/GuestsItemsHash"
        },
        "entry": {
          "type": "number",
          "pattern": "^[0-9]+$"
        }
      }
    },
    "GuestsItemsHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/GuestItem"
        }
      }
    },
    "GuestItem": {
      "type": "object",
      "required": [
        "contents"
      ],
      "properties": {
        "id": {
          "type": "number",
          "pattern": "^[0-9]+$"
        },
        "contents": {
          "$ref": "#/definitions/Guest"
        }
      }
    },
    "GuestInvite": {
      "type": "object",
      "required": [
        "sharedDevicesIds",
        "user"
      ],
      "properties": {
        "user": {
          "$ref": "#/definitions/MaybeIncompleteUser"
        },
        "sharedDevicesIds": {
          "type": "array",
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$"
          }
        },
        "callbackPath": {
          "type": "string"
        }
      }
    },
    "Guest": {
      "type": "object",
      "required": [
        "guestUserId",
        "sharedDevicesIds"
      ],
      "properties": {
        "guestUserId": {
          "type": "number"
        },
        "sharedDevicesIds": {
          "type": "array",
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$"
          }
        }
      }
    },
    "MeasuresItemsHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/MeasureItem"
        }
      }
    },
    "MeasureItem": {
      "type": "object",
      "required": [
        "contents"
      ],
      "properties": {
        "id": {
          "type": "number",
          "pattern": "^[0-9]+$"
        },
        "contents": {
          "$ref": "#/definitions/Measure"
        }
      }
    },
    "Measure": {
      "type": "object",
      "required": [
        "deviceId",
        "measures"
      ],
      "properties": {
        "deviceId": {
          "type": "number"
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "measures": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "TEMP_AIR_H1",
              "RAIN_TIC",
              "RH_AIR_H1",
              "WIND_MEAN",
              "WIND_DIRECTION"
            ]
          }
        }
      }
    },
    "CropsCollection": {
      "type": "object",
      "required": [
        "items",
        "crops"
      ],
      "properties": {
        "crops": {
          "$ref": "#/definitions/CropsItemsHash"
        },
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$"
          }
        }
      }
    },
    "CropEntry": {
      "type": "object",
      "required": [
        "entry",
        "crops"
      ],
      "properties": {
        "crops": {
          "$ref": "#/definitions/CropsItemsHash"
        },
        "entry": {
          "type": "number",
          "pattern": "^[0-9]+$"
        }
      }
    },
    "CropsItemsHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/CropItem"
        }
      }
    },
    "CropItem": {
      "type": "object",
      "required": [
        "contents"
      ],
      "properties": {
        "id": {
          "type": "number",
          "pattern": "^[0-9]+$"
        },
        "hits": {
          "type": "number"
        },
        "contents": {
          "$ref": "#/definitions/Crop"
        }
      }
    },
    "Crop": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "ModulesCollection": {
      "type": "object",
      "required": [
        "items",
        "modules"
      ],
      "properties": {
        "modules": {
          "$ref": "#/definitions/ModulesItemsHash"
        },
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$"
          }
        }
      }
    },
    "ModuleEntry": {
      "type": "object",
      "required": [
        "entry",
        "modules"
      ],
      "properties": {
        "modules": {
          "$ref": "#/definitions/ModulesItemsHash"
        },
        "organisations": {
          "$ref": "#/definitions/OrganisationsItemsHash"
        },
        "entry": {
          "type": "number",
          "pattern": "^[0-9]+$"
        }
      }
    },
    "ModulesItemsHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/ModuleItem"
        }
      }
    },
    "ModuleItem": {
      "type": "object",
      "required": [
        "contents"
      ],
      "properties": {
        "id": {
          "type": "number",
          "pattern": "^[0-9]+$"
        },
        "organisationId": {
          "type": "number",
          "pattern": "^[0-9]+$"
        },
        "contents": {
          "$ref": "#/definitions/Module"
        }
      }
    },
    "Module": {
      "type": "object",
      "required": [
        "name",
        "code",
        "type"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "data",
            "schedule",
            "ftp",
            "partner"
          ]
        }
      }
    },
    "OperationsCollection": {
      "type": "object",
      "required": [
        "items",
        "operations"
      ],
      "properties": {
        "operations": {
          "$ref": "#/definitions/OperationsItemsHash"
        },
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$"
          }
        }
      }
    },
    "OperationEntry": {
      "type": "object",
      "required": [
        "entry",
        "operations"
      ],
      "properties": {
        "operations": {
          "$ref": "#/definitions/OperationsItemsHash"
        },
        "entry": {
          "type": "number",
          "pattern": "^[0-9]+$"
        }
      }
    },
    "OperationsItemsHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/OperationItem"
        }
      }
    },
    "OperationItem": {
      "type": "object",
      "required": [
        "contents"
      ],
      "properties": {
        "id": {
          "type": "number",
          "pattern": "^[0-9]+$"
        },
        "contents": {
          "$ref": "#/definitions/Operation"
        }
      }
    },
    "Operation": {
      "type": "object",
      "required": [
        "name",
        "type",
        "devicesIds",
        "startDate",
        "details"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "irrigation",
            "spraying",
            "seeding"
          ]
        },
        "displaysIds": {
          "type": "array",
          "uniqueItems": true,
          "description": "Deprecated. Won't be used, here for backward compatibility.",
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$"
          }
        },
        "devicesIds": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$"
          }
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "details": {
          "type": "object",
          "additionalProperties": true
        }
      }
    },
    "AlertsCollection": {
      "type": "object",
      "required": [
        "items",
        "operations"
      ],
      "properties": {
        "operations": {
          "$ref": "#/definitions/AlertsItemsHash"
        },
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$"
          }
        }
      }
    },
    "AlertEntry": {
      "type": "object",
      "required": [
        "entry",
        "operations"
      ],
      "properties": {
        "operations": {
          "$ref": "#/definitions/AlertsItemsHash"
        },
        "entry": {
          "type": "number",
          "pattern": "^[0-9]+$"
        }
      }
    },
    "AlertsItemsHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/AlertItem"
        }
      }
    },
    "AlertItem": {
      "type": "object",
      "required": [
        "contents"
      ],
      "properties": {
        "id": {
          "type": "number",
          "pattern": "^[0-9]+$"
        },
        "userId": {
          "type": "number",
          "pattern": "^[0-9]+$"
        },
        "lastTriggerDate": {
          "type": "string",
          "format": "date-time"
        },
        "activationDate": {
          "type": "string",
          "format": "date-time"
        },
        "contents": {
          "$ref": "#/definitions/Alert"
        }
      }
    },
    "Alert": {
      "type": "object",
      "required": [
        "name",
        "active",
        "devicesIds"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "devicesIds": {
          "type": "array",
          "uniqueItems": true,
          "minItems": 1,
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$"
          }
        },
        "notification": {
          "type": "number"
        },
        "notificationList": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "email",
              "sms",
              "alarm"
            ]
          }
        },
        "alertParameters": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "object",
            "properties": {
              "active": {
                "type": "boolean"
              },
              "min": {
                "type": "number"
              },
              "max": {
                "type": "number"
              },
              "span": {
                "type": "number"
              },
              "from": {
                "type": "string",
                "format": "date-time"
              },
              "to": {
                "type": "string",
                "format": "date-time"
              },
              "base": {
                "type": "number"
              },
              "type": {
                "type": "string",
                "enum": [
                  "pluviometry",
                  "pluviometryAggregate",
                  "hygrometry",
                  "temperature",
                  "temperatureAggregate",
                  "temperatureDegreeDay",
                  "windMeanSpeed",
                  "windGustsSpeed",
                  "wetTemperature"
                ]
              },
              "invitedUsersEmails": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "clock": {
                "type": "object",
                "properties": {
                  "active": {
                    "type": "boolean"
                  },
                  "start": {
                    "type": "number"
                  },
                  "stop": {
                    "type": "number"
                  }
                }
              }
            }
          }
        }
      }
    },
    "AggregationsCollection": {
      "type": "object",
      "required": [
        "items",
        "aggregations"
      ],
      "properties": {
        "aggregations": {
          "$ref": "#/definitions/AggregationsItemsHash"
        },
        "aggregationsResults": {
          "$ref": "#/definitions/AggregationsResultsHash"
        },
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$"
          }
        }
      }
    },
    "AggregationEntry": {
      "type": "object",
      "required": [
        "entry",
        "aggregations"
      ],
      "properties": {
        "aggregations": {
          "$ref": "#/definitions/AggregationsItemsHash"
        },
        "entry": {
          "type": "number",
          "pattern": "^[0-9]+$"
        }
      }
    },
    "AggregationsItemsHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/AggregationItem"
        }
      }
    },
    "AggregationItem": {
      "type": "object",
      "required": [
        "contents"
      ],
      "properties": {
        "id": {
          "type": "number",
          "pattern": "^[0-9]+$"
        },
        "contents": {
          "$ref": "#/definitions/Aggregation"
        }
      }
    },
    "Aggregation": {
      "type": "object",
      "required": [
        "type",
        "name",
        "devicesIds"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "RAIN_TIC",
            "TEMP_AIR",
            "DEGREE_DAY",
            "TEMP_COLD_HOURS"
          ]
        },
        "name": {
          "type": "string"
        },
        "from": {
          "type": "string",
          "format": "date-time"
        },
        "to": {
          "type": "string",
          "format": "date-time"
        },
        "span": {
          "type": "integer",
          "minimum": 1
        },
        "base": {
          "type": "number"
        },
        "devicesIds": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$"
          }
        }
      }
    },
    "AggregationsResultsHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/AggregationResult"
        }
      }
    },
    "AggregationResult": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "RAIN_TIC",
            "TEMP_AIR_H1",
            "TEMP_COLD_HOURS"
          ]
        },
        "RAIN_TIC": {
          "type": "object",
          "properties": {
            "value": {
              "type": "number"
            }
          }
        },
        "TEMP_AIR": {
          "type": "object",
          "properties": {
            "value": {
              "type": "number"
            }
          }
        },
        "TEMP_COLD_HOURS": {
          "type": "object",
          "properties": {
            "value": {
              "type": "number"
            }
          }
        }
      }
    },
    "Emails": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "html": {
            "type": "string"
          },
          "from": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string"
            }
          },
          "to": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "Session": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "token",
        "expirationDate",
        "userId",
        "organisationId"
      ],
      "properties": {
        "token": {
          "type": "string"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time"
        },
        "userId": {
          "type": "number"
        },
        "organisationId": {
          "type": "number"
        }
      }
    },
    "ApplicationsCollection": {
      "type": "object",
      "required": [
        "items",
        "applications"
      ],
      "properties": {
        "applications": {
          "$ref": "#/definitions/ApplicationsItemsHash"
        },
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "pattern": "^[0-9]{8}\\-[0-9]{4}\\-[0-9]{4}\\-[0-9]{4}\\-[0-9]{12}$"
          }
        }
      }
    },
    "ApplicationEntry": {
      "type": "object",
      "required": [
        "entry",
        "applications"
      ],
      "properties": {
        "applications": {
          "$ref": "#/definitions/ApplicationsItemsHash"
        },
        "entry": {
          "type": "string",
          "pattern": "^[0-9]{8}\\-[0-9]{4}\\-[0-9]{4}\\-[0-9]{4}\\-[0-9]{12}$"
        }
      }
    },
    "ApplicationsItemsHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/ApplicationItem"
        }
      }
    },
    "ApplicationItem": {
      "type": "object",
      "required": [
        "contents"
      ],
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^[0-9]{8}\\-[0-9]{4}\\-[0-9]{4}\\-[0-9]{4}\\-[0-9]{12}$"
        },
        "userId": {
          "type": "number",
          "pattern": "^[0-9]+$"
        },
        "organisationId": {
          "type": "number",
          "pattern": "^[0-9]+$"
        },
        "truncatedSecret": {
          "type": "string",
          "description": "The API secret of the application truncated."
        },
        "secret": {
          "type": "string",
          "description": "The API secret of the application (provided only at its creation)."
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time"
        },
        "contents": {
          "$ref": "#/definitions/Application"
        }
      }
    },
    "Application": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "name",
        "description",
        "isActive"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        }
      }
    }
  }
}