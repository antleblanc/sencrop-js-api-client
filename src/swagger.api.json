{
  "swagger": "2.0",
  "info": {
    "title": "Sencrop API",
    "description": "API to consume Sencrop data",
    "version": "1.29.7"
  },
  "paths": {
    "/oauth2/authorize": {
      "get": {
        "operationId": "getOAuth2Authorize",
        "summary": "Implements the [Authorization Endpoint](https://tools.ietf.org/html/rfc6749#section-3.1)\n as defined per the OAuth2 RFC.",
        "tags": [
          "oauth2"
        ],
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "in": "query",
            "name": "response_type",
            "type": "string",
            "enum": [
              "code",
              "token"
            ],
            "required": true
          },
          {
            "in": "query",
            "name": "client_id",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "redirect_uri",
            "type": "string",
            "format": "uri",
            "required": false
          },
          {
            "in": "query",
            "name": "scope",
            "description": "See https://tools.ietf.org/html/rfc6749#section-3.3",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "state",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "302": {
            "description": "Redirects the user to the authorization interface."
          }
        }
      }
    },
    "/oauth2/token": {
      "post": {
        "operationId": "postOAuth2Token",
        "summary": "Implements the [Token Endpoint](https://tools.ietf.org/html/rfc6749#section-3.2)\n as defined per the OAuth2 RFC.",
        "tags": [
          "oauth2"
        ],
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "require": true,
            "schema": {
              "oneOf": [
                {
                  "type": "object",
                  "description": "Authorization code grant, see https://tools.ietf.org/html/rfc6749#section-4.1",
                  "required": [
                    "grant_type"
                  ],
                  "properties": {
                    "grant_type": {
                      "type": "string",
                      "enum": [
                        "authorization_code"
                      ]
                    },
                    "code": {
                      "type": "string"
                    },
                    "client_id": {
                      "type": "string"
                    },
                    "redirect_uri": {
                      "type": "string",
                      "format": "url"
                    }
                  }
                },
                {
                  "type": "object",
                  "description": "Resource owner password credentials grant, see https://tools.ietf.org/html/rfc6749#section-4.3",
                  "required": [
                    "grant_type",
                    "username",
                    "password"
                  ],
                  "properties": {
                    "grant_type": {
                      "type": "string",
                      "enum": [
                        "password"
                      ]
                    },
                    "username": {
                      "type": "string"
                    },
                    "password": {
                      "type": "string"
                    },
                    "scope": {
                      "type": "string",
                      "description": "See https://tools.ietf.org/html/rfc6749#section-3.3"
                    }
                  }
                },
                {
                  "type": "object",
                  "description": "Client credentials grant, see https://tools.ietf.org/html/rfc6749#section-4.4",
                  "required": [
                    "grant_type"
                  ],
                  "properties": {
                    "grant_type": {
                      "type": "string",
                      "enum": [
                        "client_credentials"
                      ]
                    },
                    "scope": {
                      "type": "string",
                      "description": "See https://tools.ietf.org/html/rfc6749#section-3.3"
                    }
                  }
                },
                {
                  "type": "object",
                  "description": "Token refresh grant type, see https://tools.ietf.org/html/rfc6749#section-6 .",
                  "required": [
                    "grant_type",
                    "refresh_token"
                  ],
                  "properties": {
                    "grant_type": {
                      "type": "string",
                      "enum": [
                        "refresh_token"
                      ]
                    },
                    "refresh_token": {
                      "type": "string"
                    },
                    "scope": {
                      "type": "string",
                      "description": "See https://tools.ietf.org/html/rfc6749#section-3.3"
                    }
                  }
                },
                {
                  "type": "object",
                  "description": "Module grant type, see https://tools.ietf.org/html/rfc6749#section-6 .",
                  "required": [
                    "grant_type",
                    "email"
                  ],
                  "properties": {
                    "grant_type": {
                      "type": "string",
                      "enum": [
                        "module"
                      ]
                    },
                    "email": {
                      "type": "string",
                      "format": "email"
                    },
                    "scope": {
                      "type": "string",
                      "description": "See https://tools.ietf.org/html/rfc6749#section-3.3"
                    }
                  }
                },
                {
                  "type": "object",
                  "description": "SMS Code request grant type, see https://tools.ietf.org/html/rfc6749#section-6 .",
                  "required": [
                    "grant_type",
                    "email",
                    "code"
                  ],
                  "properties": {
                    "grant_type": {
                      "type": "string",
                      "enum": [
                        "code_request"
                      ]
                    },
                    "email": {
                      "type": "string",
                      "format": "email"
                    },
                    "code": {
                      "type": "string"
                    },
                    "scope": {
                      "type": "string",
                      "description": "See https://tools.ietf.org/html/rfc6749#section-3.3"
                    }
                  }
                }
              ]
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Basic mechanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Token successfully issued, see https://tools.ietf.org/html/rfc6749#section-5 .",
            "schema": {
              "type": "object",
              "required": [
                "access_token",
                "token_type"
              ],
              "properties": {
                "access_token": {
                  "type": "string"
                },
                "token_type": {
                  "description": "See https://tools.ietf.org/html/rfc6749#section-7.1",
                  "type": "string",
                  "enum": [
                    "bearer",
                    "mac"
                  ]
                },
                "expires_in": {
                  "description": "The lifetime in seconds of the access token",
                  "type": "number"
                },
                "refresh_token": {
                  "description": "See https://tools.ietf.org/html/rfc6749#section-6",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Access token error response, see https://tools.ietf.org/html/rfc6749#section-5.2",
            "schema": {
              "type": "object",
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "type": "string",
                  "enum": [
                    "invalid_request",
                    "invalid_client",
                    "invalid_grant",
                    "unauthorized_client",
                    "unsupported_grant_type",
                    "invalid_scope"
                  ]
                },
                "error_description": {
                  "type": "string"
                },
                "error_uri": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": [
              "ROLE_PARTNER"
            ]
          }
        ]
      }
    },
    "/ping": {
      "get": {
        "operationId": "getPing",
        "summary": "Checks API's availability.",
        "tags": [
          "system"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Pong",
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "pong"
              ],
              "properties": {
                "pong": {
                  "type": "string",
                  "enum": [
                    "pong"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/crops": {
      "get": {
        "operationId": "getCrops",
        "summary": "Get the crops",
        "tags": [
          "miscellaneous"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of the crops",
            "schema": {
              "$ref": "#/definitions/CropsItems"
            }
          }
        }
      }
    },
    "/modules": {
      "get": {
        "operationId": "getModules",
        "summary": "Get the modules",
        "tags": [
          "modules",
          "partners"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of the modules",
            "schema": {
              "$ref": "#/definitions/ModuleItems"
            }
          }
        }
      }
    },
    "/utils/checkSignup": {
      "post": {
        "operationId": "postSignupCheck",
        "summary": "Hit the server to check the email can be used to signup.",
        "tags": [
          "miscellaneous"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string"
          },
          {
            "in": "body",
            "description": "The email to check",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email can be used."
          }
        }
      }
    },
    "/hubspot/properties": {
      "get": {
        "operationId": "getHubspotProperties",
        "summary": "Retrieve all tradeshow from hubspot",
        "tags": [
          "checkout",
          "hubspot"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "type": "string",
            "enum": [
              "companies",
              "contacts",
              "deals"
            ]
          },
          {
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Hubspot tradeshow"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_TEAM"
            ]
          }
        ]
      }
    },
    "/password/lost": {
      "post": {
        "operationId": "postLostPassword",
        "summary": "Request a password change e-mail.",
        "tags": [
          "miscellaneous"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "description": "The infos to send the mail",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email"
                },
                "callbackPath": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password change email sent"
          }
        }
      }
    },
    "/password": {
      "put": {
        "operationId": "putPassword",
        "summary": "Change a user password",
        "tags": [
          "miscellaneous"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "in": "body",
            "description": "The infos to change the password",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "lostToken",
                "newPassword"
              ],
              "additionalProperties": false,
              "properties": {
                "lostToken": {
                  "type": "string"
                },
                "newPassword": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Password changed"
          }
        }
      }
    },
    "/users/sign_in": {
      "post": {
        "operationId": "postLogin",
        "summary": "Log a user in",
        "tags": [
          "miscellaneous"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "description": "The infos to log in",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "email",
                "password"
              ],
              "properties": {
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User logged in",
            "schema": {
              "$ref": "#/definitions/Session"
            }
          }
        }
      }
    },
    "/users/verify": {
      "post": {
        "operationId": "postVerify",
        "summary": "Verify a user",
        "tags": [
          "miscellaneous"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "description": "Verify the user",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "email",
                "verify"
              ],
              "properties": {
                "email": {
                  "type": "string"
                },
                "verify": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User verified",
            "schema": {
              "$ref": "#/definitions/Session"
            }
          }
        }
      }
    },
    "/partners/{partnerId}/tokenRequests": {
      "post": {
        "operationId": "postPartnerTokenRequest",
        "summary": "Request a user token",
        "tags": [
          "partners",
          "partnerAccess"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The partner organisation id",
            "name": "partnerId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "body",
            "description": "Request a user token",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email"
                }
              }
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Basic mechanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User token requested"
          }
        },
        "security": [
          {
            "basicAuth": [
              "ROLE_PARTNER"
            ]
          }
        ]
      }
    },
    "/partners/{partnerId}/tokens": {
      "post": {
        "operationId": "postPartnerToken",
        "summary": "Create a user token (deprecated, use OAuth2)",
        "tags": [
          "partners",
          "deprecated"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The partner organisation id",
            "name": "partnerId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "body",
            "description": "Create a user token",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "email",
                "code"
              ],
              "properties": {
                "email": {
                  "type": "string"
                },
                "code": {
                  "type": "string"
                }
              }
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Basic mechanism",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User token created",
            "schema": {
              "$ref": "#/definitions/Session"
            }
          }
        },
        "security": [
          {
            "basicAuth": [
              "ROLE_PARTNER"
            ]
          }
        ]
      }
    },
    "/partners/{partnerId}/devices": {
      "get": {
        "operationId": "getPartnerDevices",
        "summary": "Retrieves the devices a partner has access to.",
        "tags": [
          "partners",
          "partnerAccess"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The partner organisation id",
            "name": "partnerId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "name": "limit",
            "in": "query",
            "type": "number",
            "description": "The number of items to retrieve",
            "pattern": "^[0-9]+$",
            "enum": [
              10,
              50,
              100
            ],
            "required": true
          },
          {
            "name": "start",
            "in": "query",
            "type": "number",
            "description": "The index in results",
            "pattern": "^[0-9]+$",
            "min": 0,
            "multipleOf": 10,
            "required": true
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The devices collection",
            "schema": {
              "$ref": "#/definitions/PartnerDevicesItems"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_PARTNER"
            ]
          }
        ]
      }
    },
    "/partners/{partnerId}/users/{partnerUserId}/devices/{deviceId}/modules/{moduleId}/parameters": {
      "put": {
        "operationId": "putPartnerModuleParameters",
        "summary": "Update an partner module parameters",
        "tags": [
          "partners"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The partner organisation id",
            "name": "partnerId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "required": true,
            "description": "The partner user id",
            "name": "partnerUserId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          {
            "in": "path",
            "description": "The device id",
            "name": "deviceId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The module id",
            "name": "moduleId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "body",
            "description": "The module parameters",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "enabled": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Module sucessfully updated on the user device"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_PARTNER"
            ]
          }
        ]
      }
    },
    "/users": {
      "post": {
        "operationId": "postUser",
        "tags": [
          "users"
        ],
        "summary": "Create a new user.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "description": "The new user",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewUser"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The user were successfully created",
            "schema": {
              "$ref": "#/definitions/UserItem"
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "operationId": "getUser",
        "summary": "Get a user's profile.",
        "tags": [
          "users"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user",
            "schema": {
              "$ref": "#/definitions/UserItem"
            }
          },
          "404": {
            "description": "User does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "put": {
        "operationId": "putUser",
        "summary": "Update a user's profile.",
        "tags": [
          "users"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "body",
            "description": "The new user",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "The user were created/updated",
            "schema": {
              "$ref": "#/definitions/UserItem"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/users/{userId}/guests": {
      "get": {
        "operationId": "getUserGuests",
        "summary": "Get a user's guests.",
        "tags": [
          "users",
          "partnerAccess"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user's guests",
            "schema": {
              "$ref": "#/definitions/GuestsCollection"
            }
          },
          "404": {
            "description": "User does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "post": {
        "operationId": "postUserGuest",
        "summary": "Create a user's guest.",
        "tags": [
          "users",
          "deprecated"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "query",
            "description": "The organisation id to add the collaborator to",
            "name": "organisationIdTarget",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          {
            "in": "body",
            "description": "The user's guest",
            "name": "body",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/definitions/GuestItem"
                },
                {
                  "$ref": "#/definitions/GuestInvite"
                }
              ]
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created user's guest",
            "schema": {
              "$ref": "#/definitions/GuestItem"
            }
          },
          "404": {
            "description": "User does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/users/{userId}/guests/{guestId}": {
      "put": {
        "operationId": "putUserGuest",
        "summary": "Update a user's guest.",
        "tags": [
          "users",
          "deprecated"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "required": true,
            "description": "The guest id",
            "name": "guestId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          {
            "in": "body",
            "description": "The user's guest",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GuestItem"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "The user's guest updated",
            "schema": {
              "$ref": "#/definitions/GuestEntry"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "delete": {
        "operationId": "deleteUserGuest",
        "summary": "Delete a user's guest.",
        "tags": [
          "users",
          "deprecated"
        ],
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "query",
            "description": "The organisation id to remove the collaborator to",
            "name": "organisationIdTarget",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          {
            "in": "path",
            "required": true,
            "description": "The guest id",
            "name": "guestId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The user's guest were successfully deleted."
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/users/{userId}/collaborators": {
      "get": {
        "operationId": "getUserCollaborators",
        "summary": "Get a user's collaborators.",
        "tags": [
          "users",
          "deprecated",
          "partnerAccess"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user's collaborators",
            "schema": {
              "$ref": "#/definitions/CollaboratorsCollection"
            }
          },
          "404": {
            "description": "User does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "post": {
        "operationId": "postUserCollaborator",
        "summary": "Create a user's collaborator.",
        "tags": [
          "users",
          "deprecated"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "query",
            "description": "The organisation id to add the collaborator to",
            "name": "organisationIdTarget",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          {
            "in": "body",
            "description": "The user's collaborator",
            "name": "body",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/definitions/CollaboratorItem"
                },
                {
                  "$ref": "#/definitions/CollaboratorInvite"
                }
              ]
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created user's collaborator",
            "schema": {
              "$ref": "#/definitions/CollaboratorEntry"
            }
          },
          "404": {
            "description": "User does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/users/{userId}/collaborators/{collaboratorId}": {
      "put": {
        "operationId": "putUserCollaborator",
        "summary": "Update a user's collaborator.",
        "tags": [
          "users",
          "deprecated"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "required": true,
            "description": "The collaborator id",
            "pattern": "^[0-9]+$",
            "name": "collaboratorId",
            "type": "string"
          },
          {
            "in": "body",
            "description": "The user's collaborator",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CollaboratorItem"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "The user's collaborator updated",
            "schema": {
              "$ref": "#/definitions/CollaboratorEntry"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "delete": {
        "operationId": "deleteUserCollaborator",
        "tags": [
          "users",
          "deprecated"
        ],
        "summary": "Delete a user's collaborator.",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "query",
            "description": "The organisation id to remove the collaborator to",
            "name": "organisationIdTarget",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          {
            "in": "path",
            "required": true,
            "description": "The collaborator id",
            "name": "collaboratorId",
            "pattern": "^[0-9]+$",
            "type": "number"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The user's collaborator were successfully deleted."
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/users/{userId}/aggregations": {
      "get": {
        "operationId": "getUserAggregations",
        "summary": "Get a user's aggregations.",
        "tags": [
          "aggregations"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "query",
            "description": "Wether the aggregations should be computed",
            "name": "compute",
            "pattern": "^true|false$",
            "default": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "Wether you want to get only original data or eventually patched ones to avoid holes.",
            "name": "patched",
            "type": "boolean"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user's aggregations",
            "schema": {
              "$ref": "#/definitions/AggregationItems"
            }
          },
          "404": {
            "description": "User does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "post": {
        "operationId": "postUserAggregation",
        "summary": "Create a user's aggregation.",
        "tags": [
          "aggregations"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "body",
            "description": "The user's aggregation",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Aggregation"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created user's aggregation",
            "schema": {
              "$ref": "#/definitions/AggregationItem"
            }
          },
          "404": {
            "description": "User does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/users/{userId}/aggregations/{aggregationId}": {
      "get": {
        "operationId": "getUserAggregation",
        "summary": "Get a single user aggregation with statistics for graphs",
        "tags": [
          "aggregations"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The aggregation id",
            "name": "aggregationId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "query",
            "description": "Wether you want to get only original data or eventually patched ones to avoid holes.",
            "name": "patched",
            "type": "boolean"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "The user's aggregation updated",
            "schema": {
              "$ref": "#/definitions/AggregationItem"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "put": {
        "operationId": "putUserAggregation",
        "summary": "Update a user's aggregation.",
        "tags": [
          "aggregations"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The aggregation id",
            "name": "aggregationId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "body",
            "description": "The user's aggregation",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Aggregation"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "The user's aggregation updated",
            "schema": {
              "$ref": "#/definitions/AggregationItem"
            }
          },
          "400": {
            "description": "Bad aggregation contents",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "delete": {
        "operationId": "deleteUserAggregation",
        "summary": "Delete a user's aggregation.",
        "tags": [
          "aggregations"
        ],
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The aggregation id",
            "name": "aggregationId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The user's aggregation were successfully deleted."
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/users/{userId}/devices": {
      "get": {
        "operationId": "getUserDevices",
        "summary": "Get a user's devices.",
        "tags": [
          "devices",
          "partnerAccess"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "query",
            "description": "If must include device replacements or not",
            "name": "includeHistory",
            "type": "boolean",
            "required": false
          },
          {
            "in": "query",
            "description": "The status date",
            "name": "date",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "description": "The measures to read",
            "name": "measures",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "RELATIVE_HUMIDITY",
                "TEMPERATURE",
                "WET_TEMPERATURE",
                "RAIN_FALL",
                "WIND_SPEED",
                "WIND_GUST",
                "WIND_DIRECTION",
                "MOVE",
                "LEAF_SENSOR_CONDUCTIVITY",
                "RH_AIR_H1",
                "TEMP_AIR_H1",
                "RAIN_TIC",
                "WIND_MEAN",
                "WIND_MAX"
              ]
            }
          },
          {
            "in": "query",
            "description": "Wether you want to get only original data or eventually patched ones to avoid holes.",
            "name": "patched",
            "type": "boolean"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "number",
            "description": "The number of items to retrieve",
            "pattern": "^[0-9]+$",
            "enum": [
              10,
              50,
              100
            ],
            "required": false
          },
          {
            "name": "start",
            "in": "query",
            "type": "number",
            "description": "The index in results",
            "pattern": "^[0-9]+$",
            "min": 0,
            "multipleOf": 10,
            "required": false
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user's devices",
            "schema": {
              "$ref": "#/definitions/DevicesItems"
            }
          },
          "404": {
            "description": "User does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "post": {
        "operationId": "postUserDevice",
        "summary": "Setup a user's device.",
        "tags": [
          "devices"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "body",
            "description": "The user device activation couple",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "identification": {
                  "type": "string",
                  "pattern": "^(WCP?|RC|SC|UMO|LC)[0-9]{6}$"
                },
                "activationCode": {
                  "type": "string",
                  "pattern": "^[A-Z0-9]{4,}$"
                }
              }
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "The user's device created",
            "schema": {
              "$ref": "#/definitions/DeviceItem"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/users/{userId}/devices/liveAggregations": {
      "get": {
        "operationId": "getUserDevicesLiveAggregations",
        "summary": "Allow to run live aggregation queries against a user devices.",
        "tags": [
          "data"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "query",
            "description": "List of id's of devices",
            "name": "devicesIds",
            "required": true,
            "type": "array",
            "items": {
              "type": "number",
              "pattern": "^[0-9]+$",
              "minimum": 1
            },
            "minItems": 1,
            "uniqueItems": true
          },
          {
            "in": "query",
            "required": true,
            "description": "The aggregations names",
            "name": "aggregations",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "RELATIVE_HUMIDITY_MEAN",
                "RELATIVE_HUMIDITY_MIN",
                "RELATIVE_HUMIDITY_MAX",
                "TEMPERATURE_MEAN",
                "TEMPERATURE_MIN",
                "TEMPERATURE_MAX",
                "WET_TEMPERATURE_MEAN",
                "WET_TEMPERATURE_MIN",
                "WET_TEMPERATURE_MAX",
                "RAIN_FALL_MEAN_SUM",
                "RAIN_FALL_SUM",
                "RAIN_FALL_MIN",
                "RAIN_FALL_MAX",
                "MOVE_SUM",
                "INIT_SUM",
                "WIND_SPEED_MEAN",
                "WIND_SPEED_MIN",
                "WIND_SPEED_MAX",
                "WIND_GUST_MEAN",
                "WIND_GUST_MIN",
                "WIND_GUST_MAX",
                "WIND_DIRECTION_MEAN",
                "DEGREE_DAY",
                "COLD_HOURS",
                "LEAF_SENSOR_CONDUCTIVITY_MIN",
                "LEAF_SENSOR_CONDUCTIVITY_MAX",
                "LEAF_SENSOR_CONDUCTIVITY_MEAN",
                "LEAF_WETNESS",
                "LEAF_WETNESS_MEDIUM",
                "LEAF_WETNESS_HIGH"
              ]
            }
          },
          {
            "in": "query",
            "required": false,
            "description": "The params to set",
            "name": "parameters",
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "((^| )fiability,withCalibration,base,ceil:[^ ]+){,4}$",
              "example": "base:7"
            }
          },
          {
            "in": "query",
            "required": true,
            "description": "The intervals to retrieve",
            "name": "intervals",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "current",
                "one_hour",
                "three_hours",
                "one_day",
                "one_week",
                "today",
                "yesterday",
                "this_week",
                "last_seven_days"
              ]
            }
          },
          {
            "in": "query",
            "required": false,
            "description": "The timezone of the data",
            "name": "timeZone",
            "type": "string",
            "pattern": "^[a-zA-Z]+/[a-zA-Z]+$",
            "maxLength": 50
          },
          {
            "in": "query",
            "description": "The status date",
            "name": "date",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "description": "Wether you want to get only original data or eventually patched ones to avoid holes.",
            "name": "patched",
            "type": "boolean"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's data",
            "schema": {
              "$ref": "#/definitions/DeviceLiveAggregationItems"
            },
            "example": {
              "items": [
                209,
                2219,
                5149
              ],
              "deviceLiveAggregations": {
                "209": {
                  "RELATIVE_HUMIDITY_MEAN": {},
                  "WIND_SPEED_MEAN": {}
                },
                "2219": {
                  "RELATIVE_HUMIDITY_MEAN": {},
                  "WIND_SPEED_MEAN": {
                    "last_hour": 4.333333333333333,
                    "this_week": 10.102888086642599
                  }
                },
                "5149": {
                  "RELATIVE_HUMIDITY_MEAN": {
                    "last_hour": 76.55000000000001,
                    "this_week": 85.51822916666667
                  },
                  "WIND_SPEED_MEAN": {}
                }
              }
            }
          },
          "400": {
            "description": "One or more devices are not owned by the user.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/users/{userId}/devices/{deviceId}/calibration/{calibrationName}": {
      "put": {
        "operationId": "putUserDeviceCalibration",
        "summary": "Update a user's device calibration.",
        "tags": [
          "devices"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The device id",
            "name": "deviceId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "required": true,
            "description": "Calibration to set",
            "name": "calibrationName",
            "type": "string",
            "enum": [
              "RAIN_FALL"
            ]
          },
          {
            "in": "query",
            "required": true,
            "description": "Ratio to set",
            "name": "ratio",
            "type": "number",
            "minimum": 0
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "The user's device calibration has been updated"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/users/{userId}/devices/{deviceId}/positions": {
      "get": {
        "operationId": "getUserDevicePositions",
        "summary": "Get a user's device geographic positions historic.",
        "tags": [
          "devices"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The device id",
            "name": "deviceId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "query",
            "description": "If must include device replacements or not",
            "name": "includeHistory",
            "type": "boolean",
            "required": false
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user's device positions history",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "locationDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "latitude": {
                    "minimum": -90,
                    "maximum": 90,
                    "type": "number"
                  },
                  "longitude": {
                    "minimum": -180,
                    "maximum": 180,
                    "type": "number"
                  },
                  "altitude": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/users/{userId}/devices/{deviceId}": {
      "get": {
        "operationId": "getUserDevice",
        "summary": "Get a user's device.",
        "tags": [
          "devices"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The device id",
            "name": "deviceId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "query",
            "description": "If must include device replacements or not",
            "name": "includeHistory",
            "type": "boolean",
            "required": false
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user's device",
            "schema": {
              "$ref": "#/definitions/DeviceItem"
            }
          },
          "404": {
            "description": "User does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "put": {
        "operationId": "putUserDevice",
        "summary": "Update a user's device.",
        "tags": [
          "devices"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The device id",
            "name": "deviceId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "body",
            "description": "The user device",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Device"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "The user's device updated",
            "schema": {
              "$ref": "#/definitions/DeviceItem"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "delete": {
        "operationId": "deleteUserDevice",
        "summary": "Delete a user's device access.",
        "tags": [
          "devices"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The device id",
            "name": "deviceId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The user's device access was successfully deleted."
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/users/{userId}/devices/{deviceId}/modules": {
      "get": {
        "operationId": "getUserDeviceModules",
        "summary": "Get the modules a user activated on its device",
        "tags": [
          "devices",
          "modules"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The device id",
            "name": "deviceId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of the modules activated on the given user device",
            "schema": {
              "$ref": "#/definitions/ModuleItems"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/users/{userId}/devices/{deviceId}/modules/{moduleId}": {
      "put": {
        "operationId": "putUserDeviceModule",
        "summary": "Add a module to a user's device",
        "tags": [
          "devices",
          "modules"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The device id",
            "name": "deviceId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The module id",
            "name": "moduleId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "body",
            "description": "The module settings",
            "name": "body",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "description": "Arvalis Mileos parameters",
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "code",
                    "id"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "mileos"
                      ]
                    },
                    "id": {
                      "type": "number"
                    }
                  }
                },
                {
                  "description": "Syngenta Avisio parameters",
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "code",
                    "siret",
                    "organisationName"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "avisio"
                      ]
                    },
                    "siret": {
                      "type": "string"
                    },
                    "organisationName": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Bayer Movida parameters",
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "code",
                    "id",
                    "administrator",
                    "organisationName"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "movida"
                      ]
                    },
                    "administrator": {
                      "type": "string"
                    },
                    "organisationName": {
                      "type": "string"
                    },
                    "id": {
                      "type": "number"
                    }
                  }
                },
                {
                  "description": "BASF Atlas parameters",
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "code",
                    "siret"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "atlas"
                      ]
                    },
                    "siret": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "ScanBean parameters",
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "code",
                    "siret",
                    "organisationName"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "scanbean"
                      ]
                    },
                    "siret": {
                      "type": "string"
                    },
                    "organisationName": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Vintel parameters",
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "vintel"
                      ]
                    }
                  }
                },
                {
                  "description": "Generic Module parameters",
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "code",
                    "externalIdentifier"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "pattern": "^[a-z0-9_]+$"
                    },
                    "externalIdentifier": {
                      "type": "string"
                    },
                    "organisationName": {
                      "type": "string"
                    },
                    "userEmail": {
                      "type": "string",
                      "format": "email"
                    }
                  }
                }
              ]
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Module sucessfully activated on the user device"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "delete": {
        "operationId": "deleteUserDeviceModule",
        "summary": "Disable a module for a user's device",
        "tags": [
          "devices",
          "modules"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The device id",
            "name": "deviceId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The module id",
            "name": "moduleId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Module sucessfully disabled for the user device"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/users/{userId}/devices/{deviceId}/shares/{sharesType}": {
      "put": {
        "operationId": "putUserDeviceShares",
        "summary": "Update a user's device shares.",
        "tags": [
          "devices",
          "deprecated"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The device id",
            "name": "deviceId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "required": true,
            "description": "The shares type",
            "name": "sharesType",
            "pattern": "^(guests|collaborators)$",
            "type": "string"
          },
          {
            "in": "body",
            "description": "The users concerned by the user's device share",
            "name": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "User's device shares updated",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/users/{userId}/devices/{deviceId}/statistics": {
      "get": {
        "operationId": "getUserDeviceStatistics",
        "summary": "Get a user's device's device's statistics.",
        "tags": [
          "devices",
          "data"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The device id",
            "name": "deviceId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "query",
            "required": true,
            "description": "The statistics start date",
            "name": "startDate",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "required": true,
            "description": "The statistics end date",
            "name": "endDate",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "required": true,
            "description": "The measures to read",
            "name": "measures",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "RELATIVE_HUMIDITY",
                "RELATIVE_HUMIDITY_MIN",
                "RELATIVE_HUMIDITY_MAX",
                "TEMPERATURE",
                "TEMPERATURE_MIN",
                "TEMPERATURE_MAX",
                "WET_TEMPERATURE",
                "WET_TEMPERATURE_MIN",
                "WET_TEMPERATURE_MAX",
                "LEAF_SENSOR_CONDUCTIVITY",
                "LEAF_SENSOR_CONDUCTIVITY_MIN",
                "LEAF_SENSOR_CONDUCTIVITY_MAX",
                "RAIN_FALL",
                "WIND_SPEED",
                "WIND_GUST",
                "WIND_DIRECTION",
                "MOVE",
                "LEAF_WETNESS",
                "LEAF_WETNESS_MEDIUM",
                "LEAF_WETNESS_HIGH",
                "RH_AIR_H1",
                "RH_AIR_H1_MIN",
                "RH_AIR_H1_MAX",
                "TEMP_AIR_H1",
                "TEMP_AIR_H1_MIN",
                "TEMP_AIR_H1_MAX",
                "RAIN_TIC",
                "WIND_MEAN",
                "WIND_MAX"
              ]
            }
          },
          {
            "in": "query",
            "description": "Wether you want to get only original data or eventually patched ones to avoid holes.",
            "name": "patched",
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "If must include device replacements or not",
            "name": "includeHistory",
            "type": "boolean",
            "required": false
          },
          {
            "in": "query",
            "required": false,
            "description": "The timezone of the data",
            "name": "timeZone",
            "type": "string",
            "pattern": "^[a-zA-Z]+/[a-zA-Z]+$",
            "maxLength": 50
          },
          {
            "in": "query",
            "description": "The interval of data (Accepted value : 31 days for 1h interval, 1 year for 1d interval, 5y for 1w interval)",
            "name": "interval",
            "type": "string",
            "enum": [
              "1h",
              "1d",
              "1w",
              "1M"
            ]
          },
          {
            "in": "query",
            "description": "Wether the calibration of rain falls must be taken in count",
            "name": "withCalibration",
            "type": "boolean",
            "required": false
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's statistics",
            "schema": {
              "$ref": "#/definitions/DeviceStatistics"
            }
          },
          "404": {
            "description": "User/device does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/users/{userId}/devices/{deviceId}/data/raw": {
      "get": {
        "operationId": "getUserDeviceRawData",
        "summary": "Get a user's device's raw data.",
        "tags": [
          "devices",
          "data",
          "partnerAccess"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The device id",
            "name": "deviceId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "query",
            "required": true,
            "description": "The date before which the data starts being retrieved",
            "name": "beforeDate",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "description": "If must include device replacements or not",
            "name": "includeHistory",
            "type": "boolean",
            "required": false
          },
          {
            "in": "query",
            "required": true,
            "description": "The number of measures to retrieve",
            "name": "size",
            "type": "number",
            "enum": [
              10,
              50,
              100,
              500,
              1000
            ]
          },
          {
            "in": "query",
            "required": true,
            "description": "The measures to read",
            "name": "measures",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "RELATIVE_HUMIDITY",
                "TEMPERATURE",
                "WET_TEMPERATURE",
                "RAIN_FALL",
                "WIND_SPEED",
                "WIND_GUST",
                "WIND_DIRECTION",
                "MOVE",
                "LEAF_SENSOR_CONDUCTIVITY",
                "RH_AIR_H1",
                "TEMP_AIR_H1",
                "RAIN_TIC",
                "WIND_MEAN",
                "WIND_MAX",
                "MOVE",
                "LAT",
                "LNG",
                "ALT"
              ]
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's data",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "RELATIVE_HUMIDITY",
                      "TEMPERATURE",
                      "WET_TEMPERATURE",
                      "RAIN_FALL",
                      "WIND_SPEED",
                      "WIND_GUST",
                      "WIND_DIRECTION",
                      "MOVE",
                      "LEAF_SENSOR_CONDUCTIVITY",
                      "RH_AIR_H1",
                      "TEMP_AIR_H1",
                      "RAIN_TIC",
                      "WIND_MEAN",
                      "WIND_MAX"
                    ]
                  },
                  "value": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User/device does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/users/{userId}/devices/{deviceId}/data/hourly": {
      "get": {
        "operationId": "getUserDeviceHourlyData",
        "summary": "Get a user's device's hourly data.",
        "tags": [
          "devices",
          "data",
          "partnerAccess"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The device id",
            "name": "deviceId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "query",
            "required": true,
            "description": "The date before which the data starts being retrieved",
            "name": "beforeDate",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "description": "If must include device replacements or not",
            "name": "includeHistory",
            "type": "boolean",
            "required": false
          },
          {
            "in": "query",
            "required": false,
            "description": "The timezone of the data",
            "name": "timeZone",
            "type": "string",
            "pattern": "^[a-zA-Z]+/[a-zA-Z]+$",
            "maxLength": 50
          },
          {
            "in": "query",
            "required": true,
            "description": "The number of days to retrieve",
            "name": "days",
            "type": "number",
            "enum": [
              1,
              2,
              7,
              20,
              31
            ]
          },
          {
            "in": "query",
            "required": true,
            "description": "The measures to read",
            "name": "measures",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "RELATIVE_HUMIDITY",
                "RELATIVE_HUMIDITY_MIN",
                "RELATIVE_HUMIDITY_MAX",
                "TEMPERATURE",
                "TEMPERATURE_MIN",
                "TEMPERATURE_MAX",
                "WET_TEMPERATURE",
                "WET_TEMPERATURE_MIN",
                "WET_TEMPERATURE_MAX",
                "LEAF_SENSOR_CONDUCTIVITY",
                "LEAF_SENSOR_CONDUCTIVITY_MIN",
                "LEAF_SENSOR_CONDUCTIVITY_MAX",
                "RAIN_FALL",
                "WIND_SPEED",
                "WIND_GUST",
                "WIND_DIRECTION",
                "MOVE",
                "LEAF_WETNESS",
                "LEAF_WETNESS_MEDIUM",
                "LEAF_WETNESS_HIGH",
                "RH_AIR_H1",
                "RH_AIR_H1_MIN",
                "RH_AIR_H1_MAX",
                "TEMP_AIR_H1",
                "TEMP_AIR_H1_MIN",
                "TEMP_AIR_H1_MAX",
                "RAIN_TIC",
                "WIND_MEAN",
                "WIND_MAX"
              ]
            }
          },
          {
            "in": "query",
            "description": "Wether the calibration of rain falls must be taken in count",
            "name": "withCalibration",
            "type": "boolean",
            "required": false
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's statistics",
            "schema": {
              "$ref": "#/definitions/DeviceStatistics"
            }
          },
          "404": {
            "description": "User/device does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/users/{userId}/devices/{deviceId}/data/daily": {
      "get": {
        "operationId": "getUserDeviceDailyData",
        "summary": "Get a user's device's daily data.",
        "tags": [
          "devices",
          "data",
          "partnerAccess"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The device id",
            "name": "deviceId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "query",
            "required": true,
            "description": "The date before which the data starts being retrieved",
            "name": "beforeDate",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "required": true,
            "description": "The number of days to retrieve",
            "name": "days",
            "type": "number",
            "enum": [
              7,
              30,
              60,
              90
            ]
          },
          {
            "in": "query",
            "description": "If must include device replacements or not",
            "name": "includeHistory",
            "type": "boolean",
            "required": false
          },
          {
            "in": "query",
            "required": false,
            "description": "The timezone of the data",
            "name": "timeZone",
            "type": "string",
            "pattern": "^[a-zA-Z]+/[a-zA-Z]+$",
            "maxLength": 50
          },
          {
            "in": "query",
            "required": true,
            "description": "The measures to read",
            "name": "measures",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "RELATIVE_HUMIDITY",
                "RELATIVE_HUMIDITY_MIN",
                "RELATIVE_HUMIDITY_MAX",
                "TEMPERATURE",
                "TEMPERATURE_MIN",
                "TEMPERATURE_MAX",
                "WET_TEMPERATURE",
                "WET_TEMPERATURE_MIN",
                "WET_TEMPERATURE_MAX",
                "LEAF_SENSOR_CONDUCTIVITY",
                "LEAF_SENSOR_CONDUCTIVITY_MIN",
                "LEAF_SENSOR_CONDUCTIVITY_MAX",
                "RAIN_FALL",
                "WIND_SPEED",
                "WIND_GUST",
                "WIND_DIRECTION",
                "MOVE",
                "LEAF_WETNESS",
                "LEAF_WETNESS_MEDIUM",
                "LEAF_WETNESS_HIGH",
                "RH_AIR_H1",
                "RH_AIR_H1_MIN",
                "RH_AIR_H1_MAX",
                "TEMP_AIR_H1",
                "TEMP_AIR_H1_MIN",
                "TEMP_AIR_H1_MAX",
                "RAIN_TIC",
                "WIND_MEAN",
                "WIND_MAX"
              ]
            }
          },
          {
            "in": "query",
            "description": "Wether the calibration of rain falls must be taken in count",
            "name": "withCalibration",
            "type": "boolean",
            "required": false
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's data",
            "schema": {
              "$ref": "#/definitions/DeviceStatistics"
            }
          },
          "404": {
            "description": "User/device does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/users/{userId}/devices/{deviceId}/countinuousStatistics": {
      "get": {
        "operationId": "getUserDeviceContinuousStatistics",
        "summary": "Get a user's device's continuous device's statistics.",
        "tags": [
          "devices",
          "data"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The device id",
            "name": "deviceId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "query",
            "required": true,
            "description": "The statistics start date",
            "name": "startDate",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "required": true,
            "description": "The statistics end date",
            "name": "endDate",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "required": true,
            "description": "The measures to read",
            "name": "measures",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "RELATIVE_HUMIDITY",
                "RELATIVE_HUMIDITY_MIN",
                "RELATIVE_HUMIDITY_MAX",
                "TEMPERATURE",
                "TEMPERATURE_MIN",
                "TEMPERATURE_MAX",
                "WET_TEMPERATURE",
                "WET_TEMPERATURE_MIN",
                "WET_TEMPERATURE_MAX",
                "LEAF_SENSOR_CONDUCTIVITY",
                "LEAF_SENSOR_CONDUCTIVITY_MIN",
                "LEAF_SENSOR_CONDUCTIVITY_MAX",
                "RAIN_FALL",
                "WIND_SPEED",
                "WIND_GUST",
                "WIND_DIRECTION",
                "MOVE",
                "LEAF_WETNESS",
                "LEAF_WETNESS_MEDIUM",
                "LEAF_WETNESS_HIGH",
                "RH_AIR_H1",
                "RH_AIR_H1_MIN",
                "RH_AIR_H1_MAX",
                "TEMP_AIR_H1",
                "TEMP_AIR_H1_MIN",
                "TEMP_AIR_H1_MAX",
                "RAIN_TIC",
                "WIND_MEAN",
                "WIND_MAX"
              ]
            }
          },
          {
            "in": "query",
            "description": "Wether you want to get only original data or eventually patched ones to avoid holes.",
            "name": "patched",
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "If must include device replacements or not",
            "name": "includeHistory",
            "type": "boolean",
            "required": false
          },
          {
            "in": "query",
            "required": false,
            "description": "The timezone of the data",
            "name": "timeZone",
            "type": "string",
            "pattern": "^[a-zA-Z]+/[a-zA-Z]+$",
            "maxLength": 50
          },
          {
            "in": "query",
            "description": "The interval of data (Accepted value : 31 days for 1h interval, 1 year for 1d interval, 5y for 1w interval)",
            "name": "interval",
            "type": "string",
            "enum": [
              "1h",
              "1d",
              "1w",
              "1M"
            ]
          },
          {
            "in": "query",
            "description": "Wether the calibration of rain falls must be taken in count",
            "name": "withCalibration",
            "type": "boolean",
            "required": false
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's statistics",
            "schema": {
              "$ref": "#/definitions/DeviceStatistics"
            }
          },
          "404": {
            "description": "User/device does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/users/{userId}/devices/{deviceId}/summaries/{date}": {
      "get": {
        "operationId": "getUserDeviceSummary",
        "summary": "Get a user's device's summary at a given date.",
        "tags": [
          "devices",
          "data"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The device id",
            "name": "deviceId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "query",
            "description": "If must include device replacements or not",
            "name": "includeHistory",
            "type": "boolean",
            "required": false
          },
          {
            "in": "path",
            "required": true,
            "description": "The summary date",
            "name": "date",
            "type": "string",
            "format": "date-time",
            "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z"
          },
          {
            "in": "query",
            "required": true,
            "description": "The measures to read",
            "name": "measures",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "RELATIVE_HUMIDITY",
                "TEMPERATURE",
                "WET_TEMPERATURE",
                "RAIN_FALL",
                "WIND_SPEED",
                "WIND_GUST",
                "WIND_DIRECTION",
                "MOVE",
                "LEAF_SENSOR_CONDUCTIVITY",
                "RH_AIR_H1",
                "TEMP_AIR_H1",
                "RAIN_TIC",
                "WIND_MEAN",
                "WIND_MAX"
              ]
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's summary",
            "schema": {
              "$ref": "#/definitions/DeviceSummaryEntry"
            }
          },
          "404": {
            "description": "User/device does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/users/{userId}/devices/{deviceId}/forecasts": {
      "get": {
        "operationId": "getUserDeviceForecasts",
        "summary": "Get a user's device's forecasts.",
        "tags": [
          "devices",
          "forecasts"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The device id",
            "name": "deviceId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "query",
            "name": "date",
            "description": "Date of the forecasts",
            "type": "string",
            "format": "date-time",
            "required": true
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's forecasts",
            "schema": {
              "$ref": "#/definitions/DeviceForecasts"
            }
          },
          "404": {
            "description": "User/device does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/users/{userId}/forecasts": {
      "get": {
        "operationId": "getUserForecasts",
        "summary": "Get a user's forecasts.",
        "tags": [
          "forecasts"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "query",
            "required": true,
            "description": "The latitude of the data",
            "name": "latitude",
            "pattern": "^\\-?[0-9]+(\\.[0-9]+)?$",
            "minimum": -90,
            "maximum": 90,
            "type": "number"
          },
          {
            "in": "query",
            "required": true,
            "description": "The longitude of the data",
            "name": "longitude",
            "pattern": "^\\-?[0-9]+(\\.[0-9]+)?$",
            "minimum": -180,
            "maximum": 180,
            "type": "number"
          },
          {
            "in": "query",
            "name": "date",
            "description": "Date of the forecasts",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's forecasts",
            "schema": {
              "$ref": "#/definitions/DeviceForecasts"
            }
          },
          "404": {
            "description": "User/device does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/users/{userId}/statistics": {
      "get": {
        "operationId": "getUserStatistics",
        "summary": "Get a user's statistics for a given location.",
        "tags": [
          "data"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "query",
            "required": true,
            "description": "The latitude of the data",
            "name": "latitude",
            "pattern": "^\\-?[0-9]+(\\.[0-9]+)?$",
            "minimum": -90,
            "maximum": 90,
            "type": "number"
          },
          {
            "in": "query",
            "required": true,
            "description": "The longitude of the data",
            "name": "longitude",
            "pattern": "^\\-?[0-9]+(\\.[0-9]+)?$",
            "minimum": -180,
            "maximum": 180,
            "type": "number"
          },
          {
            "in": "query",
            "required": true,
            "description": "The statistics start date",
            "name": "startDate",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "required": true,
            "description": "The statistics end date",
            "name": "endDate",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "required": true,
            "description": "The measures to read",
            "name": "measures",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "RELATIVE_HUMIDITY",
                "RELATIVE_HUMIDITY_MIN",
                "RELATIVE_HUMIDITY_MAX",
                "TEMPERATURE",
                "TEMPERATURE_MIN",
                "TEMPERATURE_MAX",
                "WET_TEMPERATURE",
                "WET_TEMPERATURE_MIN",
                "WET_TEMPERATURE_MAX",
                "LEAF_SENSOR_CONDUCTIVITY",
                "LEAF_SENSOR_CONDUCTIVITY_MIN",
                "LEAF_SENSOR_CONDUCTIVITY_MAX",
                "RAIN_FALL",
                "WIND_SPEED",
                "WIND_GUST",
                "WIND_DIRECTION",
                "MOVE",
                "LEAF_WETNESS",
                "LEAF_WETNESS_MEDIUM",
                "LEAF_WETNESS_HIGH",
                "RH_AIR_H1",
                "RH_AIR_H1_MIN",
                "RH_AIR_H1_MAX",
                "TEMP_AIR_H1",
                "TEMP_AIR_H1_MIN",
                "TEMP_AIR_H1_MAX",
                "RAIN_TIC",
                "WIND_MEAN",
                "WIND_MAX"
              ]
            }
          },
          {
            "in": "query",
            "required": true,
            "description": "The ranges to get the data from",
            "name": "ranges",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "number",
              "enum": [
                0.3,
                3,
                10,
                15,
                40,
                80
              ]
            }
          },
          {
            "in": "query",
            "description": "Wether you want to get only original data or eventually patched ones to avoid holes.",
            "name": "patched",
            "type": "boolean"
          },
          {
            "in": "query",
            "description": "If must include device replacements or not",
            "name": "includeHistory",
            "type": "boolean",
            "required": false
          },
          {
            "in": "query",
            "description": "The interval of data (Accepted value : 31 days for 1h interval, 1 year for 1d interval, 5y for 1w interval)",
            "name": "interval",
            "type": "string",
            "enum": [
              "1h",
              "1d",
              "1w",
              "1M"
            ]
          },
          {
            "in": "query",
            "description": "Wether the calibration of rain falls must be taken in count",
            "name": "withCalibration",
            "type": "boolean",
            "required": false
          },
          {
            "in": "query",
            "required": false,
            "description": "The timezone of the data",
            "name": "timeZone",
            "type": "string",
            "pattern": "^[a-zA-Z]+/[a-zA-Z]+$",
            "maxLength": 50
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user's statistics",
            "schema": {
              "$ref": "#/definitions/DeviceStatistics"
            }
          },
          "404": {
            "description": "User does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/users/{userId}/data/daily": {
      "get": {
        "operationId": "getUserDailyData",
        "summary": "Get a user's daily data for a given geo location.",
        "tags": [
          "partnerAccess"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "query",
            "required": true,
            "description": "The latitude of the data",
            "name": "latitude",
            "pattern": "^\\-?[0-9]+(\\.[0-9]+)?$",
            "minimum": -90,
            "maximum": 90,
            "type": "number"
          },
          {
            "in": "query",
            "required": true,
            "description": "The longitude of the data",
            "name": "longitude",
            "pattern": "^\\-?[0-9]+(\\.[0-9]+)?$",
            "minimum": -180,
            "maximum": 180,
            "type": "number"
          },
          {
            "in": "query",
            "required": true,
            "description": "The date before which the data starts being retrieved",
            "name": "beforeDate",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "required": true,
            "description": "The number of days to retrieve",
            "name": "days",
            "type": "number",
            "enum": [
              7,
              30,
              60,
              90
            ]
          },
          {
            "in": "query",
            "description": "If must include device replacements or not",
            "name": "includeHistory",
            "type": "boolean",
            "required": false
          },
          {
            "in": "query",
            "required": false,
            "description": "The ranges to get the data from",
            "name": "ranges",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "number",
              "enum": [
                0.3,
                3,
                10,
                15,
                40,
                80
              ]
            }
          },
          {
            "in": "query",
            "required": true,
            "description": "The measures to read",
            "name": "measures",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "RELATIVE_HUMIDITY",
                "RELATIVE_HUMIDITY_MIN",
                "RELATIVE_HUMIDITY_MAX",
                "TEMPERATURE",
                "TEMPERATURE_MIN",
                "TEMPERATURE_MAX",
                "WET_TEMPERATURE",
                "WET_TEMPERATURE_MIN",
                "WET_TEMPERATURE_MAX",
                "LEAF_SENSOR_CONDUCTIVITY",
                "LEAF_SENSOR_CONDUCTIVITY_MIN",
                "LEAF_SENSOR_CONDUCTIVITY_MAX",
                "RAIN_FALL",
                "WIND_SPEED",
                "WIND_GUST",
                "WIND_DIRECTION",
                "MOVE",
                "LEAF_WETNESS",
                "LEAF_WETNESS_MEDIUM",
                "LEAF_WETNESS_HIGH",
                "RH_AIR_H1",
                "RH_AIR_H1_MIN",
                "RH_AIR_H1_MAX",
                "TEMP_AIR_H1",
                "TEMP_AIR_H1_MIN",
                "TEMP_AIR_H1_MAX",
                "RAIN_TIC",
                "WIND_MEAN",
                "WIND_MAX"
              ]
            }
          },
          {
            "in": "query",
            "description": "Wether the calibration of rain falls must be taken in count",
            "name": "withCalibration",
            "type": "boolean",
            "required": false
          },
          {
            "in": "query",
            "required": false,
            "description": "The timezone of the data",
            "name": "timeZone",
            "type": "string",
            "pattern": "^[a-zA-Z]+/[a-zA-Z]+$",
            "maxLength": 50
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's statistics",
            "schema": {
              "$ref": "#/definitions/DeviceStatistics"
            }
          },
          "404": {
            "description": "User/device does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/users/{userId}/data/hourly": {
      "get": {
        "operationId": "getUserHourlyData",
        "summary": "Get a user's hourly data for a given geo location.",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "query",
            "required": true,
            "description": "The latitude of the data",
            "name": "latitude",
            "pattern": "^\\-?[0-9]+(\\.[0-9]+)?$",
            "minimum": -90,
            "maximum": 90,
            "type": "number"
          },
          {
            "in": "query",
            "required": true,
            "description": "The longitude of the data",
            "name": "longitude",
            "pattern": "^\\-?[0-9]+(\\.[0-9]+)?$",
            "minimum": -180,
            "maximum": 180,
            "type": "number"
          },
          {
            "in": "query",
            "required": true,
            "description": "The date before which the data starts being retrieved",
            "name": "beforeDate",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "description": "If must include device replacements or not",
            "name": "includeHistory",
            "type": "boolean",
            "required": false
          },
          {
            "in": "query",
            "required": true,
            "description": "The number of days to retrieve",
            "name": "days",
            "type": "number",
            "enum": [
              1,
              2,
              7,
              20,
              31
            ]
          },
          {
            "in": "query",
            "required": false,
            "description": "The ranges to get the data from",
            "name": "ranges",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "number",
              "enum": [
                0.3,
                3,
                10,
                15,
                40,
                80
              ]
            }
          },
          {
            "in": "query",
            "required": true,
            "description": "The measures to read",
            "name": "measures",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "RELATIVE_HUMIDITY",
                "RELATIVE_HUMIDITY_MIN",
                "RELATIVE_HUMIDITY_MAX",
                "TEMPERATURE",
                "TEMPERATURE_MIN",
                "TEMPERATURE_MAX",
                "WET_TEMPERATURE",
                "WET_TEMPERATURE_MIN",
                "WET_TEMPERATURE_MAX",
                "LEAF_SENSOR_CONDUCTIVITY",
                "LEAF_SENSOR_CONDUCTIVITY_MIN",
                "LEAF_SENSOR_CONDUCTIVITY_MAX",
                "RAIN_FALL",
                "WIND_SPEED",
                "WIND_GUST",
                "WIND_DIRECTION",
                "MOVE",
                "LEAF_WETNESS",
                "LEAF_WETNESS_MEDIUM",
                "LEAF_WETNESS_HIGH",
                "RH_AIR_H1",
                "RH_AIR_H1_MIN",
                "RH_AIR_H1_MAX",
                "TEMP_AIR_H1",
                "TEMP_AIR_H1_MIN",
                "TEMP_AIR_H1_MAX",
                "RAIN_TIC",
                "WIND_MEAN",
                "WIND_MAX"
              ]
            }
          },
          {
            "in": "query",
            "description": "Wether the calibration of rain falls must be taken in count",
            "name": "withCalibration",
            "type": "boolean",
            "required": false
          },
          {
            "in": "query",
            "required": false,
            "description": "The timezone of the data",
            "name": "timeZone",
            "type": "string",
            "pattern": "^[a-zA-Z]+/[a-zA-Z]+$",
            "maxLength": 50
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's statistics",
            "schema": {
              "$ref": "#/definitions/DeviceStatistics"
            }
          },
          "404": {
            "description": "User/device does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ],
        "tags": []
      }
    },
    "/users/{userId}/preferences": {
      "get": {
        "operationId": "getUserPreferences",
        "summary": "Get a user's preferences.",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user preferences",
            "schema": {
              "$ref": "#/definitions/UserPreferences"
            }
          },
          "404": {
            "description": "User does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ],
        "tags": []
      },
      "put": {
        "operationId": "putUserPreferences",
        "summary": "Update a user's preferences.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "body",
            "description": "The new user preferences",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserPreferences"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "The user preferences were created/updated",
            "schema": {
              "$ref": "#/definitions/UserPreferences"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ],
        "tags": []
      }
    },
    "/users/{userId}/notifications": {
      "get": {
        "operationId": "getUserNotifications",
        "summary": "Get user's notifications.",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "query",
            "required": false,
            "name": "size",
            "type": "number",
            "default": 10,
            "enum": [
              10,
              20,
              50,
              100
            ]
          },
          {
            "in": "query",
            "required": false,
            "name": "cursor",
            "type": "string"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The user's notifications",
            "schema": {
              "$ref": "#/definitions/NotificationsItems"
            }
          },
          "404": {
            "description": "User does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ],
        "tags": []
      }
    },
    "/users/{userId}/notifications/{notificationId}/read": {
      "put": {
        "operationId": "putUserNotificationRead",
        "summary": "Set a user's notification as read.",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The notification uuid",
            "name": "notificationId",
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
            "required": true
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The user's notification is read"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ],
        "tags": []
      },
      "delete": {
        "operationId": "deleteUserNotificationRead",
        "summary": "Set a user's notification as unread.",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The notification uuid",
            "name": "notificationId",
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
            "required": true
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The user's notification is unread"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ],
        "tags": []
      }
    },
    "/users/{userId}/alerts": {
      "get": {
        "operationId": "getUserAlerts",
        "summary": "Get a user's alerts.",
        "tags": [
          "alerts"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user's alerts",
            "schema": {
              "$ref": "#/definitions/AlertsItems"
            }
          },
          "404": {
            "description": "User does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "post": {
        "operationId": "postUserAlert",
        "summary": "Create a user's alert.",
        "tags": [
          "alerts"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "body",
            "description": "The user's alert",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Alert"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "The user's alert created",
            "schema": {
              "$ref": "#/definitions/AlertItem"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/users/{userId}/alerts/{alertId}": {
      "put": {
        "operationId": "putUserAlert",
        "summary": "Update a user's alert.",
        "tags": [
          "alerts"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The alert id",
            "name": "alertId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "body",
            "description": "The user's alert",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Alert"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "The user's alert updated",
            "schema": {
              "$ref": "#/definitions/AlertItem"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "delete": {
        "operationId": "deleteUserAlert",
        "summary": "Delete a user's alert.",
        "tags": [
          "alerts"
        ],
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The alert id",
            "name": "alertId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The user's alert were successfully deleted."
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/organisations": {
      "post": {
        "operationId": "postOrganisationDeprecated",
        "summary": "Creates a new organisation. Highly Deprecated, will be moved soon.",
        "tags": [
          "deprecated"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "description": "The necessary contents to create a new organisation",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "firstname",
                "lastname",
                "password",
                "email",
                "phone",
                "address",
                "zipcode",
                "city",
                "country",
                "company",
                "locale"
              ],
              "properties": {
                "firstname": {
                  "type": "string"
                },
                "lastname": {
                  "type": "string"
                },
                "birthDate": {
                  "type": "string",
                  "format": "date"
                },
                "password": {
                  "type": "string"
                },
                "email": {
                  "type": "string",
                  "format": "email"
                },
                "locale": {
                  "type": "string",
                  "pattern": "^[a-z]{2}(-[A-Z]{2,3})?$",
                  "maxLength": 5
                },
                "timeZone": {
                  "type": "string",
                  "pattern": "^[a-zA-Z]+/[a-zA-Z]+$",
                  "maxLength": 50
                },
                "phone": {
                  "type": "string"
                },
                "address": {
                  "type": "string"
                },
                "zipcode": {
                  "type": "string"
                },
                "city": {
                  "type": "string"
                },
                "country": {
                  "type": "string"
                },
                "company": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "area": {
                      "type": "number"
                    },
                    "crops": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "irrigation": {
                      "type": "boolean"
                    }
                  }
                },
                "callbackPath": {
                  "type": "string"
                },
                "verifyToken": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The organisation were created",
            "schema": {
              "$ref": "#/definitions/Organisation"
            }
          }
        }
      }
    },
    "/users/{userId}/organisations": {
      "get": {
        "operationId": "getUserOrganisations",
        "summary": "Get all user's organisations.",
        "tags": [
          "organisations"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "The user's organisations",
            "schema": {
              "$ref": "#/definitions/OrganisationItems"
            }
          },
          "404": {
            "description": "User or organisation does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "post": {
        "operationId": "postOrganisation",
        "summary": "Creates a new organisation.",
        "tags": [
          "organisations"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The user id",
            "name": "userId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "body",
            "description": "The necessary contents to create a new organisation",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Organisation"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "The organisation were created",
            "schema": {
              "$ref": "#/definitions/OrganisationItem"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/organisations/{organisationId}": {
      "get": {
        "operationId": "getOrganisation",
        "summary": "Get the organisation.",
        "tags": [
          "organisations"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The organisation id",
            "name": "organisationId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "The organisation",
            "schema": {
              "$ref": "#/definitions/OrganisationItem"
            }
          },
          "404": {
            "description": "Organisation does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "put": {
        "operationId": "putOrganisation",
        "summary": "Update an organisation.",
        "tags": [
          "organisations"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The organisation id",
            "name": "organisationId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "body",
            "description": "The modified organisation",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Organisation"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "The organisation were sucessfully updated",
            "schema": {
              "$ref": "#/definitions/OrganisationItem"
            }
          },
          "404": {
            "description": "Organisation does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/organisations/{organisationId}/membersMigration": {
      "post": {
        "operationId": "postOrganisationMembersMigration",
        "summary": "Endpoint for migration. Don't use it or use with caution !",
        "tags": [
          "organisations",
          "deprecated"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The organisation id",
            "name": "organisationId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "body",
            "description": "The necessary contents to migrate users",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "collaborators",
                "guests"
              ],
              "properties": {
                "collaborators": {
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "type": "number",
                    "pattern": "^[0-9]+$"
                  }
                },
                "guests": {
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "type": "number",
                    "pattern": "^[0-9]+$"
                  }
                }
              }
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Members were migrated"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/organisations/{organisationId}/users": {
      "get": {
        "operationId": "getOrganisationUsers",
        "summary": "Retrieve all users from an organisation",
        "tags": [
          "organisations"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The organisation id",
            "name": "organisationId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Organisation users",
            "schema": {
              "$ref": "#/definitions/UserItems"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/organisations/{organisationId}/users/{targetUserId}": {
      "post": {
        "operationId": "postOrganisationUser",
        "summary": "Add an user to an organisation",
        "tags": [
          "organisations",
          "users"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The organisation id",
            "name": "organisationId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The user id to add",
            "name": "targetUserId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "body",
            "description": "The type of relation",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "owner",
                    "administrator",
                    "collaborator",
                    "guest"
                  ]
                }
              }
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "The user was successfully added to the organisation"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "put": {
        "operationId": "putOrganisationUser",
        "summary": "Edit or add an user to an organisation",
        "tags": [
          "organisations",
          "users"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The organisation id",
            "name": "organisationId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The user id to add",
            "name": "targetUserId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "body",
            "description": "The type of relation",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "owner",
                    "administrator",
                    "collaborator",
                    "guest"
                  ]
                }
              }
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "The user was successfully added to the organisation"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "delete": {
        "operationId": "deleteOrganisationUser",
        "summary": "Delete an user from an organisation",
        "tags": [
          "organisations",
          "users"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The organisation id",
            "name": "organisationId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The user id to remove",
            "name": "targetUserId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The user was successfully deleted from the organisation."
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/organisations/{organisationId}/operations": {
      "get": {
        "operationId": "getOrganisationOperations",
        "summary": "Get a organisation's operations.",
        "tags": [
          "operations"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The organisation id",
            "name": "organisationId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested organisation's operations",
            "schema": {
              "$ref": "#/definitions/OperationsItems"
            }
          },
          "404": {
            "description": "Organisation does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "post": {
        "operationId": "postOrganisationOperation",
        "summary": "Create an organisation's operation.",
        "tags": [
          "operations"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The organisation id",
            "name": "organisationId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "The operation to add",
            "schema": {
              "$ref": "#/definitions/Operation"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The newly created organisation's operation",
            "schema": {
              "$ref": "#/definitions/OperationItem"
            }
          },
          "404": {
            "description": "Organisation does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/organisations/{organisationId}/operations/{operationId}": {
      "get": {
        "operationId": "getOrganisationOperation",
        "summary": "Retrieve an organisation's operation.",
        "tags": [
          "operations"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The organisation id",
            "name": "organisationId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The operation id",
            "name": "operationId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The organisation's operation",
            "schema": {
              "$ref": "#/definitions/OperationItem"
            }
          },
          "404": {
            "description": "Organisation or operation does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "put": {
        "operationId": "putOrganisationOperation",
        "summary": "Update an organisation's operation.",
        "tags": [
          "operations"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The organisation id",
            "name": "organisationId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The operation id",
            "name": "operationId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "The operation to update",
            "schema": {
              "$ref": "#/definitions/Operation"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The modified organisation's operation",
            "schema": {
              "$ref": "#/definitions/OperationItem"
            }
          },
          "404": {
            "description": "Organisation does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "delete": {
        "operationId": "deleteOrganisationOperation",
        "summary": "Delete an organisation's operation.",
        "tags": [
          "operations"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The organisation id",
            "name": "organisationId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The operation id",
            "name": "operationId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The organisation's operation does not exist anymore"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/organisations/{organisationId}/places": {
      "post": {
        "operationId": "postOrganisationPlace",
        "summary": "Create a new place for an organisation.",
        "tags": [
          "organisations",
          "places"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The organisation id",
            "name": "organisationId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "body",
            "description": "The necessary contents to create a new place for an organisation",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Place"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "The place were created",
            "schema": {
              "$ref": "#/definitions/PlaceItem"
            }
          },
          "404": {
            "description": "Organisation does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/organisations/{organisationId}/places/{placeId}": {
      "put": {
        "operationId": "putOrganisationPlace",
        "summary": "Update a place for an organisation",
        "tags": [
          "organisations",
          "places"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The organisation id",
            "name": "organisationId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "path",
            "description": "The place id",
            "name": "placeId",
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "required": true
          },
          {
            "in": "body",
            "description": "The necessary contents to update a place for an organisation",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Place"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "The place were updated",
            "schema": {
              "$ref": "#/definitions/PlaceItem"
            }
          },
          "404": {
            "description": "Place or organisation does not exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/weather/live": {
      "get": {
        "operationId": "getWeatherLive",
        "summary": "Get last measure (for a specific type) from devices in a given area (1 hour for RAIN_FALL).",
        "tags": [],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "required": true,
            "description": "The geohash of the data",
            "name": "geohash",
            "type": "string"
          },
          {
            "in": "query",
            "required": true,
            "description": "The measures to read",
            "name": "measureType",
            "type": "string",
            "enum": [
              "RELATIVE_HUMIDITY",
              "TEMPERATURE",
              "WIND_SPEED",
              "WIND_GUST",
              "WIND_DIRECTION",
              "RAIN_FALL"
            ]
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of geohashes (small precision) with last measures",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "geohash": {
                        "type": "string"
                      },
                      "lastTemperature": {
                        "type": "number"
                      },
                      "lastRelativeHumidity": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    },
    "/checkouts": {
      "post": {
        "operationId": "postCheckout",
        "summary": "Create a new checkout (with chargebee)",
        "tags": [
          "checkout"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "description": "The checkout object",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Checkout"
            }
          },
          {
            "in": "query",
            "description": "Generate and send an email",
            "name": "generateEmail",
            "type": "boolean"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Checkout page has been created",
            "schema": {
              "$ref": "#/definitions/CheckoutItem"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_TEAM"
            ]
          }
        ]
      }
    },
    "/checkoutsRessources": {
      "get": {
        "operationId": "getCheckoutRessources",
        "summary": "Retrieve all checkout ressources (plan/addons)",
        "tags": [
          "checkout"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "currency",
            "type": "string",
            "enum": [
              "EUR",
              "GBP"
            ],
            "required": true
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Checkout ressources (plan/addons)"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_TEAM"
            ]
          }
        ]
      }
    },
    "/checkoutsEstimate": {
      "post": {
        "operationId": "postCheckoutEstimate",
        "summary": "Generates an estimate for the 'create checkout' operation. ",
        "tags": [
          "checkout"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "required": [
                "contents"
              ],
              "properties": {
                "contents": {
                  "type": "object",
                  "required": [
                    "products",
                    "currency",
                    "delivery"
                  ],
                  "properties": {
                    "currency": {
                      "type": "string",
                      "enum": [
                        "EUR",
                        "GBP"
                      ]
                    },
                    "products": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "id",
                          "quantity"
                        ],
                        "properties": {
                          "id": {
                            "type": "number",
                            "pattern": "^[0-9]+$",
                            "minimum": 1
                          },
                          "quantity": {
                            "type": "number",
                            "minimum": 1
                          }
                        }
                      }
                    },
                    "delivery": {
                      "type": "object",
                      "required": [
                        "type",
                        "zone"
                      ],
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "sending",
                            "onlyTripod"
                          ]
                        },
                        "zone": {
                          "type": "string",
                          "enum": [
                            "France",
                            "Europe"
                          ]
                        }
                      }
                    },
                    "couponCodeId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The estimate"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_TEAM"
            ]
          }
        ]
      }
    },
    "/checkouts/{checkoutId}": {
      "get": {
        "operationId": "getCheckout",
        "summary": "Retrieve a checkout",
        "tags": [
          "checkout"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The checkout id",
            "name": "checkoutId",
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
            "required": true
          },
          {
            "name": "locale",
            "in": "query",
            "type": "string",
            "pattern": "^[a-z]{2}(-[A-Z]{2,3})?$",
            "maxLength": 5
          }
        ],
        "responses": {
          "200": {
            "description": "Checkout retrieved",
            "schema": {
              "$ref": "#/definitions/CheckoutItem"
            }
          }
        }
      }
    },
    "/checkouts/{checkoutId}/status": {
      "put": {
        "operationId": "putCheckoutStatus",
        "summary": "Change status of a checkout",
        "tags": [
          "checkout"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The checkout id",
            "name": "checkoutId",
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
            "required": true
          },
          {
            "in": "query",
            "description": "New status",
            "name": "status",
            "required": true,
            "type": "string",
            "enum": [
              "viewed",
              "clicked",
              "ended"
            ]
          },
          {
            "in": "query",
            "description": "New chargebee step in funnel",
            "name": "chargebeeStep",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Checkout status has been updated"
          }
        }
      }
    },
    "/search/users": {
      "get": {
        "operationId": "getSearchUser",
        "summary": "Search for an user",
        "tags": [
          "search",
          "users"
        ],
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "required": true,
            "description": "Email of the user to search",
            "name": "email",
            "type": "string",
            "format": "email"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Access token in the query string",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Users that match the search",
            "schema": {
              "$ref": "#/definitions/UserItem"
            }
          }
        },
        "security": [
          {
            "bearerAuth": [
              "ROLE_USER"
            ]
          }
        ]
      }
    }
  },
  "definitions": {
    "CropsItems": {
      "type": "object",
      "required": [
        "items",
        "crops"
      ],
      "properties": {
        "crops": {
          "$ref": "#/definitions/CropHash"
        },
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$"
          }
        }
      }
    },
    "CropItem": {
      "type": "object",
      "required": [
        "item",
        "crops"
      ],
      "properties": {
        "item": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        },
        "entry": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1,
          "description": "Deprecated, use the `item` property instead."
        },
        "crops": {
          "$ref": "#/definitions/CropHash"
        }
      }
    },
    "CropHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/Crop"
        }
      }
    },
    "Crop": {
      "type": "object",
      "required": [
        "contents"
      ],
      "properties": {
        "id": {
          "type": "number",
          "pattern": "^[0-9]+$"
        },
        "hits": {
          "type": "number"
        },
        "contents": {
          "$ref": "#/definitions/CropContents"
        }
      }
    },
    "CropContents": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "OrganisationHash": {
      "type": "object",
      "patternProperties": {
        "undefined": {
          "$ref": "#/definitions/Organisation"
        }
      }
    },
    "Organisation": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "contents"
      ],
      "properties": {
        "id": {
          "type": "number"
        },
        "ownersIds": {
          "type": "array",
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "contents": {
          "$ref": "#/definitions/OrganisationContents"
        }
      }
    },
    "OrganisationItem": {
      "type": "object",
      "required": [
        "item",
        "organisations"
      ],
      "properties": {
        "item": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        },
        "organisations": {
          "$ref": "#/definitions/OrganisationHash"
        }
      }
    },
    "OrganisationItems": {
      "type": "object",
      "required": [
        "items",
        "organisations"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$"
          }
        },
        "organisations": {
          "$ref": "#/definitions/OrganisationHash"
        }
      }
    },
    "OrganisationContents": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "name",
        "locale",
        "timeZone",
        "type"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "locale": {
          "type": "string",
          "pattern": "^[a-z]{2}(-[A-Z]{2,3})?$",
          "maxLength": 5
        },
        "timeZone": {
          "type": "string",
          "pattern": "^[a-zA-Z]+/[a-zA-Z]+$",
          "maxLength": 50
        },
        "identification": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "farm",
            "cooperative",
            "interest_group",
            "chamber_of_agriculture",
            "company",
            "personal",
            "public_agency"
          ]
        },
        "typeFarm": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "agricultural",
              "wine",
              "arboreal",
              "vegetable",
              "apiarian"
            ]
          }
        },
        "area": {
          "type": "number"
        },
        "crops": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "irrigation": {
          "type": "boolean"
        }
      }
    },
    "Place": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "contents"
      ],
      "properties": {
        "id": {
          "type": "number"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "contents": {
          "$ref": "#/definitions/PlaceContents"
        }
      }
    },
    "PlaceContents": {
      "oneOf": [
        {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "googlePlaceId"
          ],
          "properties": {
            "googlePlaceId": {
              "type": "string"
            }
          }
        },
        {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "googlePlaceId",
            "address",
            "location",
            "googleAddressComponents"
          ],
          "properties": {
            "googlePlaceId": {
              "type": "string"
            },
            "address": {
              "type": "string"
            },
            "location": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "lat",
                "lng"
              ],
              "properties": {
                "lat": {
                  "type": "number"
                },
                "lng": {
                  "type": "number"
                }
              }
            },
            "googleAddressComponents": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "long_name",
                  "short_name",
                  "types"
                ],
                "properties": {
                  "long_name": {
                    "type": "string"
                  },
                  "short_name": {
                    "type": "string"
                  },
                  "types": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      ]
    },
    "PlaceHash": {
      "type": "object",
      "patternProperties": {
        "undefined": {
          "$ref": "#/definitions/Place"
        }
      }
    },
    "PlaceItem": {
      "type": "object",
      "required": [
        "item",
        "places"
      ],
      "properties": {
        "item": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        },
        "places": {
          "$ref": "#/definitions/PlaceHash"
        }
      }
    },
    "UserContents": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "email",
        "phone"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email"
        },
        "phone": {
          "type": "string"
        },
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "zipcode": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "birthDate": {
          "type": "string",
          "format": "date"
        },
        "gender": {
          "type": "string"
        }
      }
    },
    "PartialUserContents": {
      "description": "A user that may only have an email",
      "oneOf": [
        {
          "$ref": "#/definitions/UserContents"
        },
        {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "email"
          ],
          "properties": {
            "email": {
              "type": "string",
              "format": "email"
            },
            "phone": {
              "type": "string"
            },
            "firstname": {
              "type": "string"
            },
            "lastname": {
              "type": "string"
            },
            "address": {
              "type": "string"
            },
            "zipcode": {
              "type": "string"
            },
            "city": {
              "type": "string"
            },
            "country": {
              "type": "string"
            },
            "birthDate": {
              "type": "string",
              "format": "date"
            },
            "gender": {
              "type": "string"
            }
          }
        }
      ]
    },
    "User": {
      "type": "object",
      "required": [
        "contents"
      ],
      "properties": {
        "id": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        },
        "locale": {
          "type": "string",
          "pattern": "^[a-z]{2}(-[A-Z]{2,3})?$",
          "maxLength": 5
        },
        "timeZone": {
          "type": "string",
          "pattern": "^[a-zA-Z]+/[a-zA-Z]+$",
          "maxLength": 50
        },
        "signupType": {
          "type": "string",
          "description": "With which signup method the user has been created",
          "enum": [
            "form",
            "invitation",
            "unknown"
          ]
        },
        "emailVerified": {
          "description": "User email got verified with a link",
          "type": "boolean"
        },
        "organisationsIds": {
          "type": "array",
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "minItems": 0,
          "uniqueItems": true
        },
        "roles": {
          "type": "array",
          "minItems": 1,
          "maxItems": 3,
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "ROLE_USER",
              "ROLE_ADMIN",
              "ROLE_TEAM"
            ]
          }
        },
        "contents": {
          "$ref": "#/definitions/UserContents"
        }
      }
    },
    "PartialUser": {
      "type": "object",
      "required": [
        "contents"
      ],
      "properties": {
        "id": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        },
        "locale": {
          "type": "string",
          "pattern": "^[a-z]{2}(-[A-Z]{2,3})?$",
          "maxLength": 5
        },
        "timeZone": {
          "type": "string",
          "pattern": "^[a-zA-Z]+/[a-zA-Z]+$",
          "maxLength": 50
        },
        "contents": {
          "$ref": "#/definitions/PartialUserContents"
        }
      }
    },
    "NewUser": {
      "type": "object",
      "required": [
        "contents",
        "password"
      ],
      "properties": {
        "id": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        },
        "locale": {
          "type": "string",
          "pattern": "^[a-z]{2}(-[A-Z]{2,3})?$",
          "maxLength": 5
        },
        "timeZone": {
          "type": "string",
          "pattern": "^[a-zA-Z]+/[a-zA-Z]+$",
          "maxLength": 50
        },
        "signupType": {
          "type": "string",
          "description": "With which signup method the user has been created",
          "enum": [
            "form",
            "invitation",
            "unknown"
          ]
        },
        "emailVerified": {
          "description": "User email got verified with a link",
          "type": "boolean"
        },
        "organisationsIds": {
          "type": "array",
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "minItems": 0,
          "uniqueItems": true
        },
        "roles": {
          "type": "array",
          "minItems": 1,
          "maxItems": 3,
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "ROLE_USER",
              "ROLE_ADMIN",
              "ROLE_TEAM"
            ]
          }
        },
        "contents": {
          "$ref": "#/definitions/UserContents"
        },
        "password": {
          "type": "string",
          "minLength": 8
        },
        "callbackPath": {
          "type": "string"
        }
      }
    },
    "UserHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "PartialUserHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/PartialUser"
        }
      }
    },
    "UserItem": {
      "type": "object",
      "required": [
        "item",
        "users"
      ],
      "properties": {
        "item": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        },
        "users": {
          "$ref": "#/definitions/PartialUserHash"
        }
      }
    },
    "UserItems": {
      "type": "object",
      "required": [
        "items",
        "users"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
          },
          "minItems": 0,
          "uniqueItems": true
        },
        "users": {
          "$ref": "#/definitions/UserHash"
        }
      }
    },
    "UserPreferences": {
      "type": "object",
      "required": [
        "areasUnit",
        "locale",
        "precipitationsUnit",
        "smallVolumesUnit",
        "speedsUnit",
        "temperaturesUnit",
        "volumesUnit",
        "weightsUnit"
      ],
      "properties": {
        "areasUnit": {
          "type": "string",
          "enum": [
            "HA",
            "A"
          ]
        },
        "locale": {
          "type": "string",
          "pattern": "^[a-z]{2}(-[A-Z]{2,3})?$",
          "maxLength": 5
        },
        "precipitationsUnit": {
          "type": "string",
          "enum": [
            "MM",
            "INCH"
          ]
        },
        "smallVolumesUnit": {
          "type": "string",
          "enum": [
            "L",
            "GAL_US"
          ]
        },
        "speedsUnit": {
          "type": "string",
          "enum": [
            "KPH",
            "MPH"
          ]
        },
        "temperaturesUnit": {
          "type": "string",
          "enum": [
            "C",
            "F"
          ]
        },
        "volumesUnit": {
          "type": "string",
          "enum": [
            "M3",
            "CU_YD"
          ]
        },
        "weightsUnit": {
          "type": "string",
          "enum": [
            "T",
            "SH_TN"
          ]
        },
        "optionalMeasures": {
          "type": "array",
          "minItems": 0,
          "items": {
            "type": "string",
            "enum": [
              "WET_TEMPERATURE",
              "DEW_POINT",
              "BANANA_FLOWER_CUT"
            ]
          }
        }
      }
    },
    "AlertsItems": {
      "type": "object",
      "required": [
        "items",
        "alerts"
      ],
      "alerts": {
        "$ref": "#/definitions/AlertHash"
      },
      "items": {
        "type": "array",
        "items": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        },
        "minItems": 0,
        "uniqueItems": true
      }
    },
    "AlertHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/Alert"
        }
      }
    },
    "AlertItem": {
      "type": "object",
      "required": [
        "item",
        "alerts"
      ],
      "properties": {
        "item": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        },
        "entry": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1,
          "description": "Deprecated, use the `item` property instead."
        },
        "alerts": {
          "$ref": "#/definitions/AlertHash"
        }
      }
    },
    "Alert": {
      "type": "object",
      "required": [
        "contents"
      ],
      "properties": {
        "id": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        },
        "userId": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        },
        "activationDate": {
          "type": "string",
          "format": "date-time"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "deletionDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastModificationDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastCheckDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastTriggerDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastNotificationTriggerDate": {
          "type": "string",
          "format": "date-time"
        },
        "contents": {
          "$ref": "#/definitions/AlertContents"
        }
      }
    },
    "AlertContents": {
      "type": "object",
      "required": [
        "name",
        "status",
        "notificationTypes",
        "numberOfNotificationPerTrigger",
        "devicesIds",
        "conditions"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "notificationTypes": {
          "type": "array",
          "uniqueItems": true,
          "minItems": 1,
          "items": {
            "type": "string",
            "enum": [
              "sms",
              "email",
              "phone",
              "webhook",
              "push",
              "notification"
            ]
          }
        },
        "conditions": {
          "$ref": "#/definitions/AlertGroupConditions"
        },
        "enableStartTime": {
          "type": "string",
          "format": "time"
        },
        "enableEndTime": {
          "type": "string",
          "format": "time"
        },
        "numberOfNotificationPerTrigger": {
          "type": "number",
          "minimum": 1
        },
        "renewInterval": {
          "type": "number",
          "description": "Cooldown before alert is armed again automatically, in second"
        },
        "devicesIds": {
          "type": "array",
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "minItems": 1,
          "uniqueItems": true
        }
      }
    },
    "AlertConditions": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "ceil",
            "type",
            "ceilComparisonType",
            "timespan",
            "aggregation"
          ],
          "properties": {
            "ceil": {
              "type": "number"
            },
            "type": {
              "type": "string",
              "enum": [
                "aggregation"
              ]
            },
            "ceilComparisonType": {
              "type": "string",
              "enum": [
                "lte",
                "gte"
              ]
            },
            "timespan": {
              "type": "number"
            },
            "startDate": {
              "type": "string",
              "format": "date-time"
            },
            "aggregation": {
              "type": "string",
              "enum": [
                "RELATIVE_HUMIDITY_MEAN",
                "RELATIVE_HUMIDITY_MIN",
                "RELATIVE_HUMIDITY_MAX",
                "TEMPERATURE_MEAN",
                "TEMPERATURE_MIN",
                "TEMPERATURE_MAX",
                "WET_TEMPERATURE_MEAN",
                "WET_TEMPERATURE_MIN",
                "WET_TEMPERATURE_MAX",
                "RAIN_FALL_MEAN_SUM",
                "RAIN_FALL_SUM",
                "RAIN_FALL_MIN",
                "RAIN_FALL_MAX",
                "MOVE_SUM",
                "INIT_SUM",
                "WIND_SPEED_MEAN",
                "WIND_SPEED_MIN",
                "WIND_SPEED_MAX",
                "WIND_GUST_MEAN",
                "WIND_GUST_MIN",
                "WIND_GUST_MAX",
                "WIND_DIRECTION_MEAN",
                "DEGREE_DAY",
                "COLD_HOURS",
                "LEAF_SENSOR_CONDUCTIVITY_MIN",
                "LEAF_SENSOR_CONDUCTIVITY_MAX",
                "LEAF_SENSOR_CONDUCTIVITY_MEAN",
                "LEAF_WETNESS",
                "LEAF_WETNESS_MEDIUM",
                "LEAF_WETNESS_HIGH"
              ]
            },
            "aggregationParams": {
              "type": "object",
              "additionalProperties": true
            }
          }
        },
        {
          "type": "object",
          "required": [
            "ceil",
            "type",
            "ceilComparisonType",
            "startDate",
            "aggregation"
          ],
          "properties": {
            "ceil": {
              "type": "number"
            },
            "type": {
              "type": "string",
              "enum": [
                "aggregation"
              ]
            },
            "ceilComparisonType": {
              "type": "string",
              "enum": [
                "lte",
                "gte"
              ]
            },
            "timespan": {
              "type": "number"
            },
            "startDate": {
              "type": "string",
              "format": "date-time"
            },
            "aggregation": {
              "type": "string",
              "enum": [
                "RELATIVE_HUMIDITY_MEAN",
                "RELATIVE_HUMIDITY_MIN",
                "RELATIVE_HUMIDITY_MAX",
                "TEMPERATURE_MEAN",
                "TEMPERATURE_MIN",
                "TEMPERATURE_MAX",
                "WET_TEMPERATURE_MEAN",
                "WET_TEMPERATURE_MIN",
                "WET_TEMPERATURE_MAX",
                "RAIN_FALL_MEAN_SUM",
                "RAIN_FALL_SUM",
                "RAIN_FALL_MIN",
                "RAIN_FALL_MAX",
                "MOVE_SUM",
                "INIT_SUM",
                "WIND_SPEED_MEAN",
                "WIND_SPEED_MIN",
                "WIND_SPEED_MAX",
                "WIND_GUST_MEAN",
                "WIND_GUST_MIN",
                "WIND_GUST_MAX",
                "WIND_DIRECTION_MEAN",
                "DEGREE_DAY",
                "COLD_HOURS",
                "LEAF_SENSOR_CONDUCTIVITY_MIN",
                "LEAF_SENSOR_CONDUCTIVITY_MAX",
                "LEAF_SENSOR_CONDUCTIVITY_MEAN",
                "LEAF_WETNESS",
                "LEAF_WETNESS_MEDIUM",
                "LEAF_WETNESS_HIGH"
              ]
            },
            "aggregationParams": {
              "type": "object",
              "properties": {
                "base": {
                  "type": "number"
                }
              }
            }
          }
        }
      ]
    },
    "AlertGroupConditions": {
      "type": "object",
      "required": [
        "type",
        "tests"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "and",
            "or"
          ]
        },
        "tests": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/AlertConditions"
          }
        }
      }
    },
    "AggregationItems": {
      "type": "object",
      "required": [
        "items",
        "aggregations"
      ],
      "properties": {
        "aggregations": {
          "$ref": "#/definitions/AggregationHash"
        },
        "aggregationsResults": {
          "$ref": "#/definitions/AggregationsResultsHash"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "minItems": 0,
          "uniqueItems": true
        }
      }
    },
    "AggregationHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/Aggregation"
        }
      }
    },
    "AggregationItem": {
      "type": "object",
      "required": [
        "item",
        "aggregations"
      ],
      "properties": {
        "item": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        },
        "entry": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1,
          "description": "Deprecated, use the `item` property instead."
        },
        "aggregations": {
          "$ref": "#/definitions/AggregationHash"
        }
      }
    },
    "Aggregation": {
      "type": "object",
      "required": [
        "contents"
      ],
      "properties": {
        "id": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        },
        "contents": {
          "$ref": "#/definitions/AggregationContents"
        }
      }
    },
    "AggregationContents": {
      "oneOf": [
        {
          "type": "object",
          "description": "Date resolve aggregation",
          "required": [
            "name",
            "type",
            "aggregation",
            "ceil",
            "devicesIds"
          ],
          "properties": {
            "name": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "date"
              ]
            },
            "aggregation": {
              "type": "string",
              "enum": [
                "DEGREE_DAY",
                "COLD_HOURS",
                "RAIN_FALL_SUM",
                "LEAF_WETNESS",
                "LEAF_WETNESS_MEDIUM",
                "LEAF_WETNESS_HIGH"
              ]
            },
            "ceil": {
              "type": "number"
            },
            "parameters": {
              "type": "object",
              "properties": {
                "base": {
                  "type": "number"
                }
              }
            },
            "devicesIds": {
              "type": "array",
              "items": {
                "type": "number",
                "pattern": "^[0-9]+$",
                "minimum": 1
              },
              "minItems": 1,
              "uniqueItems": true
            }
          }
        },
        {
          "type": "object",
          "description": "Time span value aggregation",
          "required": [
            "name",
            "type",
            "aggregation",
            "timeSpan",
            "devicesIds"
          ],
          "properties": {
            "name": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "value"
              ]
            },
            "aggregation": {
              "type": "string",
              "enum": [
                "DEGREE_DAY",
                "COLD_HOURS",
                "RAIN_FALL_SUM",
                "LEAF_WETNESS",
                "LEAF_WETNESS_MEDIUM",
                "LEAF_WETNESS_HIGH"
              ]
            },
            "timeSpan": {
              "type": "integer",
              "minimum": 1
            },
            "parameters": {
              "type": "object",
              "properties": {
                "base": {
                  "type": "number"
                }
              }
            },
            "devicesIds": {
              "type": "array",
              "items": {
                "type": "number",
                "pattern": "^[0-9]+$",
                "minimum": 1
              },
              "minItems": 1,
              "uniqueItems": true
            }
          }
        },
        {
          "type": "object",
          "description": "Date interval value aggregation",
          "required": [
            "name",
            "type",
            "aggregation",
            "startDate",
            "devicesIds"
          ],
          "properties": {
            "name": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "value"
              ]
            },
            "aggregation": {
              "type": "string",
              "enum": [
                "DEGREE_DAY",
                "COLD_HOURS",
                "RAIN_FALL_SUM",
                "LEAF_WETNESS",
                "LEAF_WETNESS_MEDIUM",
                "LEAF_WETNESS_HIGH"
              ]
            },
            "startDate": {
              "type": "string",
              "format": "date-time"
            },
            "endDate": {
              "type": "string",
              "format": "date-time"
            },
            "parameters": {
              "type": "object",
              "properties": {
                "base": {
                  "type": "number"
                }
              }
            },
            "devicesIds": {
              "type": "array",
              "items": {
                "type": "number",
                "pattern": "^[0-9]+$",
                "minimum": 1
              },
              "minItems": 1,
              "uniqueItems": true
            }
          }
        }
      ]
    },
    "AggregationResult": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "DEGREE_DAY",
            "COLD_HOURS",
            "RAIN_FALL_SUM",
            "LEAF_WETNESS",
            "LEAF_WETNESS_MEDIUM",
            "LEAF_WETNESS_HIGH"
          ]
        }
      },
      "patternProperties": {
        "^DEGREE_DAY|COLD_HOURS|RAIN_FALL_SUM|LEAF_WETNESS|LEAF_WETNESS_MEDIUM|LEAF_WETNESS_HIGH$": {
          "type": "object",
          "properties": {
            "value": {
              "type": "number"
            }
          }
        }
      }
    },
    "AggregationsResultsHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/AggregationResult"
        }
      }
    },
    "DevicesItems": {
      "type": "object",
      "required": [
        "items",
        "models",
        "devices",
        "devicesStatuses",
        "devicesSummaries"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "minItems": 0,
          "uniqueItems": true
        },
        "total": {
          "type": "number",
          "min": 0
        },
        "models": {
          "$ref": "#/definitions/ModelHash"
        },
        "devicesStatuses": {
          "$ref": "#/definitions/DeviceStatusesItemsHash"
        },
        "devicesSummaries": {
          "$ref": "#/definitions/SummariesItemsHash"
        },
        "devices": {
          "$ref": "#/definitions/DeviceHash"
        }
      }
    },
    "DeviceItem": {
      "type": "object",
      "required": [
        "item",
        "models",
        "devices",
        "devicesStatuses"
      ],
      "properties": {
        "item": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        },
        "entry": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1,
          "description": "Deprecated, use the `item` property instead."
        },
        "models": {
          "$ref": "#/definitions/ModelHash"
        },
        "devicesStatuses": {
          "$ref": "#/definitions/DeviceStatusesItemsHash"
        },
        "devices": {
          "$ref": "#/definitions/DeviceHash"
        }
      }
    },
    "PartnerDevicesItems": {
      "type": "object",
      "required": [
        "items",
        "models",
        "devices",
        "devicesStatuses",
        "organisations",
        "users"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "minItems": 0,
          "uniqueItems": true
        },
        "total": {
          "type": "number",
          "min": 0
        },
        "models": {
          "$ref": "#/definitions/ModelHash"
        },
        "devicesStatuses": {
          "$ref": "#/definitions/DeviceStatusesItemsHash"
        },
        "devices": {
          "$ref": "#/definitions/DeviceHash"
        },
        "users": {
          "$ref": "#/definitions/UserHash"
        },
        "organisations": {
          "$ref": "#/definitions/OrganisationHash"
        }
      }
    },
    "DeviceHash": {
      "type": "object",
      "patternProperties": {
        "undefined": {
          "$ref": "#/definitions/Device"
        }
      }
    },
    "Device": {
      "type": "object",
      "required": [
        "contents"
      ],
      "properties": {
        "id": {
          "type": "number"
        },
        "contents": {
          "$ref": "#/definitions/DeviceContents"
        },
        "accessPeriods": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "deviceId",
              "userId",
              "type",
              "startDate",
              "endDate"
            ],
            "properties": {
              "deviceId": {
                "type": "number",
                "pattern": "^[0-9]+$",
                "minimum": 1
              },
              "userId": {
                "type": "number",
                "pattern": "^[0-9]+$",
                "minimum": 1
              },
              "moduleId": {
                "type": "number",
                "pattern": "^[0-9]+$",
                "minimum": 1
              },
              "delegatorId": {
                "type": "number",
                "pattern": "^[0-9]+$",
                "minimum": 1
              },
              "parameters": {
                "type": "object",
                "additionalProperties": true
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "owner",
                  "user",
                  "guest",
                  "collaborator",
                  "partner"
                ]
              },
              "situation": {
                "type": "string",
                "enum": [
                  "unknown",
                  "greenhouse",
                  "outdoor-covered",
                  "outdoor-influenced",
                  "outdoor-isolated"
                ]
              },
              "startDate": {
                "type": "string",
                "format": "date-time"
              },
              "endDate": {
                "type": "string",
                "format": "date-time"
              },
              "deletionDate": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        },
        "identification": {
          "type": "string",
          "pattern": "^(WCP?|RC|SC|UMO|LC)[0-9]{6}$"
        },
        "calibrations": {
          "type": "object",
          "patternProperties": {
            "^(RELATIVE_HUMIDITY|TEMPERATURE|WET_TEMPERATURE|RAIN_FALL|WIND_SPEED|WIND_GUST|WIND_DIRECTION|MOVE|LEAF_SENSOR_CONDUCTIVITY|RH_AIR_H1|TEMP_AIR_H1|RAIN_TIC|WIND_MEAN|WIND_MAX)$": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "lastMeasure"
                ],
                "properties": {
                  "startDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "ratio": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "serial": {
          "type": "string",
          "pattern": "^[A-Z0-9]+$"
        },
        "modelId": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        },
        "userId": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        },
        "organisationId": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        }
      }
    },
    "DeviceContents": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "DeviceLiveAggregation": {
      "type": "object",
      "additionalProperties": false,
      "patternProperties": {
        "RELATIVE_HUMIDITY_MEAN|RELATIVE_HUMIDITY_MIN|RELATIVE_HUMIDITY_MAX|TEMPERATURE_MEAN|TEMPERATURE_MIN|TEMPERATURE_MAX|WET_TEMPERATURE_MEAN|WET_TEMPERATURE_MIN|WET_TEMPERATURE_MAX|RAIN_FALL_MEAN_SUM|RAIN_FALL_SUM|RAIN_FALL_MIN|RAIN_FALL_MAX|MOVE_SUM|INIT_SUM|WIND_SPEED_MEAN|WIND_SPEED_MIN|WIND_SPEED_MAX|WIND_GUST_MEAN|WIND_GUST_MIN|WIND_GUST_MAX|WIND_DIRECTION_MEAN|DEGREE_DAY|COLD_HOURS|LEAF_SENSOR_CONDUCTIVITY_MIN|LEAF_SENSOR_CONDUCTIVITY_MAX|LEAF_SENSOR_CONDUCTIVITY_MEAN|LEAF_WETNESS|LEAF_WETNESS_MEDIUM|LEAF_WETNESS_HIGH": {
          "type": "object",
          "patternProperties": {
            "current|one_hour|three_hours|one_day|one_week|today|yesterday|this_week|last_seven_days": {
              "type": "number"
            }
          }
        }
      }
    },
    "DeviceLiveAggregationHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/DeviceLiveAggregation"
        }
      }
    },
    "DeviceLiveAggregationItems": {
      "type": "object",
      "required": [
        "items",
        "devicesLiveAggregations"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "minItems": 0,
          "uniqueItems": true
        },
        "devicesLiveAggregations": {
          "$ref": "#/definitions/DeviceLiveAggregationHash"
        }
      }
    },
    "ModelHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/Model"
        }
      }
    },
    "Model": {
      "type": "object",
      "required": [
        "contents"
      ],
      "properties": {
        "id": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        },
        "contents": {
          "$ref": "#/definitions/ModelContents"
        }
      }
    },
    "ModelContents": {
      "type": "object",
      "required": [
        "name",
        "conception",
        "manufacturing",
        "calibration",
        "weight"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "externalDiameter": {
          "type": "number"
        },
        "conception": {
          "type": "string"
        },
        "manufacturing": {
          "type": "string"
        },
        "calibration": {
          "type": "string"
        },
        "height": {
          "type": "number"
        },
        "weight": {
          "type": "number"
        }
      }
    },
    "ModuleItems": {
      "type": "object",
      "required": [
        "items",
        "modules"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "minItems": 0,
          "uniqueItems": true
        },
        "modules": {
          "$ref": "#/definitions/ModuleHash"
        }
      }
    },
    "ModuleItem": {
      "type": "object",
      "required": [
        "item",
        "modules"
      ],
      "properties": {
        "item": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        },
        "entry": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1,
          "description": "Deprecated, use the `item` property instead."
        },
        "modules": {
          "$ref": "#/definitions/ModuleHash"
        },
        "organisations": {
          "$ref": "#/definitions/OrganisationHash"
        }
      }
    },
    "ModuleHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/Module"
        }
      }
    },
    "Module": {
      "type": "object",
      "required": [
        "contents"
      ],
      "properties": {
        "id": {
          "type": "number",
          "pattern": "^[0-9]+$"
        },
        "organisationId": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        },
        "contents": {
          "$ref": "#/definitions/ModuleContents"
        }
      }
    },
    "ModuleContents": {
      "type": "object",
      "required": [
        "name",
        "code",
        "type"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "email",
            "ftp",
            "partner",
            "s3"
          ]
        }
      }
    },
    "ApplicationItems": {
      "type": "object",
      "required": [
        "items",
        "applications"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
          },
          "minItems": 0,
          "uniqueItems": true
        },
        "applications": {
          "$ref": "#/definitions/ApplicationHash"
        }
      }
    },
    "ApplicationItem": {
      "type": "object",
      "required": [
        "item",
        "applications"
      ],
      "properties": {
        "item": {
          "type": "string",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "entry": {
          "type": "string",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
          "description": "Deprecated, use the `item` property instead."
        },
        "applications": {
          "$ref": "#/definitions/ApplicationHash"
        }
      }
    },
    "ApplicationHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$": {
          "$ref": "#/definitions/Application"
        }
      }
    },
    "Application": {
      "type": "object",
      "required": [
        "contents"
      ],
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "userId": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        },
        "organisationId": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        },
        "truncatedSecret": {
          "type": "string",
          "description": "The API secret of the application truncated."
        },
        "secret": {
          "type": "string",
          "description": "The API secret of the application (provided only at its creation)."
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time"
        },
        "contents": {
          "$ref": "#/definitions/ApplicationContents"
        }
      }
    },
    "ApplicationContents": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "name",
        "description",
        "isActive",
        "scopes",
        "grantTypes",
        "callbackURL"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        },
        "scopes": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "string"
          }
        },
        "grantTypes": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "string"
          }
        },
        "callbackURL": {
          "type": "string",
          "format": "uri"
        }
      }
    },
    "OperationsItems": {
      "type": "object",
      "required": [
        "items",
        "operations"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "minItems": 0,
          "uniqueItems": true
        },
        "operations": {
          "$ref": "#/definitions/OperationHash"
        }
      }
    },
    "OperationItem": {
      "type": "object",
      "required": [
        "item",
        "operations"
      ],
      "properties": {
        "item": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        },
        "entry": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1,
          "description": "Deprecated, use the `item` property instead."
        },
        "operations": {
          "$ref": "#/definitions/OperationHash"
        }
      }
    },
    "OperationHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/Operation"
        }
      }
    },
    "Operation": {
      "type": "object",
      "required": [
        "contents"
      ],
      "properties": {
        "id": {
          "type": "number",
          "pattern": "^[0-9]+$"
        },
        "contents": {
          "$ref": "#/definitions/OperationContents"
        }
      }
    },
    "OperationContents": {
      "type": "object",
      "required": [
        "name",
        "type",
        "devicesIds",
        "startDate",
        "details"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "irrigation",
            "spraying",
            "seeding"
          ]
        },
        "devicesIds": {
          "type": "array",
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "minItems": 0,
          "uniqueItems": true
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "details": {
          "type": "object",
          "additionalProperties": true
        }
      }
    },
    "Notification": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "type": {
          "type": "string",
          "enum": [
            "app",
            "user",
            "partner",
            "module",
            "alert",
            "device"
          ]
        },
        "data": {
          "type": "object",
          "additionalProperties": true
        },
        "message": {
          "type": "string"
        },
        "read": {
          "type": "boolean"
        },
        "links": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "label",
              "url"
            ],
            "properties": {
              "label": {
                "type": "string",
                "description": "Anchor text"
              },
              "tooltip": {
                "type": "string",
                "description": "Anchor tooltip text"
              },
              "url": {
                "type": "string"
              }
            }
          }
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "label",
              "operationId",
              "parameters"
            ],
            "properties": {
              "label": {
                "type": "string",
                "description": "Button text"
              },
              "tooltip": {
                "type": "string",
                "description": "Button tooltip text"
              },
              "operationId": {
                "type": "string",
                "description": "Operation id binded to the action"
              },
              "parameters": {
                "type": "string",
                "description": "JSON payload of the action parameters"
              }
            }
          }
        },
        "attachments": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "label",
              "url"
            ],
            "properties": {
              "label": {
                "type": "string"
              },
              "operationId": {
                "type": "string",
                "description": "Operation id binded to the action"
              },
              "parameters": {
                "type": "string",
                "description": "JSON payload of the action parameters"
              }
            }
          }
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "NotificationHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$": {
          "$ref": "#/definitions/Notification"
        }
      }
    },
    "NotificationsItems": {
      "type": "object",
      "required": [
        "items",
        "notifications",
        "sinceCursor"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
          },
          "minItems": 0,
          "uniqueItems": true
        },
        "notifications": {
          "$ref": "#/definitions/NotificationHash"
        },
        "nextCursor": {
          "type": "string",
          "description": "Opaque cursor you can reuse to get older items."
        },
        "sinceCursor": {
          "type": "string",
          "description": "Opaque cursor you can reuse to get fresher items."
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "transactionId": {
          "type": "string"
        },
        "code": {
          "type": "string",
          "pattern": "^E_[a-zA-Z0-9_]+$"
        }
      }
    },
    "CheckoutContents": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "ownerId",
        "currency",
        "products",
        "customer",
        "delivery",
        "payment"
      ],
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "created",
            "sent",
            "viewed",
            "inTrial",
            "trialEnded",
            "clicked",
            "ended"
          ]
        },
        "type": {
          "type": "string",
          "enum": [
            "web",
            "tradeshow"
          ]
        },
        "ownerId": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        },
        "currency": {
          "type": "string",
          "enum": [
            "EUR",
            "GBP"
          ]
        },
        "hubspotDealId": {
          "type": "string"
        },
        "couponCodeId": {
          "type": "string"
        },
        "products": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "id",
              "quantity"
            ],
            "properties": {
              "id": {
                "type": "number",
                "pattern": "^[0-9]+$",
                "minimum": 1
              },
              "quantity": {
                "type": "number",
                "minimum": 1
              }
            }
          }
        },
        "customer": {
          "type": "object",
          "required": [
            "locale",
            "firstname",
            "lastname",
            "email"
          ],
          "properties": {
            "locale": {
              "type": "string",
              "pattern": "^[a-z]{2}(-[A-Z]{2,3})?$",
              "maxLength": 5
            },
            "timeZone": {
              "type": "string",
              "pattern": "^[a-zA-Z]+/[a-zA-Z]+$",
              "maxLength": 50
            },
            "firstname": {
              "type": "string"
            },
            "lastname": {
              "type": "string"
            },
            "email": {
              "type": "string",
              "format": "email"
            },
            "country": {
              "type": "string"
            },
            "phone": {
              "type": "string"
            }
          }
        },
        "delivery": {
          "type": "object",
          "required": [
            "type",
            "zone"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "sending",
                "onlyTripod"
              ]
            },
            "zone": {
              "type": "string",
              "enum": [
                "France",
                "Europe"
              ]
            }
          }
        },
        "tradeshow": {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string"
            }
          }
        },
        "payment": {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "immediate",
                "delayed"
              ]
            },
            "delayedDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date for delayed payment"
            }
          }
        }
      }
    },
    "Checkout": {
      "type": "object",
      "required": [
        "contents"
      ],
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "url": {
          "type": "string"
        },
        "chargebeeHostedPage": {
          "type": "object",
          "additionalProperties": true
        },
        "chargebeeEstimate": {
          "type": "object",
          "additionalProperties": true
        },
        "contents": {
          "$ref": "#/definitions/CheckoutContents"
        }
      }
    },
    "CheckoutHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$": {
          "$ref": "#/definitions/Checkout"
        }
      }
    },
    "CheckoutItem": {
      "type": "object",
      "required": [
        "item",
        "checkouts"
      ],
      "properties": {
        "item": {
          "type": "string",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        },
        "checkouts": {
          "$ref": "#/definitions/CheckoutHash"
        }
      }
    },
    "CheckoutItems": {
      "type": "object",
      "required": [
        "items",
        "checkouts"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
          }
        },
        "checkouts": {
          "$ref": "#/definitions/CheckoutHash"
        }
      }
    },
    "DevicesMovesHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/DeviceMoves"
        }
      }
    },
    "DeviceMoves": {
      "type": "object",
      "required": [
        "count",
        "dates"
      ],
      "properties": {
        "count": {
          "type": "number"
        },
        "dates": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    },
    "DeviceStatistics": {
      "type": "object",
      "required": [
        "item",
        "models",
        "devices",
        "measures"
      ],
      "properties": {
        "models": {
          "$ref": "#/definitions/ModelHash"
        },
        "devices": {
          "$ref": "#/definitions/DeviceHash"
        },
        "item": {
          "type": "string",
          "pattern": "^[0-9]+$",
          "description": "Deprecated, use the `item` property instead."
        },
        "entry": {
          "type": "string",
          "pattern": "^[0-9]+$",
          "description": "Deprecated, use the `item` property instead."
        },
        "measures": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": true,
            "properties": {
              "key": {
                "type": "number"
              },
              "docCount": {
                "type": "number"
              }
            }
          }
        }
      }
    },
    "DeviceDegreeDays": {
      "type": "object",
      "required": [
        "item",
        "models",
        "devices",
        "degreeDays"
      ],
      "properties": {
        "models": {
          "$ref": "#/definitions/ModelHash"
        },
        "devices": {
          "$ref": "#/definitions/DeviceHash"
        },
        "item": {
          "type": "number",
          "pattern": "^[0-9]+$"
        },
        "entry": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "description": "Deprecated, use the `item` property instead."
        },
        "degreeDays": {
          "$ref": "#/definitions/DeviceDegreeDayItemsHash"
        }
      }
    },
    "DeviceDegreeDayItemsHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/DeviceDegreeDay"
        }
      }
    },
    "DeviceDegreeDay": {
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "date",
          "count",
          "min",
          "max",
          "mean"
        ],
        "properties": {
          "date": {
            "type": "string",
            "format": "date"
          },
          "count": {
            "type": "number"
          },
          "min": {
            "type": "number"
          },
          "max": {
            "type": "number"
          },
          "mean": {
            "type": "number"
          }
        }
      }
    },
    "DeviceSummaryEntry": {
      "type": "object",
      "required": [
        "item",
        "models",
        "devices",
        "devicesSummaries"
      ],
      "properties": {
        "models": {
          "$ref": "#/definitions/ModelHash"
        },
        "devices": {
          "$ref": "#/definitions/DeviceHash"
        },
        "devicesSummaries": {
          "$ref": "#/definitions/SummariesItemsHash"
        },
        "item": {
          "type": "string",
          "pattern": "^[0-9]+$"
        },
        "entry": {
          "type": "string",
          "pattern": "^[0-9]+$",
          "description": "Deprecated, use the `item` property instead."
        }
      }
    },
    "SummariesItemsHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/DeviceSummaryItem"
        }
      }
    },
    "DeviceSummaryItem": {
      "type": "object",
      "patternProperties": {
        "^(RELATIVE_HUMIDITY|TEMPERATURE|WET_TEMPERATURE|RAIN_FALL|WIND_SPEED|WIND_GUST|WIND_DIRECTION|MOVE|LEAF_SENSOR_CONDUCTIVITY|RH_AIR_H1|TEMP_AIR_H1|RAIN_TIC|WIND_MEAN|WIND_MAX)$": {
          "type": "object",
          "required": [
            "lastMeasure"
          ],
          "properties": {
            "date": {
              "type": "string",
              "format": "date-time"
            },
            "lastMeasure": {
              "type": "number"
            },
            "lastHour": {
              "type": "number"
            },
            "last3Hours": {
              "type": "number"
            },
            "lastDay": {
              "type": "number"
            },
            "lastWeek": {
              "type": "number"
            }
          }
        }
      }
    },
    "DeviceForecasts": {
      "type": "object",
      "required": [
        "item",
        "models",
        "devices",
        "forecasts"
      ],
      "properties": {
        "models": {
          "$ref": "#/definitions/ModelHash"
        },
        "devices": {
          "$ref": "#/definitions/DeviceHash"
        },
        "item": {
          "type": "string",
          "pattern": "^[0-9]+$"
        },
        "entry": {
          "type": "string",
          "pattern": "^[0-9]+$",
          "description": "Deprecated, use the `item` property instead."
        },
        "forecasts": {
          "type": "object",
          "additionalProperties": true
        }
      }
    },
    "DeviceStatusesItemsHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/DeviceStatusItem"
        }
      }
    },
    "DeviceStatusItem": {
      "type": "object",
      "required": [
        "contents"
      ],
      "properties": {
        "id": {
          "type": "number",
          "pattern": "^[0-9]+$"
        },
        "measuresCount": {
          "type": "number"
        },
        "contents": {
          "$ref": "#/definitions/DeviceStatus"
        }
      }
    },
    "DeviceStatus": {
      "type": "object",
      "required": [
        "firmware",
        "battery",
        "signal",
        "latitude",
        "longitude",
        "altitude",
        "locationSatellites",
        "locationPrecision",
        "lastLocationDate",
        "lastLocationFailureDate",
        "lastMoveDate",
        "lastRebootDate",
        "lastStatusUpdateDate"
      ],
      "properties": {
        "firmware": {
          "type": "string"
        },
        "battery": {
          "type": "number"
        },
        "signal": {
          "type": "number"
        },
        "latitude": {
          "minimum": -90,
          "maximum": 90,
          "type": "number"
        },
        "longitude": {
          "minimum": -180,
          "maximum": 180,
          "type": "number"
        },
        "altitude": {
          "type": "number"
        },
        "locationSatellites": {
          "type": "number"
        },
        "locationPrecision": {
          "type": "number"
        },
        "lastLocationDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastLocationFailureDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastRebootDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastMoveDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastStatusUpdateDate": {
          "type": "string",
          "format": "date-time"
        },
        "activeDate": {
          "type": "string",
          "format": "date-time"
        },
        "manufacturedDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CollaboratorsCollection": {
      "type": "object",
      "required": [
        "items",
        "collaborators",
        "users",
        "devices"
      ],
      "properties": {
        "users": {
          "$ref": "#/definitions/UserHash"
        },
        "devices": {
          "$ref": "#/definitions/DeviceHash"
        },
        "collaborators": {
          "$ref": "#/definitions/CollaboratorsItemsHash"
        },
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$"
          }
        }
      }
    },
    "CollaboratorEntry": {
      "type": "object",
      "required": [
        "item",
        "collaborators",
        "users",
        "devices"
      ],
      "properties": {
        "users": {
          "$ref": "#/definitions/UserHash"
        },
        "devices": {
          "$ref": "#/definitions/DeviceHash"
        },
        "collaborators": {
          "$ref": "#/definitions/CollaboratorsItemsHash"
        },
        "item": {
          "type": "number",
          "pattern": "^[0-9]+$"
        },
        "entry": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "description": "Deprecated, use the `item` property instead."
        }
      }
    },
    "CollaboratorsItemsHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/CollaboratorItem"
        }
      }
    },
    "CollaboratorItem": {
      "type": "object",
      "required": [
        "contents"
      ],
      "properties": {
        "id": {
          "type": "number",
          "pattern": "^[0-9]+$"
        },
        "contents": {
          "$ref": "#/definitions/Collaborator"
        }
      }
    },
    "CollaboratorInvite": {
      "type": "object",
      "required": [
        "sharedDevicesIds",
        "user"
      ],
      "properties": {
        "user": {
          "$ref": "#/definitions/PartialUser"
        },
        "sharedDevicesIds": {
          "type": "array",
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$"
          }
        },
        "callbackPath": {
          "type": "string"
        }
      }
    },
    "Collaborator": {
      "type": "object",
      "required": [
        "collaboratorUserId",
        "sharedDevicesIds"
      ],
      "properties": {
        "collaboratorUserId": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        },
        "sharedDevicesIds": {
          "type": "array",
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          }
        }
      }
    },
    "GuestsCollection": {
      "type": "object",
      "required": [
        "items",
        "guests",
        "users",
        "devices"
      ],
      "properties": {
        "users": {
          "$ref": "#/definitions/UserHash"
        },
        "devices": {
          "$ref": "#/definitions/DeviceHash"
        },
        "guests": {
          "$ref": "#/definitions/GuestsItemsHash"
        },
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$"
          }
        }
      }
    },
    "GuestEntry": {
      "type": "object",
      "required": [
        "item",
        "guests",
        "users",
        "devices"
      ],
      "properties": {
        "users": {
          "$ref": "#/definitions/UserHash"
        },
        "devices": {
          "$ref": "#/definitions/DeviceHash"
        },
        "guests": {
          "$ref": "#/definitions/GuestsItemsHash"
        },
        "item": {
          "type": "number",
          "pattern": "^[0-9]+$"
        },
        "entry": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "description": "Deprecated, use the `item` property instead."
        }
      }
    },
    "GuestsItemsHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/GuestItem"
        }
      }
    },
    "GuestItem": {
      "type": "object",
      "required": [
        "contents"
      ],
      "properties": {
        "id": {
          "type": "number",
          "pattern": "^[0-9]+$"
        },
        "contents": {
          "$ref": "#/definitions/Guest"
        }
      }
    },
    "GuestInvite": {
      "type": "object",
      "required": [
        "sharedDevicesIds",
        "user"
      ],
      "properties": {
        "user": {
          "$ref": "#/definitions/PartialUser"
        },
        "sharedDevicesIds": {
          "type": "array",
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$"
          }
        },
        "callbackPath": {
          "type": "string"
        }
      }
    },
    "Guest": {
      "type": "object",
      "required": [
        "guestUserId",
        "sharedDevicesIds"
      ],
      "properties": {
        "guestUserId": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        },
        "sharedDevicesIds": {
          "type": "array",
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          }
        }
      }
    },
    "MeasuresItemsHash": {
      "type": "object",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/definitions/MeasureItem"
        }
      }
    },
    "MeasureItem": {
      "type": "object",
      "required": [
        "contents"
      ],
      "properties": {
        "id": {
          "type": "number",
          "pattern": "^[0-9]+$"
        },
        "contents": {
          "$ref": "#/definitions/Measure"
        }
      }
    },
    "Measure": {
      "type": "object",
      "required": [
        "deviceId",
        "measures"
      ],
      "properties": {
        "deviceId": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "measures": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "RELATIVE_HUMIDITY",
              "TEMPERATURE",
              "WET_TEMPERATURE",
              "RAIN_FALL",
              "WIND_SPEED",
              "WIND_GUST",
              "WIND_DIRECTION",
              "MOVE",
              "LEAF_SENSOR_CONDUCTIVITY",
              "RH_AIR_H1",
              "TEMP_AIR_H1",
              "RAIN_TIC",
              "WIND_MEAN",
              "WIND_MAX"
            ]
          }
        }
      }
    },
    "Emails": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "html": {
            "type": "string"
          },
          "from": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string"
            }
          },
          "to": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "Session": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "token",
        "expirationDate",
        "userId",
        "organisationId"
      ],
      "properties": {
        "token": {
          "type": "string"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time"
        },
        "userId": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        },
        "organisationId": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        },
        "organisationsIds": {
          "type": "array",
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "roles": {
          "type": "array",
          "minItems": 1,
          "maxItems": 2,
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "ROLE_USER",
              "ROLE_ADMIN"
            ]
          }
        }
      }
    }
  },
  "host": "api.sencrop.com",
  "basePath": "/v1",
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    },
    "bearerAuth": {
      "type": "apiKey",
      "in": "query",
      "name": "access_token"
    },
    "sencropOAuth2Implicit": {
      "type": "oauth2",
      "authorizationUrl": "/master/oauth2/authorize",
      "flow": "implicit",
      "scopes": {
        "user": "Access to the user account",
        "organization": "Access to the user organisations",
        "partner": "Partner access to user's devices",
        "all": "Full access to the user's resources"
      }
    },
    "sencropOAuth2Code": {
      "type": "oauth2",
      "authorizationUrl": "/master/oauth2/authorize",
      "tokenUrl": "/master/oauth2/token",
      "in": "header",
      "flow": "accessCode",
      "scopes": {
        "user": "Access to the user account",
        "organization": "Access to the user organisations",
        "partner": "Partner access to user's devices",
        "all": "Full access to the user's resources"
      }
    },
    "sencropOAuth2Password": {
      "type": "oauth2",
      "tokenUrl": "/master/oauth2/token",
      "flow": "password",
      "scopes": {
        "user": "Access to the user account",
        "organization": "Access to the user organisations",
        "partner": "Partner access to user's devices",
        "all": "Full access to the user's resources"
      }
    }
  }
}