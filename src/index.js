// WARNING: This file is automatically generated
// do not change it in place it would be overriden
// in the next build
'use strict';

const querystring = require('querystring');
const axios = require('axios');
const {
  cleanQuery,
  sortMultipleQuery, // eslint-disable-line
} = require('./lib');

/**
 * API to consume Sencrop data
 * @module API
 * @version 1.0.0
 */
const API = {
  getPing,
  getCrops,
  getModules,
  postSignupCheck,
  postLostPassword,
  putPassword,
  postLogin,
  postVerify,
  postPartnerTokenRequest,
  postPartnerToken,
  getPartnerDevices,
  putPartnerModuleParameters,
  postUser,
  getUser,
  putUser,
  getUserGuests,
  postUserGuest,
  putUserGuest,
  deleteUserGuest,
  getUserCollaborators,
  postUserCollaborator,
  putUserCollaborator,
  deleteUserCollaborator,
  getUserAggregations,
  postUserAggregation,
  getUserAggregation,
  putUserAggregation,
  deleteUserAggregation,
  getUserDevices,
  postUserDevice,
  getUserDevicePositions,
  getUserDevice,
  putUserDevice,
  deleteUserDevice,
  getUserDeviceModules,
  putUserDeviceModule,
  deleteUserDeviceModule,
  putUserDeviceShares,
  getUserDeviceStatistics,
  getUserDeviceRawData,
  getUserDeviceHourlyData,
  getUserDeviceDailyData,
  getUserDeviceContinuousStatistics,
  getUserDeviceSummary,
  getUserDeviceForecasts,
  getUserForecasts,
  getUserDailyData,
  getUserHourlyData,
  getUserPreferences,
  putUserPreferences,
  getOrganisationOperations,
  postOrganisationOperation,
  getOrganisationOperation,
  putOrganisationOperation,
  deleteOrganisationOperation,
  getUserAlerts,
  postUserAlert,
  putUserAlert,
  deleteUserAlert,
  postOrganisationDeprecated,
  postOrganisation,
  getOrganisation,
  putOrganisation,
  postOrganisationMembersMigration,
  postOrganisationUser,
  putOrganisationUser,
  deleteOrganisationUser,
  postOrganisationPlace,
  putOrganisationPlace,
  getWeatherLive,
};

/**
 * Checks API's availability.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getPing(_, options) {
  const method = 'get';
  let urlParts = ['ping'];
  let headers = {};
  let qs = cleanQuery({});
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Get the crops
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getCrops(_, options) {
  const method = 'get';
  let urlParts = ['crops'];
  let headers = {};
  let qs = cleanQuery({});
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Get the modules
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getModules(_, options) {
  const method = 'get';
  let urlParts = ['modules'];
  let headers = {};
  let qs = cleanQuery({});
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Hit the server to check the email can be used to signup.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {object} parameters.body
 * The email to check
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postSignupCheck({ authorization, body } = {}, options) {
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }

  const method = 'post';
  let urlParts = ['utils', 'checkSignup'];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({});
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Request a password change e-mail.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {object} parameters.body
 * The infos to send the mail
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postLostPassword({ body } = {}, options) {
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }

  const method = 'post';
  let urlParts = ['password', 'lost'];
  let headers = {};
  let qs = cleanQuery({});
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Change a user password
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {object} parameters.body
 * The infos to change the password
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putPassword({ body } = {}, options) {
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }

  const method = 'put';
  let urlParts = ['password'];
  let headers = {};
  let qs = cleanQuery({});
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Log a user in
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {object} parameters.body
 * The infos to log in
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postLogin({ body } = {}, options) {
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }

  const method = 'post';
  let urlParts = ['users', 'sign_in'];
  let headers = {};
  let qs = cleanQuery({});
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Verify a user
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {object} parameters.body
 * Verify the user
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postVerify({ body } = {}, options) {
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }

  const method = 'post';
  let urlParts = ['users', 'verify'];
  let headers = {};
  let qs = cleanQuery({});
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Request a user token
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.partnerId
 * The partner organisation id,
 * @param {object} parameters.body
 * Request a user token,
 * @param {string} parameters.authorization
 * Authorization with Basic mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postPartnerTokenRequest(
  { partnerId, body, authorization } = {},
  options
) {
  if (partnerId == null) {
    throw new Error(
      'Missing required parameter : partnerId. Value : ' + partnerId
    );
  }
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'post';
  let urlParts = ['partners', partnerId, 'tokenRequests'];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({});
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Create a user token
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.partnerId
 * The partner organisation id,
 * @param {object} parameters.body
 * Create a user token,
 * @param {string} parameters.authorization
 * Authorization with Basic mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postPartnerToken({ partnerId, body, authorization } = {}, options) {
  if (partnerId == null) {
    throw new Error(
      'Missing required parameter : partnerId. Value : ' + partnerId
    );
  }
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'post';
  let urlParts = ['partners', partnerId, 'tokens'];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({});
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Retrieves the devices a partner has access to.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.partnerId
 * The partner organisation id,
 * @param {number} parameters.limit
 * The number of items to retrieve,
 * @param {number} parameters.start
 * The index in results,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getPartnerDevices(
  { partnerId, limit, start, authorization, accessToken } = {},
  options
) {
  if (partnerId == null) {
    throw new Error(
      'Missing required parameter : partnerId. Value : ' + partnerId
    );
  }
  if (limit == null) {
    throw new Error('Missing required parameter : limit. Value : ' + limit);
  }
  if (start == null) {
    throw new Error('Missing required parameter : start. Value : ' + start);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'get';
  let urlParts = ['partners', partnerId, 'devices'];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    limit: limit,
    start: start,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Update an partner module parameters
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.partnerId
 * The partner organisation id,
 * @param {number} parameters.partnerUserId
 * The partner user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {number} parameters.moduleId
 * The module id,
 * @param {object} parameters.body
 * The module parameters,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putPartnerModuleParameters(
  {
    partnerId,
    partnerUserId,
    deviceId,
    moduleId,
    body,
    authorization,
    accessToken,
  } = {},
  options
) {
  if (partnerId == null) {
    throw new Error(
      'Missing required parameter : partnerId. Value : ' + partnerId
    );
  }
  if (partnerUserId == null) {
    throw new Error(
      'Missing required parameter : partnerUserId. Value : ' + partnerUserId
    );
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId
    );
  }
  if (moduleId == null) {
    throw new Error(
      'Missing required parameter : moduleId. Value : ' + moduleId
    );
  }
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'put';
  let urlParts = [
    'partners',
    partnerId,
    'users',
    partnerUserId,
    'devices',
    deviceId,
    'modules',
    moduleId,
    'parameters',
  ];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Create a new user.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {object} parameters.body
 * The new user
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postUser({ body } = {}, options) {
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }

  const method = 'post';
  let urlParts = ['users'];
  let headers = {};
  let qs = cleanQuery({});
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Get a user's profile.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUser({ userId, authorization, accessToken } = {}, options) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'get';
  let urlParts = ['users', userId];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Update a user's profile.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {object} parameters.body
 * The new user,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUser({ userId, body, authorization, accessToken } = {}, options) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'put';
  let urlParts = ['users', userId];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Get a user's guests.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserGuests({ userId, authorization, accessToken } = {}, options) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'guests'];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Create a user's guest.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} [parameters.organisationIdTarget]
 * The organisation id to add the collaborator to,
 * @param {object} parameters.body
 * The user's guest,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postUserGuest(
  { userId, organisationIdTarget, body, authorization, accessToken } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'post';
  let urlParts = ['users', userId, 'guests'];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    organisationIdTarget: organisationIdTarget,
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Update a user's guest.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.guestId
 * The guest id,
 * @param {object} parameters.body
 * The user's guest,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserGuest(
  { userId, guestId, body, authorization, accessToken } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (guestId == null) {
    throw new Error('Missing required parameter : guestId. Value : ' + guestId);
  }
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'put';
  let urlParts = ['users', userId, 'guests', guestId];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Delete a user's guest.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} [parameters.organisationIdTarget]
 * The organisation id to remove the collaborator to,
 * @param {number} parameters.guestId
 * The guest id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteUserGuest(
  { userId, organisationIdTarget, guestId, authorization, accessToken } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (guestId == null) {
    throw new Error('Missing required parameter : guestId. Value : ' + guestId);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'delete';
  let urlParts = ['users', userId, 'guests', guestId];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    organisationIdTarget: organisationIdTarget,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Get a user's collaborators.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserCollaborators(
  { userId, authorization, accessToken } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'collaborators'];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Create a user's collaborator.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} [parameters.organisationIdTarget]
 * The organisation id to add the collaborator to,
 * @param {object} parameters.body
 * The user's collaborator,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postUserCollaborator(
  { userId, organisationIdTarget, body, authorization, accessToken } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'post';
  let urlParts = ['users', userId, 'collaborators'];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    organisationIdTarget: organisationIdTarget,
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Update a user's collaborator.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.collaboratorId
 * The collaborator id,
 * @param {object} parameters.body
 * The user's collaborator,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserCollaborator(
  { userId, collaboratorId, body, authorization, accessToken } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (collaboratorId == null) {
    throw new Error(
      'Missing required parameter : collaboratorId. Value : ' + collaboratorId
    );
  }
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'put';
  let urlParts = ['users', userId, 'collaborators', collaboratorId];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Delete a user's collaborator.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} [parameters.organisationIdTarget]
 * The organisation id to remove the collaborator to,
 * @param {number} parameters.collaboratorId
 * The collaborator id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteUserCollaborator(
  {
    userId,
    organisationIdTarget,
    collaboratorId,
    authorization,
    accessToken,
  } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (collaboratorId == null) {
    throw new Error(
      'Missing required parameter : collaboratorId. Value : ' + collaboratorId
    );
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'delete';
  let urlParts = ['users', userId, 'collaborators', collaboratorId];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    organisationIdTarget: organisationIdTarget,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Get a user's aggregations.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {boolean} [parameters.compute]
 * Wether the aggregations should be computed,
 * @param {boolean} [parameters.patched]
 * Wether you want to get only original data or eventually patched ones to avoid holes.,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserAggregations(
  { userId, compute, patched, authorization, accessToken } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'aggregations'];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    compute: compute,
    patched: patched,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Create a user's aggregation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {object} parameters.body
 * The user's aggregation,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postUserAggregation(
  { userId, body, authorization, accessToken } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'post';
  let urlParts = ['users', userId, 'aggregations'];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Get a single user aggregation with statistics for graphs
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.aggregationId
 * The aggregation id,
 * @param {boolean} [parameters.patched]
 * Wether you want to get only original data or eventually patched ones to avoid holes.,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserAggregation(
  { userId, aggregationId, patched, authorization, accessToken } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (aggregationId == null) {
    throw new Error(
      'Missing required parameter : aggregationId. Value : ' + aggregationId
    );
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'aggregations', aggregationId];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    patched: patched,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Update a user's aggregation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.aggregationId
 * The aggregation id,
 * @param {object} parameters.body
 * The user's aggregation,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserAggregation(
  { userId, aggregationId, body, authorization, accessToken } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (aggregationId == null) {
    throw new Error(
      'Missing required parameter : aggregationId. Value : ' + aggregationId
    );
  }
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'put';
  let urlParts = ['users', userId, 'aggregations', aggregationId];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Delete a user's aggregation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.aggregationId
 * The aggregation id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteUserAggregation(
  { userId, aggregationId, authorization, accessToken } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (aggregationId == null) {
    throw new Error(
      'Missing required parameter : aggregationId. Value : ' + aggregationId
    );
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'delete';
  let urlParts = ['users', userId, 'aggregations', aggregationId];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Get a user's devices.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} [parameters.date]
 * The status date,
 * @param {array} [parameters.measures]
 * The measures to read,
 * @param {boolean} [parameters.patched]
 * Wether you want to get only original data or eventually patched ones to avoid holes.,
 * @param {number} [parameters.limit]
 * The number of items to retrieve,
 * @param {number} [parameters.start]
 * The index in results,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDevices(
  {
    userId,
    date,
    measures,
    patched,
    limit,
    start,
    authorization,
    accessToken,
  } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'devices'];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    date: date,
    measures: measures,
    patched: patched,
    limit: limit,
    start: start,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Setup a user's device.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {object} parameters.body
 * The user device activation couple,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postUserDevice(
  { userId, body, authorization, accessToken } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'post';
  let urlParts = ['users', userId, 'devices'];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Get a user's device geographic positions historic.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDevicePositions(
  { userId, deviceId, authorization, accessToken } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId
    );
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'devices', deviceId, 'positions'];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Get a user's device.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDevice(
  { userId, deviceId, authorization, accessToken } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId
    );
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'devices', deviceId];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Update a user's device.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {object} parameters.body
 * The user device,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserDevice(
  { userId, deviceId, body, authorization, accessToken } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId
    );
  }
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'put';
  let urlParts = ['users', userId, 'devices', deviceId];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Delete a user's device access.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteUserDevice(
  { userId, deviceId, authorization, accessToken } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId
    );
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'delete';
  let urlParts = ['users', userId, 'devices', deviceId];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Get the modules a user activated on its device
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceModules(
  { userId, deviceId, authorization, accessToken } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId
    );
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'devices', deviceId, 'modules'];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Add a module to a user's device
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {number} parameters.moduleId
 * The module id,
 * @param {object} parameters.body
 * The module settings,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserDeviceModule(
  { userId, deviceId, moduleId, body, authorization, accessToken } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId
    );
  }
  if (moduleId == null) {
    throw new Error(
      'Missing required parameter : moduleId. Value : ' + moduleId
    );
  }
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'put';
  let urlParts = ['users', userId, 'devices', deviceId, 'modules', moduleId];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Disable a module for a user's device
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {number} parameters.moduleId
 * The module id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteUserDeviceModule(
  { userId, deviceId, moduleId, authorization, accessToken } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId
    );
  }
  if (moduleId == null) {
    throw new Error(
      'Missing required parameter : moduleId. Value : ' + moduleId
    );
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'delete';
  let urlParts = ['users', userId, 'devices', deviceId, 'modules', moduleId];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Update a user's device shares.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.sharesType
 * The shares type,
 * @param {array} parameters.body
 * The users concerned by the user's device share,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserDeviceShares(
  { userId, deviceId, sharesType, body, authorization, accessToken } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId
    );
  }
  if (sharesType == null) {
    throw new Error(
      'Missing required parameter : sharesType. Value : ' + sharesType
    );
  }
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'put';
  let urlParts = ['users', userId, 'devices', deviceId, 'shares', sharesType];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Get a user's device's device's statistics.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.startDate
 * The statistics start date,
 * @param {string} parameters.endDate
 * The statistics end date,
 * @param {array} parameters.measures
 * The measures to read,
 * @param {boolean} [parameters.patched]
 * Wether you want to get only original data or eventually patched ones to avoid holes.,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceStatistics(
  {
    userId,
    deviceId,
    startDate,
    endDate,
    measures,
    patched,
    authorization,
    accessToken,
  } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId
    );
  }
  if (startDate == null) {
    throw new Error(
      'Missing required parameter : startDate. Value : ' + startDate
    );
  }
  if (endDate == null) {
    throw new Error('Missing required parameter : endDate. Value : ' + endDate);
  }
  if (measures == null) {
    throw new Error(
      'Missing required parameter : measures. Value : ' + measures
    );
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'devices', deviceId, 'statistics'];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    startDate: startDate,
    endDate: endDate,
    measures: measures,
    patched: patched,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Get a user's device's raw data.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.beforeDate
 * The date before which the data starts being retrieved,
 * @param {number} parameters.size
 * The number of measures to retrieve,
 * @param {array} parameters.measures
 * The measures to read,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceRawData(
  {
    userId,
    deviceId,
    beforeDate,
    size,
    measures,
    authorization,
    accessToken,
  } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId
    );
  }
  if (beforeDate == null) {
    throw new Error(
      'Missing required parameter : beforeDate. Value : ' + beforeDate
    );
  }
  if (size == null) {
    throw new Error('Missing required parameter : size. Value : ' + size);
  }
  if (measures == null) {
    throw new Error(
      'Missing required parameter : measures. Value : ' + measures
    );
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'devices', deviceId, 'data', 'raw'];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    beforeDate: beforeDate,
    size: size,
    measures: measures,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Get a user's device's hourly data.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.beforeDate
 * The date before which the data starts being retrieved,
 * @param {number} parameters.days
 * The number of days to retrieve,
 * @param {array} parameters.measures
 * The measures to read,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceHourlyData(
  {
    userId,
    deviceId,
    beforeDate,
    days,
    measures,
    authorization,
    accessToken,
  } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId
    );
  }
  if (beforeDate == null) {
    throw new Error(
      'Missing required parameter : beforeDate. Value : ' + beforeDate
    );
  }
  if (days == null) {
    throw new Error('Missing required parameter : days. Value : ' + days);
  }
  if (measures == null) {
    throw new Error(
      'Missing required parameter : measures. Value : ' + measures
    );
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'devices', deviceId, 'data', 'hourly'];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    beforeDate: beforeDate,
    days: days,
    measures: measures,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Get a user's device's daily data.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.beforeDate
 * The date before which the data starts being retrieved,
 * @param {number} parameters.days
 * The number of days to retrieve,
 * @param {array} parameters.measures
 * The measures to read,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceDailyData(
  {
    userId,
    deviceId,
    beforeDate,
    days,
    measures,
    authorization,
    accessToken,
  } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId
    );
  }
  if (beforeDate == null) {
    throw new Error(
      'Missing required parameter : beforeDate. Value : ' + beforeDate
    );
  }
  if (days == null) {
    throw new Error('Missing required parameter : days. Value : ' + days);
  }
  if (measures == null) {
    throw new Error(
      'Missing required parameter : measures. Value : ' + measures
    );
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'devices', deviceId, 'data', 'daily'];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    beforeDate: beforeDate,
    days: days,
    measures: measures,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Get a user's device's continuous device's statistics.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.startDate
 * The statistics start date,
 * @param {string} parameters.endDate
 * The statistics end date,
 * @param {array} parameters.measures
 * The measures to read,
 * @param {boolean} [parameters.patched]
 * Wether you want to get only original data or eventually patched ones to avoid holes.,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceContinuousStatistics(
  {
    userId,
    deviceId,
    startDate,
    endDate,
    measures,
    patched,
    authorization,
    accessToken,
  } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId
    );
  }
  if (startDate == null) {
    throw new Error(
      'Missing required parameter : startDate. Value : ' + startDate
    );
  }
  if (endDate == null) {
    throw new Error('Missing required parameter : endDate. Value : ' + endDate);
  }
  if (measures == null) {
    throw new Error(
      'Missing required parameter : measures. Value : ' + measures
    );
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'get';
  let urlParts = [
    'users',
    userId,
    'devices',
    deviceId,
    'countinuousStatistics',
  ];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    startDate: startDate,
    endDate: endDate,
    measures: measures,
    patched: patched,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Get a user's device's summary at a given date.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.date
 * The summary date,
 * @param {array} parameters.measures
 * The measures to read,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceSummary(
  { userId, deviceId, date, measures, authorization, accessToken } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId
    );
  }
  if (date == null) {
    throw new Error('Missing required parameter : date. Value : ' + date);
  }
  if (measures == null) {
    throw new Error(
      'Missing required parameter : measures. Value : ' + measures
    );
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'devices', deviceId, 'summaries', date];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    measures: measures,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Get a user's device's forecasts.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.date
 * Date of the forecasts,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceForecasts(
  { userId, deviceId, date, authorization, accessToken } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId
    );
  }
  if (date == null) {
    throw new Error('Missing required parameter : date. Value : ' + date);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'devices', deviceId, 'forecasts'];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    date: date,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Get a user's forecasts.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.latitude
 * The latitude of the data,
 * @param {number} parameters.longitude
 * The longitude of the data,
 * @param {string} [parameters.date]
 * Date of the forecasts,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserForecasts(
  { userId, latitude, longitude, date, authorization, accessToken } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (latitude == null) {
    throw new Error(
      'Missing required parameter : latitude. Value : ' + latitude
    );
  }
  if (longitude == null) {
    throw new Error(
      'Missing required parameter : longitude. Value : ' + longitude
    );
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'forecasts'];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    latitude: latitude,
    longitude: longitude,
    date: date,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Get a user's daily data for a given geo location.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.latitude
 * The latitude of the data,
 * @param {number} parameters.longitude
 * The longitude of the data,
 * @param {string} parameters.beforeDate
 * The date before which the data starts being retrieved,
 * @param {number} parameters.days
 * The number of days to retrieve,
 * @param {array} parameters.measures
 * The measures to read,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDailyData(
  {
    userId,
    latitude,
    longitude,
    beforeDate,
    days,
    measures,
    authorization,
    accessToken,
  } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (latitude == null) {
    throw new Error(
      'Missing required parameter : latitude. Value : ' + latitude
    );
  }
  if (longitude == null) {
    throw new Error(
      'Missing required parameter : longitude. Value : ' + longitude
    );
  }
  if (beforeDate == null) {
    throw new Error(
      'Missing required parameter : beforeDate. Value : ' + beforeDate
    );
  }
  if (days == null) {
    throw new Error('Missing required parameter : days. Value : ' + days);
  }
  if (measures == null) {
    throw new Error(
      'Missing required parameter : measures. Value : ' + measures
    );
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'data', 'daily'];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    latitude: latitude,
    longitude: longitude,
    beforeDate: beforeDate,
    days: days,
    measures: measures,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Get a user's hourly data for a given geo location.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.latitude
 * The latitude of the data,
 * @param {number} parameters.longitude
 * The longitude of the data,
 * @param {string} parameters.beforeDate
 * The date before which the data starts being retrieved,
 * @param {number} parameters.days
 * The number of days to retrieve,
 * @param {array} parameters.measures
 * The measures to read,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserHourlyData(
  {
    userId,
    latitude,
    longitude,
    beforeDate,
    days,
    measures,
    authorization,
    accessToken,
  } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (latitude == null) {
    throw new Error(
      'Missing required parameter : latitude. Value : ' + latitude
    );
  }
  if (longitude == null) {
    throw new Error(
      'Missing required parameter : longitude. Value : ' + longitude
    );
  }
  if (beforeDate == null) {
    throw new Error(
      'Missing required parameter : beforeDate. Value : ' + beforeDate
    );
  }
  if (days == null) {
    throw new Error('Missing required parameter : days. Value : ' + days);
  }
  if (measures == null) {
    throw new Error(
      'Missing required parameter : measures. Value : ' + measures
    );
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'data', 'hourly'];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    latitude: latitude,
    longitude: longitude,
    beforeDate: beforeDate,
    days: days,
    measures: measures,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Get a user's preferences.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserPreferences(
  { userId, authorization, accessToken } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'preferences'];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Update a user's preferences.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {object} parameters.body
 * The new user preferences,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserPreferences(
  { userId, body, authorization, accessToken } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'put';
  let urlParts = ['users', userId, 'preferences'];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Get a organisation's operations.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getOrganisationOperations(
  { organisationId, authorization, accessToken } = {},
  options
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId
    );
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'get';
  let urlParts = ['organisations', organisationId, 'operations'];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Create an organisation's operation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {object} parameters.body
 * The operation to add,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postOrganisationOperation(
  { organisationId, body, authorization, accessToken } = {},
  options
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId
    );
  }
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'post';
  let urlParts = ['organisations', organisationId, 'operations'];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Retrieve an organisation's operation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.operationId
 * The operation id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getOrganisationOperation(
  { organisationId, operationId, authorization, accessToken } = {},
  options
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId
    );
  }
  if (operationId == null) {
    throw new Error(
      'Missing required parameter : operationId. Value : ' + operationId
    );
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'get';
  let urlParts = ['organisations', organisationId, 'operations', operationId];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Update an organisation's operation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.operationId
 * The operation id,
 * @param {object} parameters.body
 * The operation to update,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putOrganisationOperation(
  { organisationId, operationId, body, authorization, accessToken } = {},
  options
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId
    );
  }
  if (operationId == null) {
    throw new Error(
      'Missing required parameter : operationId. Value : ' + operationId
    );
  }
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'put';
  let urlParts = ['organisations', organisationId, 'operations', operationId];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Delete an organisation's operation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.operationId
 * The operation id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteOrganisationOperation(
  { organisationId, operationId, authorization, accessToken } = {},
  options
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId
    );
  }
  if (operationId == null) {
    throw new Error(
      'Missing required parameter : operationId. Value : ' + operationId
    );
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'delete';
  let urlParts = ['organisations', organisationId, 'operations', operationId];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Get a user's alerts.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserAlerts({ userId, authorization, accessToken } = {}, options) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'alerts'];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Create a user's alert.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {object} parameters.body
 * The user's alert,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postUserAlert(
  { userId, body, authorization, accessToken } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'post';
  let urlParts = ['users', userId, 'alerts'];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Update a user's alert.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.alertId
 * The alert id,
 * @param {object} parameters.body
 * The user's alert,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserAlert(
  { userId, alertId, body, authorization, accessToken } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (alertId == null) {
    throw new Error('Missing required parameter : alertId. Value : ' + alertId);
  }
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'put';
  let urlParts = ['users', userId, 'alerts', alertId];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Delete a user's alert.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.alertId
 * The alert id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteUserAlert(
  { userId, alertId, authorization, accessToken } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (alertId == null) {
    throw new Error('Missing required parameter : alertId. Value : ' + alertId);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'delete';
  let urlParts = ['users', userId, 'alerts', alertId];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Creates a new organisation. Highly Deprecated, will be moved soon.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {object} parameters.body
 * The necessary contents to create a new organisation
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postOrganisationDeprecated({ body } = {}, options) {
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }

  const method = 'post';
  let urlParts = ['organisations'];
  let headers = {};
  let qs = cleanQuery({});
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Creates a new organisation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {object} parameters.body
 * The necessary contents to create a new organisation,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postOrganisation(
  { userId, body, authorization, accessToken } = {},
  options
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'post';
  let urlParts = ['users', userId, 'organisations'];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Get the organisation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getOrganisation(
  { organisationId, authorization, accessToken } = {},
  options
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId
    );
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'get';
  let urlParts = ['organisations', organisationId];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Update an organisation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {object} parameters.body
 * The modified organisation,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putOrganisation(
  { organisationId, body, authorization, accessToken } = {},
  options
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId
    );
  }
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'put';
  let urlParts = ['organisations', organisationId];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Endpoint for migration. Don't use it or use with caution !
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {object} parameters.body
 * The necessary contents to migrate users,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postOrganisationMembersMigration(
  { organisationId, body, authorization, accessToken } = {},
  options
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId
    );
  }
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'post';
  let urlParts = ['organisations', organisationId, 'membersMigration'];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Add an user to an organisation
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.targetUserId
 * The user id to add,
 * @param {object} parameters.body
 * The type of relation,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postOrganisationUser(
  { organisationId, targetUserId, body, authorization, accessToken } = {},
  options
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId
    );
  }
  if (targetUserId == null) {
    throw new Error(
      'Missing required parameter : targetUserId. Value : ' + targetUserId
    );
  }
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'post';
  let urlParts = ['organisations', organisationId, 'users', targetUserId];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Edit or add an user to an organisation
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.targetUserId
 * The user id to add,
 * @param {object} parameters.body
 * The type of relation,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putOrganisationUser(
  { organisationId, targetUserId, body, authorization, accessToken } = {},
  options
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId
    );
  }
  if (targetUserId == null) {
    throw new Error(
      'Missing required parameter : targetUserId. Value : ' + targetUserId
    );
  }
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'put';
  let urlParts = ['organisations', organisationId, 'users', targetUserId];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Delete an user from an organisation
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.targetUserId
 * The user id to remove,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteOrganisationUser(
  { organisationId, targetUserId, authorization, accessToken } = {},
  options
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId
    );
  }
  if (targetUserId == null) {
    throw new Error(
      'Missing required parameter : targetUserId. Value : ' + targetUserId
    );
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'delete';
  let urlParts = ['organisations', organisationId, 'users', targetUserId];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Create a new place for an organisation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {object} parameters.body
 * The necessary contents to create a new place for an organisation,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postOrganisationPlace(
  { organisationId, body, authorization, accessToken } = {},
  options
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId
    );
  }
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'post';
  let urlParts = ['organisations', organisationId, 'places'];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Update a place for an organisation
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.placeId
 * The place id,
 * @param {object} parameters.body
 * The necessary contents to update a place for an organisation,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putOrganisationPlace(
  { organisationId, placeId, body, authorization, accessToken } = {},
  options
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId
    );
  }
  if (placeId == null) {
    throw new Error('Missing required parameter : placeId. Value : ' + placeId);
  }
  if (body == null) {
    throw new Error('Missing required parameter : body. Value : ' + body);
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'put';
  let urlParts = ['organisations', organisationId, 'places', placeId];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

/**
 * Get last measure (for a specific type) from devices in a given area (1hour for RAIN_TIC).
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.geohash
 * The geohash of the data,
 * @param {string} parameters.measureType
 * The measures to read,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Access token in the query string
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getWeatherLive(
  { geohash, measureType, authorization, accessToken } = {},
  options
) {
  if (geohash == null) {
    throw new Error('Missing required parameter : geohash. Value : ' + geohash);
  }
  if (measureType == null) {
    throw new Error(
      'Missing required parameter : measureType. Value : ' + measureType
    );
  }
  if (authorization == null) {
    throw new Error(
      'Missing required parameter : authorization. Value : ' + authorization
    );
  }

  const method = 'get';
  let urlParts = ['weather', 'live'];
  let headers = {
    Authorization: authorization,
  };
  let qs = cleanQuery({
    geohash: geohash,
    measureType: measureType,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers,
        params: qs,
        data,
      },
      options || {}
    )
  );
}

module.exports = API;
