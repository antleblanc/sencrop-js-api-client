// WARNING: This file is automatically generated
// do not change it in place it would be overriden
// in the next build
'use strict';

const querystring = require('querystring');
const axios = require('axios');
const {
  cleanHeaders,
  cleanQuery,
  sortMultipleQuery, // eslint-disable-line
} = require('./lib');

/**
 * API to consume Sencrop data
 * @module API
 * @version 1.32.3
 */
const API = {
  getPing,
  getOpenAPI,
  getCrops,
  getModules,
  getOrganisation,
  putOrganisation,
  postOrganisation,
  getUserOrganisations,
  postOrganisationUser,
  putOrganisationUser,
  deleteOrganisationUser,
  postSignupCheck,
  postLostPassword,
  putPassword,
  postLogin,
  postVerify,
  postPartnerTokenRequest,
  postPartnerToken,
  getPartnerDevices,
  putPartnerModuleParameters,
  postUser,
  getMySelf,
  getUser,
  putUser,
  getUserAggregations,
  postUserAggregation,
  getUserAggregation,
  putUserAggregation,
  deleteUserAggregation,
  getUserDevices,
  postUserDevice,
  getUserDevicePositions,
  getUserDevice,
  putUserDevice,
  deleteUserDevice,
  getUserDeviceModules,
  putUserDeviceModule,
  deleteUserDeviceModule,
  putUserDeviceShares,
  getUserDeviceStatistics,
  getUserDeviceRawData,
  getUserDeviceHourlyData,
  getUserDeviceDailyData,
  getUserDeviceContinuousStatistics,
  getUserDeviceSummary,
  getUserDeviceForecasts,
  getUserForecasts,
  getUserStatistics,
  getUserDailyData,
  getUserHourlyData,
  getUserPreferences,
  putUserPreferences,
  getOrganisationOperations,
  postOrganisationOperation,
  getOrganisationOperation,
  putOrganisationOperation,
  deleteOrganisationOperation,
  getUserAlerts,
  postUserAlert,
  putUserAlert,
  deleteUserAlert,
  postOrganisationPlace,
  putOrganisationPlace,
  getWeatherLive,
  getUserNotifications,
  putUserNotificationRead,
  deleteUserNotificationRead,
  getSearchUser,
  putUserDeviceCalibration,
  getOAuth2Authorize,
  postOAuth2Token,
  getUserDevicesLiveAggregations,
  getOrganisationUsers,
  getCheckout,
  postCheckout,
  putCheckoutStatus,
  getCheckoutRessources,
  postCheckoutEstimate,
  getHubspotProperties,
  postUserDeviceExport,
  getUserGuests,
  postUserGuest,
  putUserGuest,
  deleteUserGuest,
  getUserCollaborators,
  postUserCollaborator,
  deleteUserCollaborator,
  putUserCollaborator,
  postOrganisationMembersMigration,
  postOrganisationDeprecated,
};

/**
 * Checks API's availability.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getPing({ xAppVersion } = {}, options) {
  const method = 'get';
  let urlParts = ['ping'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({});
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get API documentation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getOpenAPI({ authorization, accessToken, xAppVersion } = {}, options) {
  const method = 'get';
  let urlParts = ['openAPI'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get the crops
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getCrops({ xAppVersion } = {}, options) {
  const method = 'get';
  let urlParts = ['crops'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({});
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get the modules
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getModules({ xAppVersion } = {}, options) {
  const method = 'get';
  let urlParts = ['modules'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({});
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get the organisation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getOrganisation(
  { organisationId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  const method = 'get';
  let urlParts = ['organisations', organisationId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Update an organisation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putOrganisation(
  { body, organisationId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  const method = 'put';
  let urlParts = ['organisations', organisationId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Creates a new organisation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postOrganisation(
  { body, userId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  const method = 'post';
  let urlParts = ['users', userId, 'organisations'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get all user's organisations.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserOrganisations(
  { userId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  const method = 'get';
  let urlParts = ['users', userId, 'organisations'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Add an user to an organisation
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.targetUserId
 * The user id to add,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postOrganisationUser(
  {
    body,
    organisationId,
    targetUserId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }
  if (targetUserId == null) {
    throw new Error(
      'Missing required parameter : targetUserId. Value : ' + targetUserId,
    );
  }

  const method = 'post';
  let urlParts = ['organisations', organisationId, 'users', targetUserId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Edit or add an user to an organisation
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.targetUserId
 * The user id to add,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putOrganisationUser(
  {
    body,
    organisationId,
    targetUserId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }
  if (targetUserId == null) {
    throw new Error(
      'Missing required parameter : targetUserId. Value : ' + targetUserId,
    );
  }

  const method = 'put';
  let urlParts = ['organisations', organisationId, 'users', targetUserId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Delete an user from an organisation
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.targetUserId
 * The user id to remove,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteOrganisationUser(
  {
    organisationId,
    targetUserId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }
  if (targetUserId == null) {
    throw new Error(
      'Missing required parameter : targetUserId. Value : ' + targetUserId,
    );
  }

  const method = 'delete';
  let urlParts = ['organisations', organisationId, 'users', targetUserId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Hit the server to check the email can be used to signup.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {string} [parameters.authorization]
 * Authorization with Bearer mechanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postSignupCheck({ body, authorization, xAppVersion } = {}, options) {
  const method = 'post';
  let urlParts = ['utils', 'checkSignup'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({});
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Request a password change e-mail.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postLostPassword({ body, xAppVersion } = {}, options) {
  const method = 'post';
  let urlParts = ['password', 'lost'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({});
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Change a user password
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putPassword({ body, xAppVersion } = {}, options) {
  const method = 'put';
  let urlParts = ['password'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({});
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Log a user in
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postLogin({ body, xAppVersion } = {}, options) {
  const method = 'post';
  let urlParts = ['users', 'sign_in'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({});
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Verify a user
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postVerify({ body, xAppVersion } = {}, options) {
  const method = 'post';
  let urlParts = ['users', 'verify'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({});
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Request a user token
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.partnerId
 * The partner organisation id
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postPartnerTokenRequest(
  { body, partnerId, xAppVersion } = {},
  options,
) {
  if (partnerId == null) {
    throw new Error(
      'Missing required parameter : partnerId. Value : ' + partnerId,
    );
  }

  const method = 'post';
  let urlParts = ['partners', partnerId, 'tokenRequests'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({});
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Create a user token (deprecated, use OAuth2)
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.partnerId
 * The partner organisation id
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postPartnerToken({ body, partnerId, xAppVersion } = {}, options) {
  if (partnerId == null) {
    throw new Error(
      'Missing required parameter : partnerId. Value : ' + partnerId,
    );
  }

  const method = 'post';
  let urlParts = ['partners', partnerId, 'tokens'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({});
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Retrieves the devices a partner has access to.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.partnerId
 * The partner organisation id,
 * @param {number} parameters.limit
 * The number of items to retrieve,
 * @param {number} parameters.start
 * The index in results,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getPartnerDevices(
  { partnerId, limit, start, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (partnerId == null) {
    throw new Error(
      'Missing required parameter : partnerId. Value : ' + partnerId,
    );
  }
  if (limit == null) {
    throw new Error('Missing required parameter : limit. Value : ' + limit);
  }
  if (start == null) {
    throw new Error('Missing required parameter : start. Value : ' + start);
  }

  const method = 'get';
  let urlParts = ['partners', partnerId, 'devices'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    limit: limit,
    start: start,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Update an partner module parameters
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.partnerId
 * The partner organisation id,
 * @param {number} parameters.partnerUserId
 * The partner user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {number} parameters.moduleId
 * The module id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putPartnerModuleParameters(
  {
    body,
    partnerId,
    partnerUserId,
    deviceId,
    moduleId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (partnerId == null) {
    throw new Error(
      'Missing required parameter : partnerId. Value : ' + partnerId,
    );
  }
  if (partnerUserId == null) {
    throw new Error(
      'Missing required parameter : partnerUserId. Value : ' + partnerUserId,
    );
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }
  if (moduleId == null) {
    throw new Error(
      'Missing required parameter : moduleId. Value : ' + moduleId,
    );
  }

  const method = 'put';
  let urlParts = [
    'partners',
    partnerId,
    'users',
    partnerUserId,
    'devices',
    deviceId,
    'modules',
    moduleId,
    'parameters',
  ];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Create a new user.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postUser({ body, xAppVersion } = {}, options) {
  const method = 'post';
  let urlParts = ['users'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({});
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Redirect to the user profile.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getMySelf({ authorization, accessToken, xAppVersion } = {}, options) {
  const method = 'get';
  let urlParts = ['me'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's profile.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUser(
  { userId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  const method = 'get';
  let urlParts = ['users', userId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Update a user's profile.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUser(
  { body, userId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  const method = 'put';
  let urlParts = ['users', userId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's aggregations.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {boolean} [parameters.compute]
 * Wether the aggregations should be computed,
 * @param {boolean} [parameters.patched]
 * Wether you want to get only original data or eventually patched ones to avoid holes.,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserAggregations(
  { userId, compute, patched, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  const method = 'get';
  let urlParts = ['users', userId, 'aggregations'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    compute: compute,
    patched: patched,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Create a user's aggregation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postUserAggregation(
  { body, userId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  const method = 'post';
  let urlParts = ['users', userId, 'aggregations'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a single user aggregation with statistics for graphs
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.aggregationId
 * The aggregation id,
 * @param {boolean} [parameters.patched]
 * Wether you want to get only original data or eventually patched ones to avoid holes.,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserAggregation(
  {
    userId,
    aggregationId,
    patched,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (aggregationId == null) {
    throw new Error(
      'Missing required parameter : aggregationId. Value : ' + aggregationId,
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'aggregations', aggregationId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    patched: patched,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Update a user's aggregation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.aggregationId
 * The aggregation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserAggregation(
  { body, userId, aggregationId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (aggregationId == null) {
    throw new Error(
      'Missing required parameter : aggregationId. Value : ' + aggregationId,
    );
  }

  const method = 'put';
  let urlParts = ['users', userId, 'aggregations', aggregationId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Delete a user's aggregation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.aggregationId
 * The aggregation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteUserAggregation(
  { userId, aggregationId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (aggregationId == null) {
    throw new Error(
      'Missing required parameter : aggregationId. Value : ' + aggregationId,
    );
  }

  const method = 'delete';
  let urlParts = ['users', userId, 'aggregations', aggregationId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's devices.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {boolean} [parameters.includeHistory]
 * If must include device replacements or not,
 * @param {string} [parameters.date]
 * The status date,
 * @param {array} [parameters.measures]
 * The measures to read,
 * @param {boolean} [parameters.patched]
 * Wether you want to get only original data or eventually patched ones to avoid holes.,
 * @param {number} [parameters.limit]
 * The number of items to retrieve,
 * @param {number} [parameters.start]
 * The index in results,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDevices(
  {
    userId,
    includeHistory,
    date,
    measures,
    patched,
    limit,
    start,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  const method = 'get';
  let urlParts = ['users', userId, 'devices'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    includeHistory: includeHistory,
    date: date,
    measures: measures,
    patched: patched,
    limit: limit,
    start: start,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Setup a user's device.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postUserDevice(
  { body, userId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  const method = 'post';
  let urlParts = ['users', userId, 'devices'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's device geographic positions historic.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {boolean} [parameters.includeHistory]
 * If must include device replacements or not,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDevicePositions(
  {
    userId,
    deviceId,
    includeHistory,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'devices', deviceId, 'positions'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    includeHistory: includeHistory,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's device.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {boolean} [parameters.includeHistory]
 * If must include device replacements or not,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDevice(
  {
    userId,
    deviceId,
    includeHistory,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'devices', deviceId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    includeHistory: includeHistory,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Update a user's device.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserDevice(
  { body, userId, deviceId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }

  const method = 'put';
  let urlParts = ['users', userId, 'devices', deviceId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Delete a user's device access.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteUserDevice(
  { userId, deviceId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }

  const method = 'delete';
  let urlParts = ['users', userId, 'devices', deviceId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get the modules a user activated on its device
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceModules(
  { userId, deviceId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'devices', deviceId, 'modules'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Add a module to a user's device
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {number} parameters.moduleId
 * The module id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserDeviceModule(
  {
    body,
    userId,
    deviceId,
    moduleId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }
  if (moduleId == null) {
    throw new Error(
      'Missing required parameter : moduleId. Value : ' + moduleId,
    );
  }

  const method = 'put';
  let urlParts = ['users', userId, 'devices', deviceId, 'modules', moduleId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Disable a module for a user's device
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {number} parameters.moduleId
 * The module id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteUserDeviceModule(
  { userId, deviceId, moduleId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }
  if (moduleId == null) {
    throw new Error(
      'Missing required parameter : moduleId. Value : ' + moduleId,
    );
  }

  const method = 'delete';
  let urlParts = ['users', userId, 'devices', deviceId, 'modules', moduleId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Update a user's device shares.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.sharesType
 * The shares type,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserDeviceShares(
  {
    body,
    userId,
    deviceId,
    sharesType,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }
  if (sharesType == null) {
    throw new Error(
      'Missing required parameter : sharesType. Value : ' + sharesType,
    );
  }

  const method = 'put';
  let urlParts = ['users', userId, 'devices', deviceId, 'shares', sharesType];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's device's device's statistics.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.startDate
 * The statistics start date,
 * @param {string} parameters.endDate
 * The statistics end date,
 * @param {array} parameters.measures
 * The measures to read,
 * @param {boolean} [parameters.patched]
 * Wether you want to get only original data or eventually patched ones to avoid holes.,
 * @param {boolean} [parameters.includeHistory]
 * If must include device replacements or not,
 * @param {string} [parameters.timeZone]
 * The timezone of the data,
 * @param {string} [parameters.interval]
 * The interval of data (Accepted value : 31 days for 1h interval, 1 year for 1d interval, 5y for 1w interval),
 * @param {boolean} [parameters.withCalibration]
 * Wether the calibration of rain falls must be taken in count,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceStatistics(
  {
    userId,
    deviceId,
    startDate,
    endDate,
    measures,
    patched,
    includeHistory,
    timeZone,
    interval,
    withCalibration,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }
  if (startDate == null) {
    throw new Error(
      'Missing required parameter : startDate. Value : ' + startDate,
    );
  }
  if (endDate == null) {
    throw new Error('Missing required parameter : endDate. Value : ' + endDate);
  }
  if (measures == null) {
    throw new Error(
      'Missing required parameter : measures. Value : ' + measures,
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'devices', deviceId, 'statistics'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    startDate: startDate,
    endDate: endDate,
    measures: measures,
    patched: patched,
    includeHistory: includeHistory,
    timeZone: timeZone,
    interval: interval,
    withCalibration: withCalibration,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's device's raw data.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.beforeDate
 * The date before which the data starts being retrieved,
 * @param {boolean} [parameters.includeHistory]
 * If must include device replacements or not,
 * @param {number} parameters.size
 * The number of measures to retrieve,
 * @param {array} parameters.measures
 * The measures to read,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceRawData(
  {
    userId,
    deviceId,
    beforeDate,
    includeHistory,
    size,
    measures,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }
  if (beforeDate == null) {
    throw new Error(
      'Missing required parameter : beforeDate. Value : ' + beforeDate,
    );
  }
  if (size == null) {
    throw new Error('Missing required parameter : size. Value : ' + size);
  }
  if (measures == null) {
    throw new Error(
      'Missing required parameter : measures. Value : ' + measures,
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'devices', deviceId, 'data', 'raw'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    beforeDate: beforeDate,
    includeHistory: includeHistory,
    size: size,
    measures: measures,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's device's hourly data.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.beforeDate
 * The date before which the data starts being retrieved,
 * @param {boolean} [parameters.includeHistory]
 * If must include device replacements or not,
 * @param {string} [parameters.timeZone]
 * The timezone of the data,
 * @param {number} parameters.days
 * The number of days to retrieve,
 * @param {array} parameters.measures
 * The measures to read,
 * @param {boolean} [parameters.withCalibration]
 * Wether the calibration of rain falls must be taken in count,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceHourlyData(
  {
    userId,
    deviceId,
    beforeDate,
    includeHistory,
    timeZone,
    days,
    measures,
    withCalibration,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }
  if (beforeDate == null) {
    throw new Error(
      'Missing required parameter : beforeDate. Value : ' + beforeDate,
    );
  }
  if (days == null) {
    throw new Error('Missing required parameter : days. Value : ' + days);
  }
  if (measures == null) {
    throw new Error(
      'Missing required parameter : measures. Value : ' + measures,
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'devices', deviceId, 'data', 'hourly'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    beforeDate: beforeDate,
    includeHistory: includeHistory,
    timeZone: timeZone,
    days: days,
    measures: measures,
    withCalibration: withCalibration,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's device's daily data.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.beforeDate
 * The date before which the data starts being retrieved,
 * @param {number} parameters.days
 * The number of days to retrieve,
 * @param {boolean} [parameters.includeHistory]
 * If must include device replacements or not,
 * @param {string} [parameters.timeZone]
 * The timezone of the data,
 * @param {array} parameters.measures
 * The measures to read,
 * @param {boolean} [parameters.withCalibration]
 * Wether the calibration of rain falls must be taken in count,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceDailyData(
  {
    userId,
    deviceId,
    beforeDate,
    days,
    includeHistory,
    timeZone,
    measures,
    withCalibration,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }
  if (beforeDate == null) {
    throw new Error(
      'Missing required parameter : beforeDate. Value : ' + beforeDate,
    );
  }
  if (days == null) {
    throw new Error('Missing required parameter : days. Value : ' + days);
  }
  if (measures == null) {
    throw new Error(
      'Missing required parameter : measures. Value : ' + measures,
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'devices', deviceId, 'data', 'daily'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    beforeDate: beforeDate,
    days: days,
    includeHistory: includeHistory,
    timeZone: timeZone,
    measures: measures,
    withCalibration: withCalibration,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's device's continuous device's statistics.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.startDate
 * The statistics start date,
 * @param {string} parameters.endDate
 * The statistics end date,
 * @param {array} parameters.measures
 * The measures to read,
 * @param {boolean} [parameters.patched]
 * Wether you want to get only original data or eventually patched ones to avoid holes.,
 * @param {boolean} [parameters.includeHistory]
 * If must include device replacements or not,
 * @param {string} [parameters.timeZone]
 * The timezone of the data,
 * @param {string} [parameters.interval]
 * The interval of data (Accepted value : 31 days for 1h interval, 1 year for 1d interval, 5y for 1w interval),
 * @param {boolean} [parameters.withCalibration]
 * Wether the calibration of rain falls must be taken in count,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceContinuousStatistics(
  {
    userId,
    deviceId,
    startDate,
    endDate,
    measures,
    patched,
    includeHistory,
    timeZone,
    interval,
    withCalibration,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }
  if (startDate == null) {
    throw new Error(
      'Missing required parameter : startDate. Value : ' + startDate,
    );
  }
  if (endDate == null) {
    throw new Error('Missing required parameter : endDate. Value : ' + endDate);
  }
  if (measures == null) {
    throw new Error(
      'Missing required parameter : measures. Value : ' + measures,
    );
  }

  const method = 'get';
  let urlParts = [
    'users',
    userId,
    'devices',
    deviceId,
    'countinuousStatistics',
  ];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    startDate: startDate,
    endDate: endDate,
    measures: measures,
    patched: patched,
    includeHistory: includeHistory,
    timeZone: timeZone,
    interval: interval,
    withCalibration: withCalibration,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's device's summary at a given date.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {boolean} [parameters.includeHistory]
 * If must include device replacements or not,
 * @param {string} parameters.date
 * The summary date,
 * @param {array} parameters.measures
 * The measures to read,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceSummary(
  {
    userId,
    deviceId,
    includeHistory,
    date,
    measures,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }
  if (date == null) {
    throw new Error('Missing required parameter : date. Value : ' + date);
  }
  if (measures == null) {
    throw new Error(
      'Missing required parameter : measures. Value : ' + measures,
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'devices', deviceId, 'summaries', date];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    includeHistory: includeHistory,
    measures: measures,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's device's forecasts.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.date
 * Date of the forecasts,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceForecasts(
  { userId, deviceId, date, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }
  if (date == null) {
    throw new Error('Missing required parameter : date. Value : ' + date);
  }

  const method = 'get';
  let urlParts = ['users', userId, 'devices', deviceId, 'forecasts'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    date: date,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's forecasts.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.latitude
 * The latitude of the data,
 * @param {number} parameters.longitude
 * The longitude of the data,
 * @param {string} [parameters.date]
 * Date of the forecasts,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserForecasts(
  {
    userId,
    latitude,
    longitude,
    date,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (latitude == null) {
    throw new Error(
      'Missing required parameter : latitude. Value : ' + latitude,
    );
  }
  if (longitude == null) {
    throw new Error(
      'Missing required parameter : longitude. Value : ' + longitude,
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'forecasts'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    latitude: latitude,
    longitude: longitude,
    date: date,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's statistics for a given location.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.latitude
 * The latitude of the data,
 * @param {number} parameters.longitude
 * The longitude of the data,
 * @param {string} parameters.startDate
 * The statistics start date,
 * @param {string} parameters.endDate
 * The statistics end date,
 * @param {array} parameters.measures
 * The measures to read,
 * @param {array} parameters.ranges
 * The ranges to get the data from,
 * @param {boolean} [parameters.patched]
 * Wether you want to get only original data or eventually patched ones to avoid holes.,
 * @param {boolean} [parameters.includeHistory]
 * If must include device replacements or not,
 * @param {string} [parameters.interval]
 * The interval of data (Accepted value : 31 days for 1h interval, 1 year for 1d interval, 5y for 1w interval),
 * @param {boolean} [parameters.withCalibration]
 * Wether the calibration of rain falls must be taken in count,
 * @param {string} [parameters.timeZone]
 * The timezone of the data,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserStatistics(
  {
    userId,
    latitude,
    longitude,
    startDate,
    endDate,
    measures,
    ranges,
    patched,
    includeHistory,
    interval,
    withCalibration,
    timeZone,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (latitude == null) {
    throw new Error(
      'Missing required parameter : latitude. Value : ' + latitude,
    );
  }
  if (longitude == null) {
    throw new Error(
      'Missing required parameter : longitude. Value : ' + longitude,
    );
  }
  if (startDate == null) {
    throw new Error(
      'Missing required parameter : startDate. Value : ' + startDate,
    );
  }
  if (endDate == null) {
    throw new Error('Missing required parameter : endDate. Value : ' + endDate);
  }
  if (measures == null) {
    throw new Error(
      'Missing required parameter : measures. Value : ' + measures,
    );
  }
  if (ranges == null) {
    throw new Error('Missing required parameter : ranges. Value : ' + ranges);
  }

  const method = 'get';
  let urlParts = ['users', userId, 'statistics'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    latitude: latitude,
    longitude: longitude,
    startDate: startDate,
    endDate: endDate,
    measures: measures,
    ranges: ranges,
    patched: patched,
    includeHistory: includeHistory,
    interval: interval,
    withCalibration: withCalibration,
    timeZone: timeZone,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's daily data for a given geo location.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.latitude
 * The latitude of the data,
 * @param {number} parameters.longitude
 * The longitude of the data,
 * @param {string} parameters.beforeDate
 * The date before which the data starts being retrieved,
 * @param {number} parameters.days
 * The number of days to retrieve,
 * @param {boolean} [parameters.includeHistory]
 * If must include device replacements or not,
 * @param {array} [parameters.ranges]
 * The ranges to get the data from,
 * @param {array} parameters.measures
 * The measures to read,
 * @param {boolean} [parameters.withCalibration]
 * Wether the calibration of rain falls must be taken in count,
 * @param {string} [parameters.timeZone]
 * The timezone of the data,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDailyData(
  {
    userId,
    latitude,
    longitude,
    beforeDate,
    days,
    includeHistory,
    ranges,
    measures,
    withCalibration,
    timeZone,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (latitude == null) {
    throw new Error(
      'Missing required parameter : latitude. Value : ' + latitude,
    );
  }
  if (longitude == null) {
    throw new Error(
      'Missing required parameter : longitude. Value : ' + longitude,
    );
  }
  if (beforeDate == null) {
    throw new Error(
      'Missing required parameter : beforeDate. Value : ' + beforeDate,
    );
  }
  if (days == null) {
    throw new Error('Missing required parameter : days. Value : ' + days);
  }
  if (measures == null) {
    throw new Error(
      'Missing required parameter : measures. Value : ' + measures,
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'data', 'daily'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    latitude: latitude,
    longitude: longitude,
    beforeDate: beforeDate,
    days: days,
    includeHistory: includeHistory,
    ranges: ranges,
    measures: measures,
    withCalibration: withCalibration,
    timeZone: timeZone,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's hourly data for a given geo location.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.latitude
 * The latitude of the data,
 * @param {number} parameters.longitude
 * The longitude of the data,
 * @param {string} parameters.beforeDate
 * The date before which the data starts being retrieved,
 * @param {boolean} [parameters.includeHistory]
 * If must include device replacements or not,
 * @param {number} parameters.days
 * The number of days to retrieve,
 * @param {array} [parameters.ranges]
 * The ranges to get the data from,
 * @param {array} parameters.measures
 * The measures to read,
 * @param {boolean} [parameters.withCalibration]
 * Wether the calibration of rain falls must be taken in count,
 * @param {string} [parameters.timeZone]
 * The timezone of the data,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserHourlyData(
  {
    userId,
    latitude,
    longitude,
    beforeDate,
    includeHistory,
    days,
    ranges,
    measures,
    withCalibration,
    timeZone,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (latitude == null) {
    throw new Error(
      'Missing required parameter : latitude. Value : ' + latitude,
    );
  }
  if (longitude == null) {
    throw new Error(
      'Missing required parameter : longitude. Value : ' + longitude,
    );
  }
  if (beforeDate == null) {
    throw new Error(
      'Missing required parameter : beforeDate. Value : ' + beforeDate,
    );
  }
  if (days == null) {
    throw new Error('Missing required parameter : days. Value : ' + days);
  }
  if (measures == null) {
    throw new Error(
      'Missing required parameter : measures. Value : ' + measures,
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'data', 'hourly'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    latitude: latitude,
    longitude: longitude,
    beforeDate: beforeDate,
    includeHistory: includeHistory,
    days: days,
    ranges: ranges,
    measures: measures,
    withCalibration: withCalibration,
    timeZone: timeZone,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's preferences.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserPreferences(
  { userId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  const method = 'get';
  let urlParts = ['users', userId, 'preferences'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Update a user's preferences.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserPreferences(
  { body, userId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  const method = 'put';
  let urlParts = ['users', userId, 'preferences'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a organisation's operations.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getOrganisationOperations(
  { organisationId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  const method = 'get';
  let urlParts = ['organisations', organisationId, 'operations'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Create an organisation's operation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postOrganisationOperation(
  { body, organisationId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  const method = 'post';
  let urlParts = ['organisations', organisationId, 'operations'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Retrieve an organisation's operation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.operationId
 * The operation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getOrganisationOperation(
  { organisationId, operationId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }
  if (operationId == null) {
    throw new Error(
      'Missing required parameter : operationId. Value : ' + operationId,
    );
  }

  const method = 'get';
  let urlParts = ['organisations', organisationId, 'operations', operationId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Update an organisation's operation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.operationId
 * The operation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putOrganisationOperation(
  {
    body,
    organisationId,
    operationId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }
  if (operationId == null) {
    throw new Error(
      'Missing required parameter : operationId. Value : ' + operationId,
    );
  }

  const method = 'put';
  let urlParts = ['organisations', organisationId, 'operations', operationId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Delete an organisation's operation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.operationId
 * The operation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteOrganisationOperation(
  { organisationId, operationId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }
  if (operationId == null) {
    throw new Error(
      'Missing required parameter : operationId. Value : ' + operationId,
    );
  }

  const method = 'delete';
  let urlParts = ['organisations', organisationId, 'operations', operationId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's alerts.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserAlerts(
  { userId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  const method = 'get';
  let urlParts = ['users', userId, 'alerts'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Create a user's alert.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postUserAlert(
  { body, userId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  const method = 'post';
  let urlParts = ['users', userId, 'alerts'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Update a user's alert.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.alertId
 * The alert id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserAlert(
  { body, userId, alertId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (alertId == null) {
    throw new Error('Missing required parameter : alertId. Value : ' + alertId);
  }

  const method = 'put';
  let urlParts = ['users', userId, 'alerts', alertId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Delete a user's alert.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.alertId
 * The alert id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteUserAlert(
  { userId, alertId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (alertId == null) {
    throw new Error('Missing required parameter : alertId. Value : ' + alertId);
  }

  const method = 'delete';
  let urlParts = ['users', userId, 'alerts', alertId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Create a new place for an organisation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postOrganisationPlace(
  { body, organisationId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  const method = 'post';
  let urlParts = ['organisations', organisationId, 'places'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Update a place for an organisation
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.placeId
 * The place id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putOrganisationPlace(
  {
    body,
    organisationId,
    placeId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }
  if (placeId == null) {
    throw new Error('Missing required parameter : placeId. Value : ' + placeId);
  }

  const method = 'put';
  let urlParts = ['organisations', organisationId, 'places', placeId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get last measure (for a specific type) from devices in a given area (1 hour for RAIN_FALL).
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.geohash
 * The geohash of the data,
 * @param {string} parameters.measureType
 * The measures to read,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getWeatherLive(
  { geohash, measureType, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (geohash == null) {
    throw new Error('Missing required parameter : geohash. Value : ' + geohash);
  }
  if (measureType == null) {
    throw new Error(
      'Missing required parameter : measureType. Value : ' + measureType,
    );
  }

  const method = 'get';
  let urlParts = ['weather', 'live'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    geohash: geohash,
    measureType: measureType,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get user's notifications.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} [parameters.size]
 * undefined,
 * @param {string} [parameters.cursor]
 * undefined,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserNotifications(
  { userId, size, cursor, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  const method = 'get';
  let urlParts = ['users', userId, 'notifications'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    size: size,
    cursor: cursor,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Set a user's notification as read.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.notificationId
 * The notification uuid,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserNotificationRead(
  { userId, notificationId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (notificationId == null) {
    throw new Error(
      'Missing required parameter : notificationId. Value : ' + notificationId,
    );
  }

  const method = 'put';
  let urlParts = ['users', userId, 'notifications', notificationId, 'read'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Set a user's notification as unread.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.notificationId
 * The notification uuid,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteUserNotificationRead(
  { userId, notificationId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (notificationId == null) {
    throw new Error(
      'Missing required parameter : notificationId. Value : ' + notificationId,
    );
  }

  const method = 'delete';
  let urlParts = ['users', userId, 'notifications', notificationId, 'read'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Search for an user
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.email
 * Email of the user to search,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getSearchUser(
  { email, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (email == null) {
    throw new Error('Missing required parameter : email. Value : ' + email);
  }

  const method = 'get';
  let urlParts = ['search', 'users'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    email: email,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Update a user's device calibration.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.calibrationName
 * Calibration to set,
 * @param {number} parameters.ratio
 * Ratio to set,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserDeviceCalibration(
  {
    userId,
    deviceId,
    calibrationName,
    ratio,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }
  if (calibrationName == null) {
    throw new Error(
      'Missing required parameter : calibrationName. Value : ' +
        calibrationName,
    );
  }
  if (ratio == null) {
    throw new Error('Missing required parameter : ratio. Value : ' + ratio);
  }

  const method = 'put';
  let urlParts = [
    'users',
    userId,
    'devices',
    deviceId,
    'calibration',
    calibrationName,
  ];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    ratio: ratio,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Implements the [Authorization Endpoint](https://tools.ietf.org/html/rfc6749#section-3.1)
 as defined per the OAuth2 RFC.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.responseType
 * undefined,
 * @param {string} parameters.clientId
 * undefined,
 * @param {string} [parameters.redirectUri]
 * undefined,
 * @param {string} [parameters.scope]
 * See https://tools.ietf.org/html/rfc6749#section-3.3,
 * @param {string} parameters.state
 * undefined
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getOAuth2Authorize(
  { responseType, clientId, redirectUri, scope, state, xAppVersion } = {},
  options,
) {
  if (responseType == null) {
    throw new Error(
      'Missing required parameter : responseType. Value : ' + responseType,
    );
  }
  if (clientId == null) {
    throw new Error(
      'Missing required parameter : clientId. Value : ' + clientId,
    );
  }
  if (state == null) {
    throw new Error('Missing required parameter : state. Value : ' + state);
  }

  const method = 'get';
  let urlParts = ['oauth2', 'authorize'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    response_type: responseType,
    client_id: clientId,
    redirect_uri: redirectUri,
    scope: scope,
    state: state,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Implements the [Token Endpoint](https://tools.ietf.org/html/rfc6749#section-3.2)
 as defined per the OAuth2 RFC.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postOAuth2Token({ body, xAppVersion } = {}, options) {
  const method = 'post';
  let urlParts = ['oauth2', 'token'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({});
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Allow to run live aggregation queries against a user devices.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {array} parameters.devicesIds
 * List of id's of devices,
 * @param {array} parameters.aggregations
 * The aggregations names,
 * @param {array} [parameters.parameters]
 * The params to set,
 * @param {array} parameters.intervals
 * The intervals to retrieve,
 * @param {string} [parameters.timeZone]
 * The timezone of the data,
 * @param {string} [parameters.date]
 * The status date,
 * @param {boolean} [parameters.patched]
 * Wether you want to get only original data or eventually patched ones to avoid holes.,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDevicesLiveAggregations(
  {
    userId,
    devicesIds,
    aggregations,
    parameters,
    intervals,
    timeZone,
    date,
    patched,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (devicesIds == null) {
    throw new Error(
      'Missing required parameter : devicesIds. Value : ' + devicesIds,
    );
  }
  if (aggregations == null) {
    throw new Error(
      'Missing required parameter : aggregations. Value : ' + aggregations,
    );
  }
  if (intervals == null) {
    throw new Error(
      'Missing required parameter : intervals. Value : ' + intervals,
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'devices', 'liveAggregations'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    devicesIds: devicesIds,
    aggregations: aggregations,
    parameters: parameters,
    intervals: intervals,
    timeZone: timeZone,
    date: date,
    patched: patched,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Retrieve all users from an organisation
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getOrganisationUsers(
  { organisationId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  const method = 'get';
  let urlParts = ['organisations', organisationId, 'users'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Retrieve a checkout
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.checkoutId
 * The checkout id,
 * @param {string} [parameters.locale]
 * undefined
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getCheckout({ checkoutId, locale, xAppVersion } = {}, options) {
  if (checkoutId == null) {
    throw new Error(
      'Missing required parameter : checkoutId. Value : ' + checkoutId,
    );
  }

  const method = 'get';
  let urlParts = ['checkouts', checkoutId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    locale: locale,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Create a new checkout (with chargebee)
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {boolean} [parameters.generateEmail]
 * Generate and send an email,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postCheckout(
  { body, generateEmail, authorization, accessToken, xAppVersion } = {},
  options,
) {
  const method = 'post';
  let urlParts = ['checkouts'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    generateEmail: generateEmail,
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Change status of a checkout
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.checkoutId
 * The checkout id,
 * @param {string} parameters.status
 * New status,
 * @param {string} [parameters.chargebeeStep]
 * New chargebee step in funnel
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putCheckoutStatus(
  { checkoutId, status, chargebeeStep, xAppVersion } = {},
  options,
) {
  if (checkoutId == null) {
    throw new Error(
      'Missing required parameter : checkoutId. Value : ' + checkoutId,
    );
  }
  if (status == null) {
    throw new Error('Missing required parameter : status. Value : ' + status);
  }

  const method = 'put';
  let urlParts = ['checkouts', checkoutId, 'status'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    status: status,
    chargebeeStep: chargebeeStep,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Retrieve all checkout ressources (plan/addons)
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.currency
 * undefined,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getCheckoutRessources(
  { currency, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (currency == null) {
    throw new Error(
      'Missing required parameter : currency. Value : ' + currency,
    );
  }

  const method = 'get';
  let urlParts = ['checkoutsRessources'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    currency: currency,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Generates an estimate for the 'create checkout' operation. 
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postCheckoutEstimate(
  { body, authorization, accessToken, xAppVersion } = {},
  options,
) {
  const method = 'post';
  let urlParts = ['checkoutsEstimate'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Retrieve all tradeshow from hubspot
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} [parameters.type]
 * undefined,
 * @param {string} [parameters.name]
 * undefined,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getHubspotProperties(
  { type, name, authorization, accessToken, xAppVersion } = {},
  options,
) {
  const method = 'get';
  let urlParts = ['hubspot', 'properties'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    type: type,
    name: name,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Create a new export job
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} [parameters.emailRecipient]
 * Recipient email of the export (override default user email),
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postUserDeviceExport(
  {
    body,
    userId,
    deviceId,
    emailRecipient,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }

  const method = 'post';
  let urlParts = ['users', userId, 'devices', deviceId, 'export'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    emailRecipient: emailRecipient,
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's guests.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserGuests(
  { userId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  const method = 'get';
  let urlParts = ['users', userId, 'guests'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Create a user's guest.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {number} [parameters.organisationIdTarget]
 * The organisation id to add the collaborator to,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postUserGuest(
  {
    body,
    userId,
    organisationIdTarget,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  const method = 'post';
  let urlParts = ['users', userId, 'guests'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    organisationIdTarget: organisationIdTarget,
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Update a user's guest.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.guestId
 * The guest id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserGuest(
  { body, userId, guestId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (guestId == null) {
    throw new Error('Missing required parameter : guestId. Value : ' + guestId);
  }

  const method = 'put';
  let urlParts = ['users', userId, 'guests', guestId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Delete a user's guest.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} [parameters.organisationIdTarget]
 * The organisation id to remove the collaborator to,
 * @param {number} parameters.guestId
 * The guest id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteUserGuest(
  {
    userId,
    organisationIdTarget,
    guestId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (guestId == null) {
    throw new Error('Missing required parameter : guestId. Value : ' + guestId);
  }

  const method = 'delete';
  let urlParts = ['users', userId, 'guests', guestId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    organisationIdTarget: organisationIdTarget,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's collaborators.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserCollaborators(
  { userId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  const method = 'get';
  let urlParts = ['users', userId, 'collaborators'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Create a user's collaborator.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {number} [parameters.organisationIdTarget]
 * The organisation id to add the collaborator to,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postUserCollaborator(
  {
    body,
    userId,
    organisationIdTarget,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  const method = 'post';
  let urlParts = ['users', userId, 'collaborators'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    organisationIdTarget: organisationIdTarget,
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Delete a user's collaborator.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} [parameters.organisationIdTarget]
 * The organisation id to remove the collaborator to,
 * @param {number} parameters.collaboratorId
 * The collaborator id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteUserCollaborator(
  {
    userId,
    organisationIdTarget,
    collaboratorId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (collaboratorId == null) {
    throw new Error(
      'Missing required parameter : collaboratorId. Value : ' + collaboratorId,
    );
  }

  const method = 'delete';
  let urlParts = ['users', userId, 'collaborators'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    organisationIdTarget: organisationIdTarget,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Update a user's collaborator.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.collaboratorId
 * The collaborator id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserCollaborator(
  {
    body,
    userId,
    collaboratorId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }
  if (collaboratorId == null) {
    throw new Error(
      'Missing required parameter : collaboratorId. Value : ' + collaboratorId,
    );
  }

  const method = 'put';
  let urlParts = ['users', userId, 'collaborators', collaboratorId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Endpoint for migration. Don't use it or use with caution !
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postOrganisationMembersMigration(
  { body, organisationId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  const method = 'post';
  let urlParts = ['organisations', organisationId, 'membersMigration'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Creates a new organisation. Highly Deprecated, will be moved soon.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postOrganisationDeprecated({ body, xAppVersion } = {}, options) {
  const method = 'post';
  let urlParts = ['organisations'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.32.3',
    'X-SDK-Version': '1.22.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({});
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

module.exports = API;
