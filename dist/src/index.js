// WARNING: This file is automatically generated
// do not change it in place it would be overriden
// in the next build
'use strict';

var querystring = require('querystring');
var axios = require('axios');

var _require = require('./lib'),
    cleanQuery = _require.cleanQuery,
    sortMultipleQuery = _require.sortMultipleQuery;

/**
 * API to consume Sencrop data
 * @module API
 * @version 1.0.0
 */


var API = {
  getPing: getPing,
  getCrops: getCrops,
  getModules: getModules,
  postSignupCheck: postSignupCheck,
  postLostPassword: postLostPassword,
  putPassword: putPassword,
  postLogin: postLogin,
  postVerify: postVerify,
  postPartnerTokenRequest: postPartnerTokenRequest,
  postPartnerToken: postPartnerToken,
  getPartnerDevices: getPartnerDevices,
  getUser: getUser,
  putUser: putUser,
  getUserGuests: getUserGuests,
  postUserGuest: postUserGuest,
  putUserGuest: putUserGuest,
  deleteUserGuest: deleteUserGuest,
  getUserCollaborators: getUserCollaborators,
  postUserCollaborator: postUserCollaborator,
  putUserCollaborator: putUserCollaborator,
  deleteUserCollaborator: deleteUserCollaborator,
  getUserAggregations: getUserAggregations,
  postUserAggregation: postUserAggregation,
  putUserAggregation: putUserAggregation,
  deleteUserAggregation: deleteUserAggregation,
  getUserDeviceGroups: getUserDeviceGroups,
  postUserDeviceGroup: postUserDeviceGroup,
  getUserDeviceGroup: getUserDeviceGroup,
  putUserDeviceGroup: putUserDeviceGroup,
  deleteUserDeviceGroup: deleteUserDeviceGroup,
  getUserDevices: getUserDevices,
  postUserDevice: postUserDevice,
  getUserDevice: getUserDevice,
  putUserDevice: putUserDevice,
  getUserDeviceModules: getUserDeviceModules,
  putUserDeviceModule: putUserDeviceModule,
  deleteUserDeviceModule: deleteUserDeviceModule,
  putUserDeviceShares: putUserDeviceShares,
  getUserDeviceStatistics: getUserDeviceStatistics,
  getUserDeviceRawData: getUserDeviceRawData,
  getUserDeviceHourlyData: getUserDeviceHourlyData,
  getUserDeviceDailyData: getUserDeviceDailyData,
  getUserDeviceContinuousStatistics: getUserDeviceContinuousStatistics,
  getUserDeviceDegreeDays: getUserDeviceDegreeDays,
  getUserDeviceSummary: getUserDeviceSummary,
  getUserDeviceForecasts: getUserDeviceForecasts,
  getUserForecasts: getUserForecasts,
  getUserDailyData: getUserDailyData,
  getUserHourlyData: getUserHourlyData,
  getUserPreferences: getUserPreferences,
  putUserPreferences: putUserPreferences,
  getOrganisationOperations: getOrganisationOperations,
  postOrganisationOperation: postOrganisationOperation,
  getOrganisationOperation: getOrganisationOperation,
  putOrganisationOperation: putOrganisationOperation,
  deleteOrganisationOperation: deleteOrganisationOperation,
  getUserAlerts: getUserAlerts,
  postUserAlert: postUserAlert,
  putUserAlert: putUserAlert,
  deleteUserAlert: deleteUserAlert,
  postOrganisation: postOrganisation,
  putOrganisation: putOrganisation
};

/**
 * Checks API's availability.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getPing(_, options) {
  var method = 'get';
  var urlParts = ['ping'];
  var headers = {};
  var qs = cleanQuery({});
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Get the crops
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getCrops(_, options) {
  var method = 'get';
  var urlParts = ['crops'];
  var headers = {};
  var qs = cleanQuery({});
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Get the modules
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getModules(_, options) {
  var method = 'get';
  var urlParts = ['modules'];
  var headers = {};
  var qs = cleanQuery({});
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Hit the server to check the email can be used to signup.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {object} parameters.body
 * The email to check
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postSignupCheck() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      authorization = _ref.authorization,
      body = _ref.body;

  var options = arguments[1];

  var method = 'post';
  var urlParts = ['utils', 'checkSignup'];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = body;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Request a password change e-mail.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {object} parameters.body
 * The infos to send the mail
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postLostPassword() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      body = _ref2.body;

  var options = arguments[1];

  var method = 'post';
  var urlParts = ['password', 'lost'];
  var headers = {};
  var qs = cleanQuery({});
  var data = body;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Change a user password
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {object} parameters.body
 * The infos to change the password
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putPassword() {
  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      body = _ref3.body;

  var options = arguments[1];

  var method = 'put';
  var urlParts = ['password'];
  var headers = {};
  var qs = cleanQuery({});
  var data = body;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Log a user in
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {object} parameters.body
 * The infos to log in
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postLogin() {
  var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      body = _ref4.body;

  var options = arguments[1];

  var method = 'post';
  var urlParts = ['users', 'sign_in'];
  var headers = {};
  var qs = cleanQuery({});
  var data = body;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Verify a user
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {object} parameters.body
 * Verify the user
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postVerify() {
  var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      body = _ref5.body;

  var options = arguments[1];

  var method = 'post';
  var urlParts = ['users', 'verify'];
  var headers = {};
  var qs = cleanQuery({});
  var data = body;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Request a user token
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {undefined} parameters.authorization
 * Basic auth with API Client id and API Client Secret,
 * @param {number} parameters.partnerId
 * The partner organisation id,
 * @param {object} parameters.body
 * Request a user token
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postPartnerTokenRequest() {
  var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      authorization = _ref6.authorization,
      partnerId = _ref6.partnerId,
      body = _ref6.body;

  var options = arguments[1];

  var method = 'post';
  var urlParts = ['partners', partnerId, 'tokenRequests'];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = body;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Create a user token
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {undefined} parameters.authorization
 * Basic auth with API Client id and API Client Secret,
 * @param {number} parameters.partnerId
 * The partner organisation id,
 * @param {object} parameters.body
 * Create a user token
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postPartnerToken() {
  var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      authorization = _ref7.authorization,
      partnerId = _ref7.partnerId,
      body = _ref7.body;

  var options = arguments[1];

  var method = 'post';
  var urlParts = ['partners', partnerId, 'tokens'];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = body;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Retrieves the devices a partner has access to.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {number} parameters.partnerId
 * The partner organisation id,
 * @param {number} parameters.limit
 * The number of items to retrieve,
 * @param {number} parameters.start
 * The index in results
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getPartnerDevices() {
  var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      authorization = _ref8.authorization,
      partnerId = _ref8.partnerId,
      limit = _ref8.limit,
      start = _ref8.start;

  var options = arguments[1];

  var method = 'get';
  var urlParts = ['partners', partnerId, 'devices'];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({
    limit: limit,
    start: start
  });
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Get a user's profile.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUser() {
  var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref9.userId,
      authorization = _ref9.authorization;

  var options = arguments[1];

  var method = 'get';
  var urlParts = ['users', userId];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Update a user's profile.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {object} parameters.body
 * The new user
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUser() {
  var _ref10 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref10.userId,
      authorization = _ref10.authorization,
      body = _ref10.body;

  var options = arguments[1];

  var method = 'put';
  var urlParts = ['users', userId];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = body;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Get a user's guests.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserGuests() {
  var _ref11 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref11.userId,
      authorization = _ref11.authorization;

  var options = arguments[1];

  var method = 'get';
  var urlParts = ['users', userId, 'guests'];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Create a user's guest.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {undefined} parameters.body
 * The user's guest
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postUserGuest() {
  var _ref12 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref12.userId,
      authorization = _ref12.authorization,
      body = _ref12.body;

  var options = arguments[1];

  var method = 'post';
  var urlParts = ['users', userId, 'guests'];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = body;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Update a user's guest.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.guestId
 * The guest id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {object} parameters.body
 * The user's guest
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserGuest() {
  var _ref13 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref13.userId,
      guestId = _ref13.guestId,
      authorization = _ref13.authorization,
      body = _ref13.body;

  var options = arguments[1];

  var method = 'put';
  var urlParts = ['users', userId, 'guests', guestId];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = body;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Delete a user's guest.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.guestId
 * The guest id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteUserGuest() {
  var _ref14 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref14.userId,
      guestId = _ref14.guestId,
      authorization = _ref14.authorization;

  var options = arguments[1];

  var method = 'delete';
  var urlParts = ['users', userId, 'guests', guestId];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Get a user's collaborators.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserCollaborators() {
  var _ref15 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref15.userId,
      authorization = _ref15.authorization;

  var options = arguments[1];

  var method = 'get';
  var urlParts = ['users', userId, 'collaborators'];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Create a user's collaborator.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {undefined} parameters.body
 * The user's collaborator
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postUserCollaborator() {
  var _ref16 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref16.userId,
      authorization = _ref16.authorization,
      body = _ref16.body;

  var options = arguments[1];

  var method = 'post';
  var urlParts = ['users', userId, 'collaborators'];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = body;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Update a user's collaborator.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.collaboratorId
 * The collaborator id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {object} parameters.body
 * The user's collaborator
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserCollaborator() {
  var _ref17 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref17.userId,
      collaboratorId = _ref17.collaboratorId,
      authorization = _ref17.authorization,
      body = _ref17.body;

  var options = arguments[1];

  var method = 'put';
  var urlParts = ['users', userId, 'collaborators', collaboratorId];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = body;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Delete a user's collaborator.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.collaboratorId
 * The collaborator id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteUserCollaborator() {
  var _ref18 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref18.userId,
      collaboratorId = _ref18.collaboratorId,
      authorization = _ref18.authorization;

  var options = arguments[1];

  var method = 'delete';
  var urlParts = ['users', userId, 'collaborators', collaboratorId];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Get a user's aggregations.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {boolean} parameters.compute
 * Wether the aggregations should be computed,
 * @param {boolean} parameters.patched
 * Wether you want to get only original data or eventually patched ones to avoid holes.,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserAggregations() {
  var _ref19 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref19.userId,
      compute = _ref19.compute,
      patched = _ref19.patched,
      authorization = _ref19.authorization;

  var options = arguments[1];

  var method = 'get';
  var urlParts = ['users', userId, 'aggregations'];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({
    compute: compute,
    patched: patched
  });
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Create a user's aggregation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {object} parameters.body
 * The user's aggregation
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postUserAggregation() {
  var _ref20 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref20.userId,
      authorization = _ref20.authorization,
      body = _ref20.body;

  var options = arguments[1];

  var method = 'post';
  var urlParts = ['users', userId, 'aggregations'];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = body;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Update a user's aggregation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.aggregationId
 * The aggregation id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {object} parameters.body
 * The user's aggregation
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserAggregation() {
  var _ref21 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref21.userId,
      aggregationId = _ref21.aggregationId,
      authorization = _ref21.authorization,
      body = _ref21.body;

  var options = arguments[1];

  var method = 'put';
  var urlParts = ['users', userId, 'aggregations', aggregationId];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = body;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Delete a user's aggregation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.aggregationId
 * The aggregation id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteUserAggregation() {
  var _ref22 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref22.userId,
      aggregationId = _ref22.aggregationId,
      authorization = _ref22.authorization;

  var options = arguments[1];

  var method = 'delete';
  var urlParts = ['users', userId, 'aggregations', aggregationId];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Get a user's devices groups.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceGroups() {
  var _ref23 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref23.userId,
      authorization = _ref23.authorization;

  var options = arguments[1];

  var method = 'get';
  var urlParts = ['users', userId, 'deviceGroups'];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Create a user's device group.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {object} parameters.body
 * The user's device group
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postUserDeviceGroup() {
  var _ref24 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref24.userId,
      authorization = _ref24.authorization,
      body = _ref24.body;

  var options = arguments[1];

  var method = 'post';
  var urlParts = ['users', userId, 'deviceGroups'];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = body;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Get a user's devices group.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceGroupId
 * The device group id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceGroup() {
  var _ref25 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref25.userId,
      deviceGroupId = _ref25.deviceGroupId,
      authorization = _ref25.authorization;

  var options = arguments[1];

  var method = 'get';
  var urlParts = ['users', userId, 'deviceGroups', deviceGroupId];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Update a user's device group.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.deviceGroupId
 * The deviceGroup id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {object} parameters.body
 * The user's device group
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserDeviceGroup() {
  var _ref26 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref26.userId,
      deviceGroupId = _ref26.deviceGroupId,
      authorization = _ref26.authorization,
      body = _ref26.body;

  var options = arguments[1];

  var method = 'put';
  var urlParts = ['users', userId, 'deviceGroups', deviceGroupId];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = body;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Delete a user's device group.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceGroupId
 * The device group id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteUserDeviceGroup() {
  var _ref27 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref27.userId,
      deviceGroupId = _ref27.deviceGroupId,
      authorization = _ref27.authorization;

  var options = arguments[1];

  var method = 'delete';
  var urlParts = ['users', userId, 'deviceGroups', deviceGroupId];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Get a user's devices.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.date
 * The status date,
 * @param {array} parameters.measures
 * The measures to read,
 * @param {boolean} parameters.patched
 * Wether you want to get only original data or eventually patched ones to avoid holes.,
 * @param {number} parameters.limit
 * The number of items to retrieve,
 * @param {number} parameters.start
 * The index in results,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDevices() {
  var _ref28 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref28.userId,
      date = _ref28.date,
      measures = _ref28.measures,
      patched = _ref28.patched,
      limit = _ref28.limit,
      start = _ref28.start,
      authorization = _ref28.authorization;

  var options = arguments[1];

  var method = 'get';
  var urlParts = ['users', userId, 'devices'];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({
    date: date,
    measures: measures,
    patched: patched,
    limit: limit,
    start: start
  });
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Setup a user's device.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {object} parameters.body
 * The user device activation couple
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postUserDevice() {
  var _ref29 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref29.userId,
      authorization = _ref29.authorization,
      body = _ref29.body;

  var options = arguments[1];

  var method = 'post';
  var urlParts = ['users', userId, 'devices'];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = body;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Get a user's device.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDevice() {
  var _ref30 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref30.userId,
      deviceId = _ref30.deviceId,
      authorization = _ref30.authorization;

  var options = arguments[1];

  var method = 'get';
  var urlParts = ['users', userId, 'devices', deviceId];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Update a user's device.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {object} parameters.body
 * The user device
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserDevice() {
  var _ref31 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref31.userId,
      deviceId = _ref31.deviceId,
      authorization = _ref31.authorization,
      body = _ref31.body;

  var options = arguments[1];

  var method = 'put';
  var urlParts = ['users', userId, 'devices', deviceId];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = body;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Get the modules a user activated on its device
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceModules() {
  var _ref32 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref32.userId,
      deviceId = _ref32.deviceId,
      authorization = _ref32.authorization;

  var options = arguments[1];

  var method = 'get';
  var urlParts = ['users', userId, 'devices', deviceId, 'modules'];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Add a module to a user's device
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {number} parameters.moduleId
 * The module id,
 * @param {object} parameters.body
 * The module settings,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserDeviceModule() {
  var _ref33 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref33.userId,
      deviceId = _ref33.deviceId,
      moduleId = _ref33.moduleId,
      body = _ref33.body,
      authorization = _ref33.authorization;

  var options = arguments[1];

  var method = 'put';
  var urlParts = ['users', userId, 'devices', deviceId, 'modules', moduleId];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = body;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Disable a module for a user's device
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {number} parameters.moduleId
 * The module id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteUserDeviceModule() {
  var _ref34 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref34.userId,
      deviceId = _ref34.deviceId,
      moduleId = _ref34.moduleId,
      authorization = _ref34.authorization;

  var options = arguments[1];

  var method = 'delete';
  var urlParts = ['users', userId, 'devices', deviceId, 'modules', moduleId];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Update a user's device shares.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.sharesType
 * The shares type,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {array} parameters.body
 * The users concerned by the user's device share
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserDeviceShares() {
  var _ref35 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref35.userId,
      deviceId = _ref35.deviceId,
      sharesType = _ref35.sharesType,
      authorization = _ref35.authorization,
      body = _ref35.body;

  var options = arguments[1];

  var method = 'put';
  var urlParts = ['users', userId, 'devices', deviceId, 'shares', sharesType];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = body;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Get a user's device's device's statistics.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} parameters.startDate
 * The statistics start date,
 * @param {string} parameters.endDate
 * The statistics end date,
 * @param {array} parameters.measures
 * The measures to read,
 * @param {boolean} parameters.patched
 * Wether you want to get only original data or eventually patched ones to avoid holes.
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceStatistics() {
  var _ref36 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref36.userId,
      deviceId = _ref36.deviceId,
      authorization = _ref36.authorization,
      startDate = _ref36.startDate,
      endDate = _ref36.endDate,
      measures = _ref36.measures,
      patched = _ref36.patched;

  var options = arguments[1];

  var method = 'get';
  var urlParts = ['users', userId, 'devices', deviceId, 'statistics'];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({
    startDate: startDate,
    endDate: endDate,
    measures: measures,
    patched: patched
  });
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Get a user's device's raw data.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.beforeDate
 * The date before which the data starts being retrieved,
 * @param {number} parameters.size
 * The number of measures to retrieve,
 * @param {array} parameters.measures
 * The measures to read,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceRawData() {
  var _ref37 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref37.userId,
      deviceId = _ref37.deviceId,
      beforeDate = _ref37.beforeDate,
      size = _ref37.size,
      measures = _ref37.measures,
      authorization = _ref37.authorization;

  var options = arguments[1];

  var method = 'get';
  var urlParts = ['users', userId, 'devices', deviceId, 'data', 'raw'];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({
    beforeDate: beforeDate,
    size: size,
    measures: measures
  });
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Get a user's device's hourly data.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.beforeDate
 * The date before which the data starts being retrieved,
 * @param {number} parameters.days
 * The number of days to retrieve,
 * @param {array} parameters.measures
 * The measures to read,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceHourlyData() {
  var _ref38 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref38.userId,
      deviceId = _ref38.deviceId,
      beforeDate = _ref38.beforeDate,
      days = _ref38.days,
      measures = _ref38.measures,
      authorization = _ref38.authorization;

  var options = arguments[1];

  var method = 'get';
  var urlParts = ['users', userId, 'devices', deviceId, 'data', 'hourly'];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({
    beforeDate: beforeDate,
    days: days,
    measures: measures
  });
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Get a user's device's daily data.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.beforeDate
 * The date before which the data starts being retrieved,
 * @param {number} parameters.days
 * The number of days to retrieve,
 * @param {array} parameters.measures
 * The measures to read,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceDailyData() {
  var _ref39 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref39.userId,
      deviceId = _ref39.deviceId,
      beforeDate = _ref39.beforeDate,
      days = _ref39.days,
      measures = _ref39.measures,
      authorization = _ref39.authorization;

  var options = arguments[1];

  var method = 'get';
  var urlParts = ['users', userId, 'devices', deviceId, 'data', 'daily'];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({
    beforeDate: beforeDate,
    days: days,
    measures: measures
  });
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Get a user's device's continuous device's statistics.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} parameters.startDate
 * The statistics start date,
 * @param {string} parameters.endDate
 * The statistics end date,
 * @param {array} parameters.measures
 * The measures to read,
 * @param {boolean} parameters.patched
 * Wether you want to get only original data or eventually patched ones to avoid holes.
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceContinuousStatistics() {
  var _ref40 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref40.userId,
      deviceId = _ref40.deviceId,
      authorization = _ref40.authorization,
      startDate = _ref40.startDate,
      endDate = _ref40.endDate,
      measures = _ref40.measures,
      patched = _ref40.patched;

  var options = arguments[1];

  var method = 'get';
  var urlParts = ['users', userId, 'devices', deviceId, 'countinuousStatistics'];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({
    startDate: startDate,
    endDate: endDate,
    measures: measures,
    patched: patched
  });
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Get a user's device's degree days.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.startDate
 * The statistics start date,
 * @param {string} parameters.endDate
 * The statistics end date,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceDegreeDays() {
  var _ref41 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref41.userId,
      deviceId = _ref41.deviceId,
      startDate = _ref41.startDate,
      endDate = _ref41.endDate,
      authorization = _ref41.authorization;

  var options = arguments[1];

  var method = 'get';
  var urlParts = ['users', userId, 'devices', deviceId, 'degreeDays'];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({
    startDate: startDate,
    endDate: endDate
  });
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Get a user's device's summary at a given date.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} parameters.date
 * The summary date,
 * @param {array} parameters.measures
 * The measures to read
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceSummary() {
  var _ref42 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref42.userId,
      deviceId = _ref42.deviceId,
      authorization = _ref42.authorization,
      date = _ref42.date,
      measures = _ref42.measures;

  var options = arguments[1];

  var method = 'get';
  var urlParts = ['users', userId, 'devices', deviceId, 'summaries', date];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({
    measures: measures
  });
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Get a user's device's forecasts.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.date
 * Date of the forecasts,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceForecasts() {
  var _ref43 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref43.userId,
      deviceId = _ref43.deviceId,
      date = _ref43.date,
      authorization = _ref43.authorization;

  var options = arguments[1];

  var method = 'get';
  var urlParts = ['users', userId, 'devices', deviceId, 'forecasts'];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({
    date: date
  });
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Get a user's forecasts.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.latitude
 * The latitude of the forecasts,
 * @param {number} parameters.longitude
 * The longitude of the forecasts,
 * @param {string} parameters.date
 * Date of the forecasts,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserForecasts() {
  var _ref44 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref44.userId,
      latitude = _ref44.latitude,
      longitude = _ref44.longitude,
      date = _ref44.date,
      authorization = _ref44.authorization;

  var options = arguments[1];

  var method = 'get';
  var urlParts = ['users', userId, 'forecasts'];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({
    latitude: latitude,
    longitude: longitude,
    date: date
  });
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Get a user's daily data for a given geo location.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.latitude
 * The latitude of the data,
 * @param {number} parameters.longitude
 * The longitude of the data,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} parameters.beforeDate
 * The date before which the data starts being retrieved,
 * @param {number} parameters.days
 * The number of days to retrieve,
 * @param {array} parameters.measures
 * The measures to read
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDailyData() {
  var _ref45 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref45.userId,
      latitude = _ref45.latitude,
      longitude = _ref45.longitude,
      authorization = _ref45.authorization,
      beforeDate = _ref45.beforeDate,
      days = _ref45.days,
      measures = _ref45.measures;

  var options = arguments[1];

  var method = 'get';
  var urlParts = ['users', userId, 'data', 'daily'];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({
    latitude: latitude,
    longitude: longitude,
    beforeDate: beforeDate,
    days: days,
    measures: measures
  });
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Get a user's hourly data for a given geo location.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.latitude
 * The latitude of the data,
 * @param {number} parameters.longitude
 * The longitude of the data,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {string} parameters.beforeDate
 * The date before which the data starts being retrieved,
 * @param {number} parameters.days
 * The number of days to retrieve,
 * @param {array} parameters.measures
 * The measures to read
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserHourlyData() {
  var _ref46 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref46.userId,
      latitude = _ref46.latitude,
      longitude = _ref46.longitude,
      authorization = _ref46.authorization,
      beforeDate = _ref46.beforeDate,
      days = _ref46.days,
      measures = _ref46.measures;

  var options = arguments[1];

  var method = 'get';
  var urlParts = ['users', userId, 'data', 'hourly'];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({
    latitude: latitude,
    longitude: longitude,
    beforeDate: beforeDate,
    days: days,
    measures: measures
  });
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Get a user's preferences.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserPreferences() {
  var _ref47 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref47.userId,
      authorization = _ref47.authorization;

  var options = arguments[1];

  var method = 'get';
  var urlParts = ['users', userId, 'preferences'];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Update a user's preferences.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {object} parameters.body
 * The new user preferences
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserPreferences() {
  var _ref48 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref48.userId,
      authorization = _ref48.authorization,
      body = _ref48.body;

  var options = arguments[1];

  var method = 'put';
  var urlParts = ['users', userId, 'preferences'];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = body;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Get a organisation's operations.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getOrganisationOperations() {
  var _ref49 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      organisationId = _ref49.organisationId,
      authorization = _ref49.authorization;

  var options = arguments[1];

  var method = 'get';
  var urlParts = ['organisations', organisationId, 'operations'];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Create an organisation's operation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {object} parameters.body
 * The operation to add
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postOrganisationOperation() {
  var _ref50 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      organisationId = _ref50.organisationId,
      authorization = _ref50.authorization,
      body = _ref50.body;

  var options = arguments[1];

  var method = 'post';
  var urlParts = ['organisations', organisationId, 'operations'];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = body;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Retrieve an organisation's operation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.operationId
 * The operation id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getOrganisationOperation() {
  var _ref51 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      organisationId = _ref51.organisationId,
      operationId = _ref51.operationId,
      authorization = _ref51.authorization;

  var options = arguments[1];

  var method = 'get';
  var urlParts = ['organisations', organisationId, 'operations', operationId];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Update an organisation's operation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.operationId
 * The operation id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {object} parameters.body
 * The operation to update
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putOrganisationOperation() {
  var _ref52 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      organisationId = _ref52.organisationId,
      operationId = _ref52.operationId,
      authorization = _ref52.authorization,
      body = _ref52.body;

  var options = arguments[1];

  var method = 'put';
  var urlParts = ['organisations', organisationId, 'operations', operationId];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = body;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Delete an organisation's operation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.operationId
 * The operation id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteOrganisationOperation() {
  var _ref53 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      organisationId = _ref53.organisationId,
      operationId = _ref53.operationId,
      authorization = _ref53.authorization;

  var options = arguments[1];

  var method = 'delete';
  var urlParts = ['organisations', organisationId, 'operations', operationId];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Get a user's alerts.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserAlerts() {
  var _ref54 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref54.userId,
      authorization = _ref54.authorization;

  var options = arguments[1];

  var method = 'get';
  var urlParts = ['users', userId, 'alerts'];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Create a user's alert.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {object} parameters.body
 * The user's alert
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postUserAlert() {
  var _ref55 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref55.userId,
      authorization = _ref55.authorization,
      body = _ref55.body;

  var options = arguments[1];

  var method = 'post';
  var urlParts = ['users', userId, 'alerts'];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = body;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Update a user's alert.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.alertId
 * The alert id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism,
 * @param {object} parameters.body
 * The user's alert
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserAlert() {
  var _ref56 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref56.userId,
      alertId = _ref56.alertId,
      authorization = _ref56.authorization,
      body = _ref56.body;

  var options = arguments[1];

  var method = 'put';
  var urlParts = ['users', userId, 'alerts', alertId];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = body;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Delete a user's alert.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.alertId
 * The alert id,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteUserAlert() {
  var _ref57 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      userId = _ref57.userId,
      alertId = _ref57.alertId,
      authorization = _ref57.authorization;

  var options = arguments[1];

  var method = 'delete';
  var urlParts = ['users', userId, 'alerts', alertId];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = {}.undef;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Creates a new organisation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {object} parameters.body
 * The necessary contents to create a new organisation
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postOrganisation() {
  var _ref58 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      body = _ref58.body;

  var options = arguments[1];

  var method = 'post';
  var urlParts = ['organisations'];
  var headers = {};
  var qs = cleanQuery({});
  var data = body;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

/**
 * Update an organisation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {object} parameters.body
 * The modified organisation,
 * @param {string} parameters.authorization
 * Authorization with Bearer mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putOrganisation() {
  var _ref59 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      organisationId = _ref59.organisationId,
      body = _ref59.body,
      authorization = _ref59.authorization;

  var options = arguments[1];

  var method = 'put';
  var urlParts = ['organisations', organisationId];
  var headers = {
    Authorization: authorization
  };
  var qs = cleanQuery({});
  var data = body;

  return axios(Object.assign({
    baseURL: 'https://api.sencrop.com/v1',
    paramsSerializer: querystring.stringify.bind(querystring),
    validateStatus: function validateStatus(status) {
      return 200 <= status && 300 > status;
    },
    method: method,
    url: urlParts.join('/'),
    headers: headers,
    params: qs,
    data: data
  }, options || {}));
}

module.exports = API;